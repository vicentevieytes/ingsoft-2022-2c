

----QUIT----(26 October 2022 08:07:27) CuisUniversity-5510.image priorSource: 2900072!

----STARTUP---- (26 October 2022 08:07:28) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5510.image!


----QUIT----(26 October 2022 08:07:28) CuisUniversity-5510.image priorSource: 7154921!

----STARTUP---- (14 November 2022 18:02:12) as /home/clinux01/Descargas/linux64/CuisUniversity-5510.image!


----End fileIn of /home/clinux01/Descargas/linux64/CustomerImporter-35.st----!
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:05:00'!
import

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter class methodsFor: 'as yet unclassified' stamp: 'MV 11/14/2022 18:05:00' prior: 50555565!
valueFrom: aReadStream into: aSession

	^(self from: aReadStream into: aSession) import! !

!methodRemoval: CustomerImporter #value stamp: 'MV 11/14/2022 18:05:00'!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	!
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:05:06' prior: 50555668!
import

	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:05:57' prior: 50555739!
import

	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | record |
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:06:02' prior: 50555771!
import

	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | record |
			record := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | record newAddress |
			record := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:06:24' prior: 50555802!
import

	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [|record|
		record := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:06:26'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:06:51'!
PASSED!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'MV 11/14/2022 18:07:34' prior: 50555831!
import

	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [|record|
		record := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'MV 11/14/2022 18:07:34'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:07:53'!
isCustomerRecord

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:07:53' prior: 50555864!
import

	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [|record|
		record := line findTokens: $,.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:08:04'!
isAddressRecord

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:08:04' prior: 50555905!
import

	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [|record|
		record := line findTokens: $,.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:08:12' prior: 50555938!
import

	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [|record|
		record := line findTokens: $,.
		self isCustomerRecord ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:08:13'!
PASSED!

----SNAPSHOT----(14 November 2022 18:08:46) CuisUniversity-5510.image priorSource: 7155150!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'MV 11/14/2022 18:09:03' prior: 50555966!
import

	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		record := line findTokens: $,.
		self isCustomerRecord ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'MV 11/14/2022 18:09:03'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'MV 11/14/2022 18:10:15' prior: 50556000!
import

	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		record := line findTokens: $,.
		self isCustomerRecord ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'MV 11/14/2022 18:10:15'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line record newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:10:25'!
importCustomer

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:10:25' prior: 50556036!
import

	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		record := line findTokens: $,.
		self isCustomerRecord ifTrue: [ 
			self importCustomer ].

		self isAddressRecord ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:10:51'!
importAddress

	| newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:10:51' prior: 50556083!
import

	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		record := line findTokens: $,.
		self isCustomerRecord ifTrue: [ 
			self importCustomer ].

		self isAddressRecord ifTrue: [ self importAddress ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:11:00' prior: 50556116!
import

	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		record := line findTokens: $,.
		self isCustomerRecord ifTrue: [		self importCustomer ].

		self isAddressRecord ifTrue: [ self importAddress ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:11:01'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:11:34'!
createRecord

	^ record := line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:11:34' prior: 50556128!
import

	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		self createRecord.
		self isCustomerRecord ifTrue: [		self importCustomer ].

		self isAddressRecord ifTrue: [ self importAddress ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:11:46'!
importRecord

	self isCustomerRecord ifTrue: [		self importCustomer ].

		self isAddressRecord ifTrue: [ self importAddress ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:11:46' prior: 50556146!
import

	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		self createRecord.
		self importRecord.

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:11:55' prior: 50556164!
import

	 

	
	[line := readStream nextLine. line notNil ] whileTrue: [ 
		self createRecord.
		self importRecord.

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:11:56'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:11:56'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:12:04' prior: 50556172!
import

	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		self createRecord.
		self importRecord.

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:12:05'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:12:16' prior: 50556185!
import

	 

	
	[line := readStream nextLine. line notNil ] whileTrue: [ 
		self createRecord.
		self importRecord.
		].

	! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:12:17'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:12:28'!
hasLineToImport

	line := readStream nextLine. line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:12:28' prior: 50556196!
import

	 

	
	[self hasLineToImport ] whileTrue: [ 
		self createRecord.
		self importRecord.
		].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:12:32' prior: 50556210!
import

	[self hasLineToImport ] whileTrue: [ 
		self createRecord.
		self importRecord.
		].

	! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:12:33'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:12:33'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 18:12:48' prior: 50556205!
hasLineToImport

	line := readStream nextLine.
	^line notNil! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:12:49'!
PASSED!

----SNAPSHOT----(14 November 2022 18:13:36) CuisUniversity-5510.image priorSource: 7179038!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:17:22'!
test02ImportingAnInvalidRecordTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidRecordType into: session]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorMessage.
							 self assert: session ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:18:01' prior: 50556238!
test02ImportingAnInvalidRecordTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidRecordType into: session]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorMessage.
							self assert: 2 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:18:04' prior: 50556251!
test02ImportingAnInvalidRecordTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidRecordType into: session]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorMessage.
								self assert: 2 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:18:12' prior: 50556265!
test02ImportingAnInvalidRecordTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidRecordType into: session]
		raise: Error
		withExceptionDo: [:anError| 						self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorMessage.
								self assert: 2 equals: (session selectAllOfType: Customer) size ]

	! !

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:18:12'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:18:17' prior: 50556279!
test02ImportingAnInvalidRecordTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidRecordType into: session]
		raise: Error
		withExceptionDo: [:anError| 						self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorMessage.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:18:19'!
ERROR!
!CustomerImporter class methodsFor: 'error ' stamp: 'MV 11/14/2022 18:18:36'!
invalidRecordTypeErrorMessage
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error' stamp: 'MV 11/14/2022 18:18:46' prior: 50556315!
invalidRecordTypeErrorMessage
	
	^'Invalid Record Type'! !

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:18:48'!
FAILURE!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:19:26'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:19:48' prior: 50556297!
test02ImportingAnInvalidRecordTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidRecordType into: session]
		raise: Error
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:19:49'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:20:11' prior: 50556332!
test02ImportingAnInvalidRecordTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidRecordType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:20:12'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:20:23'!
importDataWithInvalidRecordType
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:20:54' prior: 50556368!
importDataWithInvalidRecordType
	
	^Stream newFrom: 'X'.! !
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:21:15' prior: 50556373!
importDataWithInvalidRecordType
	
	^ReadStream on: 'X'.! !

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:21:16'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:21:21'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:21:21'!
FAILURE!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:21:21'!
FAILURE!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:22:03' prior: 50556157!
importRecord

	self isCustomerRecord ifTrue: [		self importCustomer ].
	self isAddressRecord ifTrue: [ self importAddress ].
	self error: self class invalidRecordTypeErrorMessage! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:22:04'!
ERROR!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:22:04'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:22:05'!
ERROR!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:22:29' prior: 50556396!
importRecord

	self isCustomerRecord ifTrue: [		^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].
	self error: self class invalidRecordTypeErrorMessage! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:22:30'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:22:31'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:23:10'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:28:47'!
test03ImportingCustomerWithInvalidCustomerRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidCustomerType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!testRun: #ImportTest #test03ImportingCustomerWithInvalidCustomerRaisesError stamp: 'MV 11/14/2022 18:28:55'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:28:59'!
importDataWithInvalidCustomerType
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:29:36' prior: 50556450!
importDataWithInvalidCustomerType
	
	^ReadStream on: 'CX,Pepe,Sanchez,D,22333444'! !

!testRun: #ImportTest #test03ImportingCustomerWithInvalidCustomerRaisesError stamp: 'MV 11/14/2022 18:29:45'!
FAILURE!

!testRun: #ImportTest #test03ImportingCustomerWithInvalidCustomerRaisesError stamp: 'MV 11/14/2022 18:29:45'!
FAILURE!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:29:58' prior: 50555900!
isCustomerRecord

	^ line beginsWith: 'C,'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:29:59'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:30:00'!
PASSED!

!testRun: #ImportTest #test03ImportingCustomerWithInvalidCustomerRaisesError stamp: 'MV 11/14/2022 18:30:00'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:30:39'!
test03ImportingDataWithInvalidCustomerRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidCustomerType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: ImportTest #test03ImportingCustomerWithInvalidCustomerRaisesError stamp: 'MV 11/14/2022 18:30:39'!
test03ImportingCustomerWithInvalidCustomerRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidCustomerType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:30:56'!
test03ImportingDataWithInvalidCustomerTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidCustomerType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: ImportTest #test03ImportingDataWithInvalidCustomerRaisesError stamp: 'MV 11/14/2022 18:30:56'!
test03ImportingDataWithInvalidCustomerRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidCustomerType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:31:10'!
test03ImportingDataWithInvalidAddressTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidAddressType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:31:25'!
test04ImportingDataWithInvalidAddressTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidAddressType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: ImportTest #test03ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:31:25'!
test03ImportingDataWithInvalidAddressTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidAddressType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:31:28'!
ERROR!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:31:28'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:31:37'!
importDataWithInvalidAddressType
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:32:19' prior: 50556597!
importDataWithInvalidAddressType
	
	^ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:32:20'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:32:20'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:32:20'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:32:21'!
FAILURE!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:32:21'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:32:27'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:32:27'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:32:27'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:32:27'!
FAILURE!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:32:27'!
FAILURE!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:32:33' prior: 50555933!
isAddressRecord

	^ line beginsWith: 'A,'! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:32:36' prior: 50556643!
isAddressRecord

	^ line beginsWith: 'A'! !
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:32:49' prior: 50556602!
importDataWithInvalidAddressType
	
	^ReadStream on:
'C,Pepe,Sanchez,D,22333444
AX,San Martin,3322,Olivos,1636,BsAs'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:33:00'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:33:00'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:33:00'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:33:01'!
FAILURE!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:33:01'!
FAILURE!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:33:07' prior: 50556648!
isAddressRecord

	^ line beginsWith: 'A,'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:33:08'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:33:08'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:33:09'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:33:09'!
FAILURE!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:33:09'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:33:30' prior: 50556559!
test04ImportingDataWithInvalidAddressTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidAddressType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Address) size ]

	! !

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:33:31'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:33:33'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:33:33'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:33:33'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:33:33'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:37:06'!
test05ImportingDataWithEmptyLineRaisesException

	self should: [CustomerImporter valueFrom: self importDataWithEmptyLine into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter emptyLineOnDataErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Address) size ]

	! !

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:37:11'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'MV 11/14/2022 18:37:26'!
importDataWithEmptyLine
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'MV 11/14/2022 18:37:53' prior: 50556748!
importDataWithEmptyLine
	^'Cannot import data with an empty line'! !

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:37:56'!
ERROR!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:38:23'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'MV 11/14/2022 18:38:45' prior: 50556753!
importDataWithEmptyLine
	'
	'! !
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:39:05' prior: 50556766!
importDataWithEmptyLine
	'
	C,Pepe,Sanchez,D,22333444	'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:39:10'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:39:10'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:39:10'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:39:10'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:39:10'!
ERROR!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:39:10'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:39:45' prior: 50556770!
importDataWithEmptyLine
	^'
	C,Pepe,Sanchez,D,22333444	'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:39:46'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:39:47'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:39:47'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:39:47'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:39:47'!
ERROR!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:39:47'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:40:04' prior: 50556795!
importDataWithEmptyLine
	^ReadStream on:'
	C,Pepe,Sanchez,D,22333444	'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:40:06'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:40:07'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:40:07'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:40:07'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:40:07'!
ERROR!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:40:07'!
ERROR!
!CustomerImporter class methodsFor: 'error message' stamp: 'MV 11/14/2022 18:40:13'!
emptyLineOnDataErrorMessage
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error message' stamp: 'MV 11/14/2022 18:40:27' prior: 50556846!
emptyLineOnDataErrorMessage
	^'Empty line detected on import data'.! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:40:39'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:40:39'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:40:39'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:40:39'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:40:39'!
FAILURE!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:40:39'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:41:20' prior: 50556820!
importDataWithEmptyLine
	^ReadStream on:'
	C,Pepe,Sanchez,D,22333444
	
	C,Pepe,Sanchez,D,22333444	'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:41:22'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:41:22'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:41:22'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:41:23'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:41:23'!
FAILURE!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:41:23'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:41:44' prior: 50556877!
importDataWithEmptyLine
	^ReadStream on:'
	
	C,Pepe,Sanchez,D,22333444	'! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:42:50' prior: 50556413!
importRecord

	self isCustomerRecord ifTrue: [		^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].
	line isEmpty ifTrue: [self error: self class emptyLineOnDataErrorMessage ].
	self error: self class invalidRecordTypeErrorMessage! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:42:52'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:42:52'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:42:52'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:42:52'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:42:52'!
PASSED!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:43:40'!
assertLineIsNotEmpty

	^ line isEmpty ifTrue: [self error: self class emptyLineOnDataErrorMessage ]! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:43:40' prior: 50556910!
importRecord

	self isCustomerRecord ifTrue: [		^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].
	self assertLineIsNotEmpty.
	self error: self class invalidRecordTypeErrorMessage! !
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:47:45'!
test96ImportingDataWithInvalidAddressTypeRaisesError

	self should: [CustomerImporter valueFrom: self validImportData into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Address) size ]

	! !

!testRun: #ImportTest #test96ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:47:49'!
FAILURE!

!testRun: #ImportTest #test96ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:47:49'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:48:21' prior: 50556954!
test96ImportingDataWithInvalidAddressTypeRaisesError

	CustomerImporter valueFrom: self validImportData into: session.
	self assert: 0 equals: (session selectAllOfType: Address) size 

	! !

!testRun: #ImportTest #test96ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:48:22'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:48:23'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:48:23'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:48:23'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:48:23'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:48:24'!
PASSED!

!testRun: #ImportTest #test96ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:48:24'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:49:37' prior: 50556698!
test04ImportingDataWithInvalidAddressTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidAddressType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:50:19' prior: 50556730!
test05ImportingDataWithEmptyLineRaisesException

	self should: [CustomerImporter valueFrom: self importDataWithEmptyLine into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter emptyLineOnDataErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:50:20'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:50:20'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:50:20'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:50:21'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:50:21'!
FAILURE!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:50:21'!
PASSED!

!testRun: #ImportTest #test96ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:50:21'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:50:22'!
FAILURE!

!methodRemoval: ImportTest #test96ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:50:27'!
test96ImportingDataWithInvalidAddressTypeRaisesError

	CustomerImporter valueFrom: self validImportData into: session.
	self assert: 0 equals: (session selectAllOfType: Address) size 

	!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:50:34'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:50:36'!
FAILURE!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:50:37'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:51:29' prior: 50557009!
test04ImportingDataWithInvalidAddressTypeRaisesError

	self should: [CustomerImporter valueFrom: self importDataWithInvalidAddressType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: (session selectAllOfType: Customer) anyOne addresses isEmpty]

	! !

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:51:30'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:51:30'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:51:31'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:51:31'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:51:31'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:51:31'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:53:40'!
test06ImportingDataWithAddressBeforeCustomerRaisesException

	self should: [CustomerImporter valueFrom: self importDataWithOnlyAddress into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter noCustomerToAssignAddress equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:53:53' prior: 50557123!
test06ImportingDataWithAddressBeforeCustomerRaisesException

	self should: [CustomerImporter valueFrom: self importDataWithOnlyAddress into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter noCustomerToAssignAddressErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 18:54:05' prior: 50557138!
test06ImportingDataWithAddressBeforeCustomerRaisesException

	self should: [CustomerImporter valueFrom: self importDataWithAddressBeforeCustomer into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter noCustomerToAssignAddressErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 18:54:07'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:54:13'!
importDataWithAddressBeforeCustomer
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:54:46' prior: 50557173!
importDataWithAddressBeforeCustomer
	^'A,San Martin,3322,Olivos,1636,BsAs
	C,Pepe,Sanchez,D,22333444'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:55:00'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:55:00'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:55:00'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:55:00'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:55:01'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 18:55:01'!
ERROR!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 18:55:01'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 18:55:16' prior: 50557178!
importDataWithAddressBeforeCustomer
	^ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
	C,Pepe,Sanchez,D,22333444'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:55:17'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:55:17'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:55:17'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:55:18'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:55:18'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 18:55:18'!
ERROR!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 18:55:18'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:55:51'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:55:52'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:55:52'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:55:52'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:55:52'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 18:55:52'!
ERROR!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 18:55:52'!
ERROR!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:57:17' prior: 50556103!
importAddress

	| newAddress |
			newAddress := Address new.
			newCustomer ifNil: [self error: self class ]. 
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter class methodsFor: 'error message' stamp: 'MV 11/14/2022 18:58:17'!
noCustomerToAssignAddressErrorMessage

^'No customer to assign address'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:58:26'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:58:26'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:58:26'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:58:27'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:58:27'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 18:58:27'!
FAILURE!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 18:58:27'!
FAILURE!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 18:58:40' prior: 50557265!
importAddress

	| newAddress |
			newAddress := Address new.
			newCustomer ifNil: [self error: self class noCustomerToAssignAddressErrorMessage ]. 
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 18:58:41'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 18:58:42'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 18:58:42'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 18:58:42'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 18:58:42'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 18:58:42'!
PASSED!

----SNAPSHOT----(14 November 2022 18:59:00) CuisUniversity-5510.image priorSource: 7186701!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 19:14:14'!
test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError


	self should: [CustomerImporter valueFrom: self dataWithCustomerWithIncorrectNumberOfValues into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter incorrectAmmountOfValuesOnCustomer equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:14:16'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 19:14:28'!
dataWithCustomerWithIncorrectNumberOfValues
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 19:15:04' prior: 50557369!
dataWithCustomerWithIncorrectNumberOfValues
	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444, ahoooooooooga'! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:18:34' prior: 50556071!
importCustomer

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:21:33' prior: 50557381!
importCustomer
	
	(record size = 5) ifFalse: [self error: self class ].
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:21:53' prior: 50557393!
importCustomer
	
	(record size = 5) ifFalse: [self error: self class incorrectAmmountOfValuesOnCustomer].
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:21:56'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:21:56'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:21:56'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:21:56'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:21:56'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:21:57'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:21:57'!
ERROR!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:21:57'!
ERROR!
!CustomerImporter class methodsFor: 'error message' stamp: 'MV 11/14/2022 19:22:01'!
incorrectAmmountOfValuesOnCustomer
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error message' stamp: 'MV 11/14/2022 19:22:22' prior: 50557449!
incorrectAmmountOfValuesOnCustomer
	^'Incorrect ammount of comma separeted values on customer'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:22:49'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:22:49'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:22:49'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:22:50'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:22:50'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:22:50'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:22:50'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:22:54'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:22:54'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:22:54'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:22:54'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:22:55'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:22:55'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:22:55'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:23:11'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:23:11'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:23:11'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:23:12'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:23:12'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:23:12'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:23:12'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:23:12'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 19:23:49'!
test08ImportingAddressWithIncorrectNumberOfParametersRaisesError


	self should: [CustomerImporter valueFrom: self dataWithAddressWithIncorrectNumberOfValues into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter incorrectAmmountOfValuesOnAddress equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:23:50'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 19:23:55'!
dataWithAddressWithIncorrectNumberOfValues
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'MV 11/14/2022 19:24:21' prior: 50557559!
dataWithAddressWithIncorrectNumberOfValues
	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:24:29'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:24:29'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:24:29'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:24:29'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:24:29'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:24:30'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:24:30'!
PASSED!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:24:30'!
ERROR!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:24:30'!
ERROR!
!CustomerImporter class methodsFor: 'error message' stamp: 'MV 11/14/2022 19:24:44'!
incorrectAmmountOfValuesOnAddress
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error message' stamp: 'MV 11/14/2022 19:24:58' prior: 50557604!
incorrectAmmountOfValuesOnAddress
	^'Incorrect ammount of comma separated values on address'! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:26:01' prior: 50557310!
importAddress

	| newAddress |
			(record size = 6) ifFalse: [self error: self class incorrectAmmountOfValuesOnAddressErrorMessage].
			newAddress := Address new.
			newCustomer ifNil: [self error: self class noCustomerToAssignAddressErrorMessage ]. 
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter class methodsFor: 'error message' stamp: 'MV 11/14/2022 19:26:26' prior: 50557610!
incorrectAmmountOfValuesOnAddress
	^'Incorrect ammount of comma separated values on address'! !
!CustomerImporter class methodsFor: 'error message' stamp: 'MV 11/14/2022 19:26:26'!
incorrectAmmountOfValuesOnAddressErrorMessage
	^'Incorrect ammount of comma separated values on address'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'MV 11/14/2022 19:26:26' prior: 50557539!
test08ImportingAddressWithIncorrectNumberOfParametersRaisesError


	self should: [CustomerImporter valueFrom: self dataWithAddressWithIncorrectNumberOfValues into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter incorrectAmmountOfValuesOnAddressErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: CustomerImporter class #incorrectAmmountOfValuesOnAddress stamp: 'MV 11/14/2022 19:26:26'!
incorrectAmmountOfValuesOnAddress
	^'Incorrect ammount of comma separated values on address'!
!CustomerImporter class methodsFor: 'error message' stamp: 'MV 11/14/2022 19:26:37'!
incorrectAmmountOfValuesOnCustomerErrorMessage
	^'Incorrect ammount of comma separeted values on customer'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'MV 11/14/2022 19:26:37' prior: 50557406!
importCustomer
	
	(record size = 5) ifFalse: [self error: self class incorrectAmmountOfValuesOnCustomerErrorMessage].
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'MV 11/14/2022 19:26:37' prior: 50557349!
test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError


	self should: [CustomerImporter valueFrom: self dataWithCustomerWithIncorrectNumberOfValues into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter incorrectAmmountOfValuesOnCustomerErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: CustomerImporter class #incorrectAmmountOfValuesOnCustomer stamp: 'MV 11/14/2022 19:26:37'!
incorrectAmmountOfValuesOnCustomer
	^'Incorrect ammount of comma separeted values on customer'!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:26:41'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:26:42'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:26:42'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:26:42'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:26:42'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:26:42'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:26:42'!
PASSED!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:26:43'!
FAILURE!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:26:43'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 19:27:16' prior: 50557648!
test08ImportingAddressWithIncorrectNumberOfParametersRaisesError


	self should: [CustomerImporter valueFrom: self dataWithAddressWithIncorrectNumberOfValues into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter incorrectAmmountOfValuesOnAddressErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) addresses size ]

	! !

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:27:17'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:27:22'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:27:23'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:27:23'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:27:23'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:27:23'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:27:23'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:27:23'!
PASSED!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:27:24'!
ERROR!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:27:24'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'MV 11/14/2022 19:27:30' prior: 50557749!
test08ImportingAddressWithIncorrectNumberOfParametersRaisesError


	self should: [CustomerImporter valueFrom: self dataWithAddressWithIncorrectNumberOfValues into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter incorrectAmmountOfValuesOnAddressErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) anyOne addresses size ]

	! !

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:27:32'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:27:43'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:27:43'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:27:43'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:27:43'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:27:44'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:27:44'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:27:44'!
PASSED!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:27:44'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:31:02'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:31:03'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:31:03'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:31:03'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:31:03'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:31:03'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:31:03'!
PASSED!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:31:04'!
PASSED!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:37:44'!
assertAddressRecordSize

	^ (record size = 6) ifFalse: [self error: self class incorrectAmmountOfValuesOnAddressErrorMessage]! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:37:44' prior: 50557616!
importAddress

	| newAddress |
			self assertAddressRecordSize.
			newAddress := Address new.
			newCustomer ifNil: [self error: self class noCustomerToAssignAddressErrorMessage ]. 
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:37:56'!
assertCustomerRecordSize

	^ (record size = 5) ifFalse: [self error: self class incorrectAmmountOfValuesOnCustomerErrorMessage]! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:37:56' prior: 50557678!
importCustomer
	
	self assertCustomerRecordSize.
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:38:09' prior: 50557912!
importCustomer
	
	self assertCustomerRecordSize.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:39:05' prior: 50556677!
isAddressRecord

	^ record first =  'A'! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:39:21' prior: 50556468!
isCustomerRecord

	^ record first = 'C'! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:39:22'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:39:23'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:39:23'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:39:23'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:39:23'!
FAILURE!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:39:23'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:39:23'!
PASSED!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:39:23'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:39:23'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:39:36'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:39:36'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:39:36'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:39:36'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:39:36'!
FAILURE!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:39:37'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:39:37'!
PASSED!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:39:37'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:39:37'!
FAILURE!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:41:34' prior: 50556945!
importRecord

	self isCustomerRecord ifTrue: [		^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].
	
	self error: self class invalidRecordTypeErrorMessage! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'MV 11/14/2022 19:41:51' prior: 50556217!
import

	[self hasLineToImport ] whileTrue: [ 
		self createRecord.
		self importRecord.
		].

	! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:41:57' prior: 50556141!
createRecord
	self assertLineIsNotEmpty.
	^ record := line findTokens: $,! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:41:58'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:41:58'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:41:58'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:41:58'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:41:59'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:41:59'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:41:59'!
PASSED!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:41:59'!
PASSED!

	self assertLineIsNotEmpty.!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'MV 11/14/2022 19:42:16' prior: 50558027!
createRecord
	
	self assertLineIsNotEmpty.
	^ record := line findTokens: $,! !

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:42:18'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:42:18'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:42:18'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:42:19'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:42:19'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:42:19'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:42:19'!
PASSED!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:42:19'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'MV 11/14/2022 19:42:54'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'MV 11/14/2022 19:42:55'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'MV 11/14/2022 19:42:55'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'MV 11/14/2022 19:42:55'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'MV 11/14/2022 19:42:55'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'MV 11/14/2022 19:42:55'!
PASSED!

!testRun: #ImportTest #test07ImportingCustomerWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:42:55'!
PASSED!

!testRun: #ImportTest #test08ImportingAddressWithIncorrectNumberOfParametersRaisesError stamp: 'MV 11/14/2022 19:42:55'!
PASSED!

----STARTUP---- (17 November 2022 11:38:48) as C:\Lautaro Disco C\Programas Varios\CuisUniversity\CuisUniversity-5510.image!


----End fileIn of C:\Lautaro Disco C\Programas Varios\CuisUniversity\CustomerImporter.st----!

----End fileIn of C:\Lautaro Disco C\Programas Varios\CuisUniversity\CustomerImporter.st----!
!CustomerImporter class methodsFor: 'error message' stamp: 'LM 11/17/2022 11:40:28'!
noCustomerToAssignAddressTorrorMessage

^'No customer to assign address'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:40:28' prior: 50555912!
test06ImportingDataWithAddressBeforeCustomerRaisesException

	self should: [CustomerImporter valueFrom: self importDataWithAddressBeforeCustomer into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter noCustomerToAssignAddressTorrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:40:28' prior: 50556247!
importAddress

	| newAddress |
			newAddress := Address new.
			newCustomer ifNil: [self error: self class noCustomerToAssignAddressTorrorMessage ]. 
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !

!methodRemoval: CustomerImporter class #noCustomerToAssignAddressErrorMessage stamp: 'LM 11/17/2022 11:40:28'!
noCustomerToAssignAddressErrorMessage

^'No customer to assign address'!
!CustomerImporter class methodsFor: 'error message' stamp: 'LM 11/17/2022 11:40:37'!
noCustomerToAssignAddressToErrorMessage

^'No customer to assign address'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:40:37' prior: 50556458!
importAddress

	| newAddress |
			newAddress := Address new.
			newCustomer ifNil: [self error: self class noCustomerToAssignAddressToErrorMessage ]. 
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:40:37' prior: 50556441!
test06ImportingDataWithAddressBeforeCustomerRaisesException

	self should: [CustomerImporter valueFrom: self importDataWithAddressBeforeCustomer into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter noCustomerToAssignAddressToErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: CustomerImporter class #noCustomerToAssignAddressTorrorMessage stamp: 'LM 11/17/2022 11:40:37'!
noCustomerToAssignAddressTorrorMessage

^'No customer to assign address'!

!testRun: #ImportTest #test01Import stamp: 'LM 11/17/2022 11:40:39'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'LM 11/17/2022 11:40:39'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'LM 11/17/2022 11:40:39'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'LM 11/17/2022 11:40:39'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'LM 11/17/2022 11:40:39'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'LM 11/17/2022 11:40:40'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LM 11/17/2022 11:43:00'!
test07ImportingDataWithEmptyFieldsRaisesException

	self should: [CustomerImporter valueFrom: self importDataWithEmptyFields into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter amongus equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!CustomerImporter class methodsFor: 'error message' stamp: 'LM 11/17/2022 11:43:35'!
emptyFieldErrorMessage

	^'Data fields can not be empty'! !
!CustomerImporter class methodsFor: 'error message' stamp: 'LM 11/17/2022 11:43:54'!
incorrectNumberOfFieldsErrorMessage

	^'Incorrect number of data fields'! !
!ImportTest methodsFor: 'test data' stamp: 'LM 11/17/2022 11:44:35'!
dataWithAddressBeforeCustomer
	^ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
	C,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:44:35' prior: 50556502!
test06ImportingDataWithAddressBeforeCustomerRaisesException

	self should: [CustomerImporter valueFrom: self dataWithAddressBeforeCustomer into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter noCustomerToAssignAddressToErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: ImportTest #importDataWithAddressBeforeCustomer stamp: 'LM 11/17/2022 11:44:35'!
importDataWithAddressBeforeCustomer
	^ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
	C,Pepe,Sanchez,D,22333444'!
!ImportTest methodsFor: 'test data' stamp: 'LM 11/17/2022 11:44:40'!
dataWithEmptyLine
	^ReadStream on:'
	
	C,Pepe,Sanchez,D,22333444	'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:44:40' prior: 50555897!
test05ImportingDataWithEmptyLineRaisesException

	self should: [CustomerImporter valueFrom: self dataWithEmptyLine into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter emptyLineOnDataErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: ImportTest #importDataWithEmptyLine stamp: 'LM 11/17/2022 11:44:40'!
importDataWithEmptyLine
	^ReadStream on:'
	
	C,Pepe,Sanchez,D,22333444	'!
!ImportTest methodsFor: 'test data' stamp: 'LM 11/17/2022 11:44:48'!
dataWithInvalidAddressType
	
	^ReadStream on:
'C,Pepe,Sanchez,D,22333444
AX,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:44:48' prior: 50555881!
test04ImportingDataWithInvalidAddressTypeRaisesError

	self should: [CustomerImporter valueFrom: self dataWithInvalidAddressType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: (session selectAllOfType: Customer) anyOne addresses isEmpty]

	! !

!methodRemoval: ImportTest #importDataWithInvalidAddressType stamp: 'LM 11/17/2022 11:44:48'!
importDataWithInvalidAddressType
	
	^ReadStream on:
'C,Pepe,Sanchez,D,22333444
AX,San Martin,3322,Olivos,1636,BsAs'!
!ImportTest methodsFor: 'test data' stamp: 'LM 11/17/2022 11:44:54'!
dataWithInvalidCustomerType
	
	^ReadStream on: 'CX,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:44:54' prior: 50555866!
test03ImportingDataWithInvalidCustomerTypeRaisesError

	self should: [CustomerImporter valueFrom: self dataWithInvalidCustomerType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: ImportTest #importDataWithInvalidCustomerType stamp: 'LM 11/17/2022 11:44:54'!
importDataWithInvalidCustomerType
	
	^ReadStream on: 'CX,Pepe,Sanchez,D,22333444'!
!ImportTest methodsFor: 'test data' stamp: 'LM 11/17/2022 11:44:59'!
dataWithInvalidRecordType
	
	^ReadStream on: 'X'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:44:59' prior: 50555851!
test02ImportingAnInvalidRecordTypeRaisesError

	self should: [CustomerImporter valueFrom: self dataWithInvalidRecordType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: ImportTest #importDataWithInvalidRecordType stamp: 'LM 11/17/2022 11:44:59'!
importDataWithInvalidRecordType
	
	^ReadStream on: 'X'.!
!ImportTest methodsFor: 'test data' stamp: 'LM 11/17/2022 11:45:26'!
dataWithEmptyField

	^ ReadStream on:
'C,Pepe,,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'LM 11/17/2022 11:45:42' prior: 50556544!
test07ImportingDataWithEmptyFieldsRaisesException

	self should: [CustomerImporter valueFrom: self dataWithEmptyField into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter amongus equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'tests' stamp: 'LM 11/17/2022 11:45:51' prior: 50556706!
test07ImportingDataWithEmptyFieldsRaisesException

	self should: [CustomerImporter valueFrom: self dataWithEmptyField into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter emptyFieldErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!testRun: #ImportTest #test07ImportingDataWithEmptyFieldsRaisesException stamp: 'LM 11/17/2022 11:45:52'!
FAILURE!
!CustomerImporter class methodsFor: 'importing' stamp: 'LM 11/17/2022 11:47:00'!
importFrom: aReadStream into: aSession

	^(self from: aReadStream into: aSession) import! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:47:00' prior: 50556682!
test02ImportingAnInvalidRecordTypeRaisesError

	self should: [CustomerImporter importFrom: self dataWithInvalidRecordType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:47:00' prior: 50556657!
test03ImportingDataWithInvalidCustomerTypeRaisesError

	self should: [CustomerImporter importFrom: self dataWithInvalidCustomerType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:47:00' prior: 50556575!
test06ImportingDataWithAddressBeforeCustomerRaisesException

	self should: [CustomerImporter importFrom: self dataWithAddressBeforeCustomer into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter noCustomerToAssignAddressToErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:47:00' prior: 50556603!
test05ImportingDataWithEmptyLineRaisesException

	self should: [CustomerImporter importFrom: self dataWithEmptyLine into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter emptyLineOnDataErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:47:00' prior: 50555841!
test01Import

	CustomerImporter importFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:47:00' prior: 50556720!
test07ImportingDataWithEmptyFieldsRaisesException

	self should: [CustomerImporter importFrom: self dataWithEmptyField into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter emptyFieldErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LM 11/17/2022 11:47:00' prior: 50556629!
test04ImportingDataWithInvalidAddressTypeRaisesError

	self should: [CustomerImporter importFrom: self dataWithInvalidAddressType into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter invalidRecordTypeErrorMessage equals: anError messageText.
								self assert: (session selectAllOfType: Customer) anyOne addresses isEmpty]

	! !

!methodRemoval: CustomerImporter class #valueFrom:into: stamp: 'LM 11/17/2022 11:47:00'!
valueFrom: aReadStream into: aSession

	^(self from: aReadStream into: aSession) import!

----SNAPSHOT----(17 November 2022 11:47:04) CuisUniversity-5510.image priorSource: 7155150!
!CustomerImporter methodsFor: 'auxiliary' stamp: 'LM 11/17/2022 11:50:33' prior: 50556486!
importAddress

	| newAddress |

	(record size = 6) ifFalse: [self error: self class incorrectNumberOfFieldsErrorMessage].
	newAddress := Address new.
	newCustomer ifNil: [self error: self class noCustomerToAssignAddressToErrorMessage ]. 
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'auxiliary' stamp: 'LM 11/17/2022 11:50:53' prior: 50556263!
importCustomer

	(record size = 5) ifFalse: [self error: self class incorrectNumberOfFieldsErrorMessage].
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	session persist: newCustomer! !
!ImportTest methodsFor: 'tests' stamp: 'LM 11/17/2022 11:51:06' prior: 50556816!
test07ImportingDataWithEmptyFieldsRaisesException

	self should: [CustomerImporter importFrom: self dataWithEmptyField into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter incorrectNumberOfFieldsErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !

!methodRemoval: CustomerImporter class #emptyFieldErrorMessage stamp: 'LM 11/17/2022 11:51:13'!
emptyFieldErrorMessage

	^'Data fields can not be empty'!

!testRun: #ImportTest #test01Import stamp: 'LM 11/17/2022 11:51:22'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'LM 11/17/2022 11:51:22'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'LM 11/17/2022 11:51:23'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'LM 11/17/2022 11:51:23'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'LM 11/17/2022 11:51:23'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'LM 11/17/2022 11:51:23'!
PASSED!

!testRun: #ImportTest #test07ImportingDataWithEmptyFieldsRaisesException stamp: 'LM 11/17/2022 11:51:23'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LM 11/17/2022 11:51:41'!
test08ImportingDataWithTooManyFieldsRaisesException

	self should: [CustomerImporter importFrom: self dataWithTooManyFields into: session]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| 						self assert: CustomerImporter incorrectNumberOfFieldsErrorMessage equals: anError messageText.
								self assert: 0 equals: (session selectAllOfType: Customer) size ]

	! !
!ImportTest methodsFor: 'test data' stamp: 'LM 11/17/2022 11:52:04'!
dataWithTooManyFields

	^ ReadStream on:
'C,Pepe,Sanchez,D,22333444,Too,Many,Fields'! !

!testRun: #ImportTest #test01Import stamp: 'LM 11/17/2022 11:52:06'!
PASSED!

!testRun: #ImportTest #test02ImportingAnInvalidRecordTypeRaisesError stamp: 'LM 11/17/2022 11:52:06'!
PASSED!

!testRun: #ImportTest #test03ImportingDataWithInvalidCustomerTypeRaisesError stamp: 'LM 11/17/2022 11:52:06'!
PASSED!

!testRun: #ImportTest #test04ImportingDataWithInvalidAddressTypeRaisesError stamp: 'LM 11/17/2022 11:52:07'!
PASSED!

!testRun: #ImportTest #test05ImportingDataWithEmptyLineRaisesException stamp: 'LM 11/17/2022 11:52:07'!
PASSED!

!testRun: #ImportTest #test06ImportingDataWithAddressBeforeCustomerRaisesException stamp: 'LM 11/17/2022 11:52:07'!
PASSED!

!testRun: #ImportTest #test07ImportingDataWithEmptyFieldsRaisesException stamp: 'LM 11/17/2022 11:52:07'!
PASSED!

!testRun: #ImportTest #test08ImportingDataWithTooManyFieldsRaisesException stamp: 'LM 11/17/2022 11:52:07'!
PASSED!

----SNAPSHOT----(17 November 2022 11:52:10) CuisUniversity-5510.image priorSource: 7206431!

----SNAPSHOT----(17 November 2022 11:52:17) CuisUniversity-5510.image priorSource: 7210519!

----QUIT----(17 November 2022 11:52:22) CuisUniversity-5510.image priorSource: 7210612!