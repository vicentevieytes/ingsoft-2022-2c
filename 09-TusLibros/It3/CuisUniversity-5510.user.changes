

----QUIT----(26 October 2022 08:07:27) CuisUniversity-5510.image priorSource: 2900072!

----STARTUP---- (26 October 2022 08:07:28) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5510.image!


----QUIT----(26 October 2022 08:07:28) CuisUniversity-5510.image priorSource: 7154921!

----STARTUP---- (3 November 2022 19:09:56) as /home/clinux01/Descargas/linux64/CuisUniversity-5510.image!


----End fileIn of /home/clinux01/Descargas/linux64/TusLibros-33.st----!

----SNAPSHOT----(3 November 2022 19:10:44) CuisUniversity-5510.image priorSource: 7155150!

----SNAPSHOT----(3 November 2022 19:10:58) CuisUniversity-5510.image priorSource: 7173052!

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'MV 11/3/2022 19:31:48'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'no messages' stamp: 'MV 11/3/2022 19:32:18'!
test01createCartReturnsCartIdOfEmptyCart

	! !

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'MV 11/3/2022 19:32:40'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 19:33:08' overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.! !

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/3/2022 19:41:36'!
Object subclass: #InternalRestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 19:41:30' prior: 50555828!
test01createCartReturnsCartIdOfEmptyCart

	|internalRestInterface cartId | 
	
	internalRestInterface _ InternalRestInterface new.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId forUser: 'usuario' authenticatedWith: 'contraseña') isEmpty.
	
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 19:43:13' prior: 50555859!
test01createCartReturnsCartIdOfEmptyCart

	|internalRestInterface cartId| 
	
	internalRestInterface _ InternalRestInterface new.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId forUser: 'usuario' authenticatedWith: 'contraseña') isEmpty.
	
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 19:45:18' prior: 50555874!
test01createCartReturnsCartIdOfEmptyCart

	|internalRestInterface cartId| 
	
	internalRestInterface _ InternalRestInterface new.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 19:45:26' prior: 50555889!
test01createCartReturnsCartIdOfEmptyCart

	|internalRestInterface cartId| 
	
	internalRestInterface _ InternalRestInterface new.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 19:45:47'!
ERROR!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 19:46:54'!
createCartFor: aString authenticatedWith: aString2 
	self shouldBeImplemented.! !

Object subclass: #InternalRestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/3/2022 19:50:40'!
Object subclass: #InternalRestInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 19:52:15' prior: 50555918!
createCartFor: aString authenticatedWith: aString2 
	
	|cart|
	
	cart _ Cart acceptingItemsOf: OrderedCollection new.! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 19:52:55' prior: 50555936!
createCartFor: aString authenticatedWith: aString2 
	
	|cart|
	
	cart _ Cart acceptingItemsOf: Dictionary new.! !

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/3/2022 19:53:31'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 19:53:30' prior: 50555943!
createCartFor: aString authenticatedWith: aString2 
	
	|cart|
	
	cart _ Cart acceptingItemsOf: Dictionary new.
	
	cartIds add: 1->cart.! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 19:53:49' prior: 50555958!
createCartFor: aString authenticatedWith: aString2 
	
	|cart|
	
	cart _ Cart acceptingItemsOf: Dictionary new.
	
	cartIds add: 1->cart.
	
	^1.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 19:53:56'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 19:53:56'!
ERROR!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 19:54:31' overrides: 16920235!
initialize 

	cartIds _ Dictionary new.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 19:54:32'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 19:54:32'!
ERROR!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 19:54:37'!
listCart: cartId 
	self shouldBeImplemented.! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 19:55:56' prior: 50555992!
listCart: cartId 
	
	|cart|
	
	cart
	! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 19:56:32' prior: 50555997!
listCart: cartId 
	
	|cart|
	
	cart _ cartIds at: cartId.
	
	
	! !
!Cart methodsFor: 'queries' stamp: 'MV 11/3/2022 20:02:18'!
listOfItemsForInterface: anInterface! !
!Cart methodsFor: 'queries' stamp: 'MV 11/3/2022 20:03:59' prior: 50556006!
listOfItemsForInterface: anInterface
	
	items inject: '' into: [:anItem :itemsSoFar| ] ! !

----End fileIn of /home/clinux01/Descargas/linux64/Packages/TerseGuide.pck.st----!
!Cart methodsFor: 'queries' stamp: 'MV 11/3/2022 20:06:34' prior: 50556010!
listOfItemsForInterface: anInterface
	|returnedString|
	
	items do: [:anItem| returnedString _  returnedString , ' ', anItem].
	^returnedString 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/3/2022 20:08:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/3/2022 20:08:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/3/2022 20:08:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/3/2022 20:08:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/3/2022 20:08:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/3/2022 20:08:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/3/2022 20:08:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/3/2022 20:08:45'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/3/2022 20:08:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/3/2022 20:08:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/3/2022 20:08:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/3/2022 20:08:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/3/2022 20:08:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/3/2022 20:08:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/3/2022 20:08:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/3/2022 20:08:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/3/2022 20:08:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/3/2022 20:08:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/3/2022 20:08:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/3/2022 20:08:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/3/2022 20:08:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/3/2022 20:08:50'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 20:08:52'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 20:08:52'!
ERROR!

{2. 2. 2. 3} asOrderedCollection occurrencesOf: 2!
!Cart methodsFor: 'initialization' stamp: 'MV 11/3/2022 20:11:15' prior: 50555289!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/3/2022 20:11:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/3/2022 20:11:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/3/2022 20:11:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/3/2022 20:11:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/3/2022 20:11:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/3/2022 20:11:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/3/2022 20:11:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/3/2022 20:11:16'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/3/2022 20:11:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/3/2022 20:11:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/3/2022 20:11:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/3/2022 20:11:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/3/2022 20:11:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/3/2022 20:11:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/3/2022 20:11:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/3/2022 20:11:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/3/2022 20:11:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/3/2022 20:11:34'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/3/2022 20:11:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/3/2022 20:11:34'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/3/2022 20:11:34'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/3/2022 20:11:34'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/3/2022 20:11:48'!
ERROR!

numero  1!

numero  1!

{2. 2. 2. 3.} asBag associationsDo: [:anAssociation| numero  numero + anAssociation key.]!

{2. 2. 2. 3.} asBag sortedElements !
!Cart methodsFor: 'initialization' stamp: 'MV 11/3/2022 20:16:41' prior: 50559022!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/3/2022 20:16:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/3/2022 20:16:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/3/2022 20:16:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/3/2022 20:16:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/3/2022 20:16:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/3/2022 20:16:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/3/2022 20:16:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/3/2022 20:16:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/3/2022 20:16:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/3/2022 20:16:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/3/2022 20:16:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/3/2022 20:16:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/3/2022 20:16:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/3/2022 20:16:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/3/2022 20:16:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/3/2022 20:16:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/3/2022 20:16:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/3/2022 20:16:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/3/2022 20:16:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/3/2022 20:16:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/3/2022 20:16:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/3/2022 20:16:45'!
PASSED!

{2. 2. 2. 3.} asBag asDictionary!

{2. 2. 2. 3.} asBag asDictionary!

{2.2.2.2.3} asBag do: []!

{2.2.2.2.3} asBag do: [:anItem|]!

res  0!

{2.2.2.2.3} asBag do: [:anItem| res  res + anItem]!

res!

res  0!

{2. 2. 2. 2. 3} asBag do: [:anItem| res  res + anItem]!

res!
!Cart methodsFor: 'queries' stamp: 'MV 11/3/2022 20:23:19' prior: 50558935!
listOfItemsForInterface: anInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value].
	^returnedString 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/3/2022 20:40:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/3/2022 20:40:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/3/2022 20:40:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/3/2022 20:40:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/3/2022 20:40:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/3/2022 20:40:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/3/2022 20:40:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/3/2022 20:40:24'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'MV 11/3/2022 20:40:35'!
listOfItemsForInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value].
	^returnedString 
	! !

!methodRemoval: Cart #listOfItemsForInterface: stamp: 'MV 11/3/2022 20:41:24'!
listOfItemsForInterface: anInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value].
	^returnedString 
	!
!Cart methodsFor: 'queries' stamp: 'MV 11/3/2022 20:41:44' prior: 50559226!
listOfItemsForInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value , '|'].
	^returnedString 
	! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 20:42:24' prior: 50556002!
listCart: cartId 
	
	^ (cartIds at: cartId) listOfItemsForInterface. 
	
	
	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 20:42:37'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 20:49:27'!
test02createCartFailsWithUnvalidUsername

	|internalRestInterface cartId|
	
	
	internalRestInterface _ InternalRestInterface withAuthenticator: self.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'MV 11/3/2022 20:50:12'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory autheticatorReturnValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 20:50:11'!
canAuth: anUser withPassword: aPassword

	^autheticatorReturnValue! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 20:50:29' prior: 50559266!
test02createCartFailsWithUnvalidUsername

	|internalRestInterface cartId|
	
	autheticatorReturnValue _ false.	
	
	internalRestInterface _ InternalRestInterface withAuthenticator: self.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 20:50:30'!
ERROR!
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'MV 11/3/2022 20:50:37'!
withAuthenticator: aRestInterfaceTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAuthenticator: aRestInterfaceTest ! !
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'MV 11/3/2022 20:51:29'!
withAuthenticator: aRestInterfaceTest withCatalog: aCatalog
	
	^self new initializeWithAuthenticator: aRestInterfaceTest withCatalog: aCatalog! !

!methodRemoval: InternalRestInterface class #withAuthenticator: stamp: 'MV 11/3/2022 20:51:53'!
withAuthenticator: aRestInterfaceTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAuthenticator: aRestInterfaceTest !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 20:52:04' prior: 50559293!
test02createCartFailsWithUnvalidUsername

	|internalRestInterface cartId|
	
	autheticatorReturnValue _ false.	
	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 20:52:09'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 20:52:09'!
ERROR!

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/3/2022 20:52:16'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds restInterfaceTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/3/2022 20:52:16'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds restInterfaceTest catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/3/2022 20:52:16'!
initializeWithAuthenticator: aRestInterfaceTest withCatalog: aCatalog 
	self shouldBeImplemented.
	restInterfaceTest := aRestInterfaceTest.
	catalog := aCatalog.! !

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/3/2022 20:52:40'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds restInterfaceTest catalog authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/3/2022 20:52:38' prior: 50559376!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 20:52:44'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 20:52:44'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 20:57:02' prior: 50559338!
test02createCartFailsWithUnvalidUsername

	|internalRestInterface cartId|
	
	autheticatorReturnValue _ false.	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 20:57:05'!
FAILURE!
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'MV 11/3/2022 20:57:30'!
failedAuthenticationErrorMessage
	^'Failed authentication'.! !
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'MV 11/3/2022 20:57:49' prior: 50559433!
failedAuthenticationErrorMessage
	^'Authentication failed: Invalid username or password'! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 20:57:55'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 20:57:55'!
FAILURE!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 20:57:55'!
FAILURE!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 20:59:05' prior: 50555966!
createCartFor: aUsername authenticatedWith: aPassword 
	
	|cart|
	
	(authenticator canAuth: aUsername withPassword: aPassword)ifFalse: [self error: self class failedAuthenticationErrorMessage ].
	
	cart _ Cart acceptingItemsOf: Dictionary new.
	
	cartIds add: 1->cart.
	
	^1.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 20:59:06'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 20:59:06'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 20:59:06'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 20:59:42' prior: 50555902!
test01createCartReturnsCartIdOfEmptyCart

	|internalRestInterface cartId| 
	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 20:59:50' prior: 50555846 overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	autheticatorReturnValue _ true.! !

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 20:59:52'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 20:59:55'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 20:59:58'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 20:59:59'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:00:32'!
test01createCartReturnsCartIdOfEmptyCartWithValidAuth

	|internalRestInterface cartId| 
	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !

!methodRemoval: RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCart stamp: 'MV 11/3/2022 21:00:34'!
test01createCartReturnsCartIdOfEmptyCart

	|internalRestInterface cartId| 
	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:00:40'!
test02createCartFailsWithUnvalidAuth
	|internalRestInterface cartId|
	
	autheticatorReturnValue _ false.	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !

!methodRemoval: RestInterfaceTest #test02createCartFailsWithUnvalidUsername stamp: 'MV 11/3/2022 21:00:41'!
test02createCartFailsWithUnvalidUsername

	|internalRestInterface cartId|
	
	autheticatorReturnValue _ false.	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:04:52'!
test03addToCartDoesNotReturnTheSameCartId

	|internalRestInterface cartId1 cartId2| 
	
		
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId1 _ 	internalRestInterface createCartFor: 'pancrasio' authenticatedWith: 'pancreas'.
	cartId2 _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self deny: (cartId1 = cartId2)

	! !

!testRun: #RestInterfaceTest #test03addToCartDoesNotReturnTheSameCartId stamp: 'MV 11/3/2022 21:04:53'!
FAILURE!

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/3/2022 21:05:39'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds restInterfaceTest catalog authenticator lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 21:05:37' prior: 50559456!
createCartFor: aUsername authenticatedWith: aPassword 
	
	|cart newId|
	
	
	(authenticator canAuth: aUsername withPassword: aPassword)ifFalse: [self error: self class failedAuthenticationErrorMessage ].
	
	cart _ Cart acceptingItemsOf: Dictionary new.
	newId _ lastId +1.
	
	cartIds add: newId->cart.
	
	^newId.! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 21:06:09' prior: 50559612!
createCartFor: aUsername authenticatedWith: aPassword 
	
	|cart newId|
	
	
	(authenticator canAuth: aUsername withPassword: aPassword)ifFalse: [self error: self class failedAuthenticationErrorMessage ].
	
	cart _ Cart acceptingItemsOf: Dictionary new.
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	
	^newId.! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/3/2022 21:06:15' prior: 50559394!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastId _ 0.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:06:18'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:06:18'!
PASSED!

!testRun: #RestInterfaceTest #test03addToCartDoesNotReturnTheSameCartId stamp: 'MV 11/3/2022 21:06:18'!
PASSED!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'MV 11/3/2022 21:07:13'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory autheticatorReturnValue internalRestInterfacex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:07:11' prior: 50559494 overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	autheticatorReturnValue _ true.
	internalRestInterfacex _ 	InternalRestInterface withAuthenticator: self withCatalog: testObjectsFactory defaultCatalog .! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:07:21' prior: 50559514!
test01createCartReturnsCartIdOfEmptyCartWithValidAuth

	|cartId| 
	
	internalRestInterfacex _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ internalRestInterfacex createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterfacex listCart: cartId) isEmpty.
	
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:07:31' prior: 50559542!
test02createCartFailsWithUnvalidAuth
	|cartId|
	
	autheticatorReturnValue _ false.	
	internalRestInterfacex _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterfacex createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:07:37' prior: 50559583!
test03addToCartDoesNotReturnTheSameCartId

	|cartId1 cartId2| 
	
		
	internalRestInterfacex _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId1 _ 	internalRestInterfacex createCartFor: 'pancrasio' authenticatedWith: 'pancreas'.
	cartId2 _ internalRestInterfacex createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self deny: (cartId1 = cartId2)

	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'MV 11/3/2022 21:07:43'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory autheticatorReturnValue internalRestInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:07:43' prior: 50559692!
test02createCartFailsWithUnvalidAuth
	|cartId|
	
	autheticatorReturnValue _ false.	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:07:43' prior: 50559668 overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	autheticatorReturnValue _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: testObjectsFactory defaultCatalog .! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:07:43' prior: 50559678!
test01createCartReturnsCartIdOfEmptyCartWithValidAuth

	|cartId| 
	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:07:43' prior: 50559712!
test03addToCartDoesNotReturnTheSameCartId

	|cartId1 cartId2| 
	
		
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId1 _ 	internalRestInterface createCartFor: 'pancrasio' authenticatedWith: 'pancreas'.
	cartId2 _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self deny: (cartId1 = cartId2)

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:09:32'!
test03createReturnsDifferentCartIdFromLastTime

	|cartId1 cartId2| 
	
		
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId1 _ 	internalRestInterface createCartFor: 'pancrasio' authenticatedWith: 'pancreas'.
	cartId2 _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self deny: (cartId1 = cartId2)

	! !

!methodRemoval: RestInterfaceTest #test03addToCartDoesNotReturnTheSameCartId stamp: 'MV 11/3/2022 21:09:32'!
test03addToCartDoesNotReturnTheSameCartId

	|cartId1 cartId2| 
	
		
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId1 _ 	internalRestInterface createCartFor: 'pancrasio' authenticatedWith: 'pancreas'.
	cartId2 _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self deny: (cartId1 = cartId2)

	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:11:02'!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 

	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:14:13' prior: 50559828!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: 'libro' ammount: 1.

	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:14:54' prior: 50559837!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: 'libro' ammount: 1.
	
	self assert: internalRestInterface listCart equals: 'libro 1|'.

	
	! !

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:14:56'!
ERROR!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:15:09'!
addToCart: cartId book: aString ammount: aString3 
	self shouldBeImplemented.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:16:19' prior: 50559848!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	self assert: internalRestInterface listCart equals: testObjectsFactory itemSellByTheStore , ' 1|'.

	
	! !

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:16:20'!
ERROR!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:17:01' prior: 50559864!
addToCart: cartId book: aString ammount: aString3 
	
	
	(cartIds at: cartId) add:''! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:17:37' prior: 50559889!
addToCart: cartId book: aBook ammount: anAmmount 
	
	
	(cartIds at: cartId) add: aBook! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:17:46' prior: 50559895!
addToCart: cartId book: aBook ammount: anAmmount 
	
	
	(cartIds at: cartId) add: aBook.! !

----SNAPSHOT----(3 November 2022 21:17:59) CuisUniversity-5510.image priorSource: 7173144!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:18:25' prior: 50559902!
addToCart: cartId book: aBook ammount: anAmmount 
	
	
	(cartIds at: cartId) add: anAmmount of: aBook.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:18:34'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:18:34'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:18:34'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:18:34'!
ERROR!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:18:34'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:19:15' prior: 50559870!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: testObjectsFactory itemSellByTheStore , ' 1|'.

	
	! !

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:19:15'!
ERROR!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 21:20:12' prior: 50559625!
createCartFor: aUsername authenticatedWith: aPassword 
	
	|cart newId|
	
	
	(authenticator canAuth: aUsername withPassword: aPassword)ifFalse: [self error: self class failedAuthenticationErrorMessage ].
	
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	
	^newId.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:20:13'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:20:13'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:20:13'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:20:13'!
ERROR!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:20:13'!
ERROR!

!methodRemoval: InternalRestInterface #initialize stamp: 'MV 11/3/2022 21:20:33'!
initialize 

	cartIds _ Dictionary new.!
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/3/2022 21:21:01' prior: 50559639!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastId := 0.
	cartIds := Dictionary new.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:21:02'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:21:02'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:21:02'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:21:02'!
ERROR!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:21:02'!
ERROR!

items asBag sortedElements!

anAssociation key!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:22:56'!
ERROR!
!Cart methodsFor: 'printing - private' stamp: 'MV 11/3/2022 21:23:18' prior: 50559246!
listOfItemsForInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	^returnedString 
	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:23:22'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:23:22'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:23:22'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:23:22'!
FAILURE!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:23:22'!
FAILURE!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:23:53'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:23:53'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:23:53'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:23:53'!
FAILURE!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:23:53'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:24:12' prior: 50559936!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 1|'.

	
	! !

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:24:12'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:24:12'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:24:12'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:24:12'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:24:12'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:28:58'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:28:58'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:28:58'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:28:58'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:29:00'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:29:00'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:29:47'!
test04addToCartCorrectlyAddsSeveralBooksToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 1|'.

	
	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'MV 11/3/2022 21:30:13'!
itemSellByTheStore2
	
	^ 'validBook2'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'MV 11/3/2022 21:30:21'!
itemSellByTheStore2Price
	
	^10! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'MV 11/3/2022 21:30:48' prior: 50555778!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self itemSellByTheStore2 put: self itemSellByTheStore2Price;
		yourself ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:30:58'!
test05addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 1|'.

	
	! !

!methodRemoval: RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:30:58'!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 1|'.

	
	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:33:52' prior: 50560213!
test05addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore2 ammount: 3.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 2|' , ' ', testObjectsFactory itemSellByTheStore2 , ' 3|'.

	
	! !

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:33:55'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:33:55'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:33:55'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:33:55'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:33:55'!
FAILURE!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:33:55'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:33:55'!
FAILURE!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:34:10'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:34:10'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:34:10'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:34:10'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:34:10'!
FAILURE!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:34:10'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:34:10'!
FAILURE!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:34:25'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:34:25'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:34:25'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:34:25'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:34:25'!
FAILURE!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:34:25'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:34:25'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:34:44' prior: 50560178!
test04addToCartCorrectlyAddsSeveralBooksToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore2 ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 1|'.

	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:35:35'!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 1|'.

	
	! !

!methodRemoval: RestInterfaceTest #test04addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:35:37'!
test04addToCartCorrectlyAddsSeveralBooksToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore2 ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 1|'.

	
	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:35:44'!
test05addToCartCorrectlyAddsSeveralBooksToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore2 ammount: 3.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 2|' , ' ', testObjectsFactory itemSellByTheStore2 , ' 3|'.

	
	! !

!methodRemoval: RestInterfaceTest #test05addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:35:45'!
test05addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore2 ammount: 3.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 2|' , ' ', testObjectsFactory itemSellByTheStore2 , ' 3|'.

	
	!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:35:52'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:35:54'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:35:56'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:35:56'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:35:56'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:35:56'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:35:56'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:37:22'!
test05listCartFailsWithInvalidCartId

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore2 ammount: 3.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 2|' , ' ', testObjectsFactory itemSellByTheStore2 , ' 3|'.

	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:37:28'!
test02createCartFailsWithInvalidAuth
	|cartId|
	
	autheticatorReturnValue _ false.	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !

!methodRemoval: RestInterfaceTest #test02createCartFailsWithUnvalidAuth stamp: 'MV 11/3/2022 21:37:28'!
test02createCartFailsWithUnvalidAuth
	|cartId|
	
	autheticatorReturnValue _ false.	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:38:20'!
test05listCartReturnsEmptyStringOnEmptyCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore2 ammount: 3.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 2|' , ' ', testObjectsFactory itemSellByTheStore2 , ' 3|'.

	
	! !

!methodRemoval: RestInterfaceTest #test05listCartFailsWithInvalidCartId stamp: 'MV 11/3/2022 21:38:20'!
test05listCartFailsWithInvalidCartId

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore2 ammount: 3.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', testObjectsFactory itemSellByTheStore , ' 2|' , ' ', testObjectsFactory itemSellByTheStore2 , ' 3|'.

	
	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:38:30' prior: 50560514!
test05listCartReturnsEmptyStringOnEmptyCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 

	
	self assert: (internalRestInterface listCart: cartId) equals: ''.

	
	! !

!testRun: #RestInterfaceTest #test05listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/3/2022 21:38:31'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:38:31'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/3/2022 21:38:31'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:38:31'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:38:31'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:38:31'!
PASSED!

!testRun: #RestInterfaceTest #test05listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/3/2022 21:38:31'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:38:41'!
test06listCartReturnsEmptyStringOnEmptyCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 

	
	self assert: (internalRestInterface listCart: cartId) equals: ''.

	
	! !

!methodRemoval: RestInterfaceTest #test05listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/3/2022 21:38:41'!
test05listCartReturnsEmptyStringOnEmptyCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 

	
	self assert: (internalRestInterface listCart: cartId) equals: ''.

	
	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:41:50'!
test07listCartFailsWithInvalidCartId

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	"cartId es 0 por ser el primer cart de la interfaz"
	
	self should: [internalRestInterface listCart: 666] raise: Error
	withExceptionDo:[:anError| self assert: anError messageText equals: InternalRestInterface invalidCartIdErrorMessage.].

	
	! !

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/3/2022 21:42:04'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:43:18' prior: 50560610!
test07listCartFailsWithInvalidCartId

	|cartId listCartOutput|
	 
	listCartOutput _ 'test string'.	
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	"cartId es 0 por ser el primer cart de la interfaz"
	
	self should: [listCartOutput _ internalRestInterface listCart: 666] raise: Error
	withExceptionDo:[:anError| self assert: anError messageText equals: InternalRestInterface invalidCartIdErrorMessage.
						  self assert: listCartOutput equals: 'test string'].

	
	! !

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/3/2022 21:43:26'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:43:35' prior: 50560629!
test07listCartFailsWithInvalidCartId

	|listCartOutput|
	 
	listCartOutput _ 'test string'.	
	internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	"cartId es 0 por ser el primer cart de la interfaz"
	
	self should: [listCartOutput _ internalRestInterface listCart: 666] raise: Error
	withExceptionDo:[:anError| self assert: anError messageText equals: InternalRestInterface invalidCartIdErrorMessage.
						  self assert: listCartOutput equals: 'test string'].

	
	! !

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/3/2022 21:43:36'!
ERROR!
!InternalRestInterface class methodsFor: 'error messages' stamp: 'MV 11/3/2022 21:43:45'!
invalidCartIdErrorMessage
	self shouldBeImplemented.! !
!InternalRestInterface class methodsFor: 'error messages' stamp: 'MV 11/3/2022 21:44:09' prior: 50560674!
invalidCartIdErrorMessage
	^'supplied cartId is not valid'! !

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/3/2022 21:44:11'!
FAILURE!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 21:45:35' prior: 50559257!
listCart: cartId 
	
	
	^(cartIds at: cartId ifAbsent: (self error: self class invalidCartIdErrorMessage)) listOfItemsForInterface. 
	
	
	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:45:37'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/3/2022 21:45:37'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:45:37'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:45:37'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:45:37'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/3/2022 21:45:37'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/3/2022 21:45:37'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:45:53'!
ERROR!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/3/2022 21:46:34' prior: 50560689!
listCart: cartId 
	
	
	^(cartIds at: cartId ifAbsent: [self error: self class invalidCartIdErrorMessage]) listOfItemsForInterface. 
	
	
	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/3/2022 21:46:35'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/3/2022 21:46:35'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/3/2022 21:46:35'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/3/2022 21:46:35'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/3/2022 21:46:35'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/3/2022 21:46:35'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/3/2022 21:46:35'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:49:21'!
test08checkoutCartReturnsTransactionIdOfACompletedTransaction
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/3/2022 21:49:37' prior: 50560759!
test08checkoutCartReturnsTransactionIdOfACompletedTransaction

"vamos a tener que usar tanto listPurchases como checkoutCart"
	! !

----SNAPSHOT----(3 November 2022 21:49:45) CuisUniversity-5510.image priorSource: 7304218!

----STARTUP---- (5 November 2022 19:13:58) as C:\Lautaro Disco C\Programas Varios\CuisUniversity\CuisUniversity-5510.image!


----End fileIn of C:\Lautaro Disco C\Programas Varios\CuisUniversity\TusLibros.st----!

!classRemoval: #StoreTestObjectsFactory stamp: 'MV 11/5/2022 19:15:38'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'MV 11/5/2022 19:15:38'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalRestInterface stamp: 'MV 11/5/2022 19:15:38'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds restInterfaceTest catalog authenticator lastId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'MV 11/5/2022 19:15:39'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'MV 11/5/2022 19:15:39'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'MV 11/5/2022 19:15:39'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #RestInterfaceTest stamp: 'MV 11/5/2022 19:15:39'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory autheticatorReturnValue internalRestInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'MV 11/5/2022 19:15:39'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'MV 11/5/2022 19:15:40'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Lautaro Disco C\Programas Varios\CuisUniversity\TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 19:15:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 19:15:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 19:15:54'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 19:15:54'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 19:15:54'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 19:15:54'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 19:15:54'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 19:15:54'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 19:15:54'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 19:15:54'!
PASSED!

!testRun: #RestInterfaceTest #test08checkoutCartReturnsTransactionIdOfACompletedTransaction stamp: 'MV 11/5/2022 19:15:54'!
PASSED!

!testRun: #RestInterfaceTest #test08checkoutCartReturnsTransactionIdOfACompletedTransaction stamp: 'MV 11/5/2022 19:25:28'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 19:25:28'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 19:25:28'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 19:25:28'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 19:25:28'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 19:25:28'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 19:25:28'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 19:25:28'!
PASSED!

!testRun: #RestInterfaceTest #test08checkoutCartReturnsTransactionIdOfACompletedTransaction stamp: 'MV 11/5/2022 19:25:28'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 19:29:23' prior: 50556528!
test08checkoutCartReturnsTransactionIdOfACompletedTransaction

"vamos a tener que usar tanto listPurchases como checkoutCart"
	|cartId transactionId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 19:30:26'!
test09checkoutCartReturnsTransactionIdOfACompletedTransaction

"vamos a tener que usar tanto listPurchases como checkoutCart"
	|cartId transactionId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	
	! !

!methodRemoval: RestInterfaceTest #test08checkoutCartReturnsTransactionIdOfACompletedTransaction stamp: 'MV 11/5/2022 19:30:26'!
test08checkoutCartReturnsTransactionIdOfACompletedTransaction

"vamos a tener que usar tanto listPurchases como checkoutCart"
	|cartId transactionId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	
	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 19:36:56'!
test08createCartForUnknownClientCreatesClientWithNoPurchases

	internalRestInterface createCartFor: 'clientID' authenticatedWith: 'password'.
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password')
	
	
	
	! !

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 19:37:00'!
ERROR!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 19:37:12'!
listPurchases: aString password: aString2 
	self shouldBeImplemented.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 19:39:07' prior: 50557118!
listPurchases: aClientID password: aPassword
	
	(authenticator canAuth: aClientID withPassword: aPassword) ifFalse: [self error: self class failedAuthenticationErrorMessage].
	
	^OrderedCollection new.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 19:39:23' prior: 50557103!
test08createCartForUnknownClientCreatesClientWithNoPurchases

	internalRestInterface createCartFor: 'clientID' authenticatedWith: 'password'.
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: OrderedCollection new.
	
	
	
	! !

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 19:39:23'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 19:39:23'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 19:39:23'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 19:39:23'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 19:39:23'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 19:39:23'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 19:39:23'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 19:39:23'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 19:39:23'!
PASSED!

!testRun: #RestInterfaceTest #test09checkoutCartReturnsTransactionIdOfACompletedTransaction stamp: 'MV 11/5/2022 19:39:23'!
ERROR!

!testRun: #RestInterfaceTest #test09checkoutCartReturnsTransactionIdOfACompletedTransaction stamp: 'MV 11/5/2022 19:39:23'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 19:39:31'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 19:40:17'!
test09listPurchasesHasCorrectTransactionAfterCheckout

"vamos a tener que usar tanto listPurchases como checkoutCart"
	|cartId transactionId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	
	! !

!methodRemoval: RestInterfaceTest #test09checkoutCartReturnsTransactionIdOfACompletedTransaction stamp: 'MV 11/5/2022 19:40:17'!
test09checkoutCartReturnsTransactionIdOfACompletedTransaction

"vamos a tener que usar tanto listPurchases como checkoutCart"
	|cartId transactionId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	
	!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 19:41:48' prior: 50557191!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId transactionId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'a'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 19:42:22' prior: 50557227!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId transactionId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'a'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: (OrderedCollection with: 'Libro1 for muchaplata').
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 19:52:55' prior: 50557243!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId transactionId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'a'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: (OrderedCollection with: 'Libro1 for muchaplata').
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:02:16' prior: 50557263!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId transactionId transaction| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'a'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	transaction _ OrderedCollection with: (Sale by: 'manuel' withCashier: 4).
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: transaction.
	
	
	! !

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'MV 11/5/2022 20:04:24'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory autheticator internalRestInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:04:24' prior: 50556405 overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: testObjectsFactory defaultCatalog .! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:04:24' prior: 50556399!
canAuth: anUser withPassword: aPassword

	^autheticator! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:04:24' prior: 50556429!
test02createCartFailsWithInvalidAuth
	|cartId|
	
	autheticator _ false.	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:04:35' prior: 50557324!
canAuth: anUser withPassword: aPassword

	^autheticator value! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:04:43' prior: 50557329!
test02createCartFailsWithInvalidAuth
	|cartId|
	
	autheticator _ [^false].	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:04:45'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 20:04:45'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 20:04:45'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 20:04:45'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 20:04:45'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 20:04:45'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 20:04:45'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:04:45'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:04:45'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:04:45'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:04:49'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 20:04:50'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 20:04:51'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 20:04:53'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 20:04:54'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 20:04:55'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 20:04:56'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:04:57'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:10:16' prior: 50557283!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId transactionId transaction userName| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	transaction _ OrderedCollection with: (Sale of: userName from: 'manuel').
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: transaction.
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:11:54' prior: 50557441!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId transactionId userName| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	transactionId _ internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: (OrderedCollection with: 'lacompra').
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:12:46' prior: 50557464!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: (OrderedCollection with: 'lacompra').
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:15:28' prior: 50557485!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName item itemPrice| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: (OrderedCollection with: item asString , '|1|', itemPrice asString).
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:15:46' prior: 50557505!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName item itemPrice| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: (OrderedCollection with: item,'|1|', itemPrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:15:50'!
ERROR!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:15:54'!
checkOutCart: cartId withCard: aString 
	self shouldBeImplemented.! !

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/5/2022 20:20:58'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds restInterfaceTest catalog authenticator lastId salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:20:57'!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:22:28' prior: 50557571!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cashier checkOut.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:24:22' prior: 50557529!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName item itemPrice| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard.
	
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: (OrderedCollection with: item,'|1|', itemPrice asString,'|' with: itemPrice asString).
	
	
	! !

!methodRemoval: InternalRestInterface #checkOutCart:withCard: stamp: 'MV 11/5/2022 20:24:46'!
checkOutCart: cartId withCard: aString 
	self shouldBeImplemented.!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:25:19' prior: 50557592!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName item itemPrice| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: (OrderedCollection with: item,'|1|', itemPrice asString,'|' with: itemPrice asString).
	
	
	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:26:29' prior: 50557581!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cashier checkOut.
	
	! !

----End fileIn of C:\Lautaro Disco C\Programas Varios\CuisUniversity\Packages\TerseGuide.pck.st----!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:33:43' prior: 50557124!
listPurchases: aClientID password: aPassword
	
	(authenticator canAuth: aClientID withPassword: aPassword) ifFalse: [self error: self class failedAuthenticationErrorMessage].
	
	^salesBook inject: OrderedCollection new into: [:listSoFar :sale| ].! !

Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds restInterfaceTest catalog authenticator lastId salesBook clients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/5/2022 20:34:39'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds restInterfaceTest catalog authenticator lastId salesBook clients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/5/2022 20:34:51' prior: 50556793!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastId := 0.
	cartIds := Dictionary new.
	clients _ Dictionary new.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:37:50' prior: 50560577!
listPurchases: aClientID password: aPassword
	
	(authenticator canAuth: aClientID withPassword: aPassword) ifFalse: [self error: self class failedAuthenticationErrorMessage].
	
	^(clients at: aClientID) listPurchases! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/5/2022 20:38:59' prior: 50556772!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId|
	
	
	(authenticator canAuth: aClientID withPassword: aPassword)ifFalse: [self error: self class failedAuthenticationErrorMessage ].
	
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	
	^newId.! !

!classDefinition: #Cliente category: 'TusLibros' stamp: 'MV 11/5/2022 20:40:45'!
Object subclass: #Cliente
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/5/2022 20:40:41' prior: 50560625!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId|
	
	
	(authenticator canAuth: aClientID withPassword: aPassword)ifFalse: [self error: self class failedAuthenticationErrorMessage ].
	
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	
	clients add: (aClientID -> (Cliente with: aClientID)).
	
	^newId.! !

!classRenamed: #Cliente as: #Client stamp: 'MV 11/5/2022 20:40:49'!
Smalltalk renameClassNamed: #Cliente as: #Client!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:40:50' prior: 50560645!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId|
	
	
	(authenticator canAuth: aClientID withPassword: aPassword)ifFalse: [self error: self class failedAuthenticationErrorMessage ].
	
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	
	clients add: (aClientID -> (Client with: aClientID)).
	
	^newId.! !

!classDefinition: 'Client class' category: 'TusLibros' stamp: 'MV 11/5/2022 20:41:04'!
Client class
	instanceVariableNames: 'id'!
!Client class methodsFor: 'no messages' stamp: 'MV 11/5/2022 20:41:03'!
with: aClientID

	id _ aClientID! !
!Client class methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:41:28' prior: 50560683!
with: aClientId

	self new initializeWithId: aClientId! !

!classDefinition: #Client category: 'TusLibros' stamp: 'MV 11/5/2022 20:41:55'!
Object subclass: #Client
	instanceVariableNames: 'id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Client methodsFor: 'no messages' stamp: 'MV 11/5/2022 20:41:54'!
initializeWithId: aClientId

	id _ aClientId.	! !

Client class
	instanceVariableNames: ''!

!classDefinition: 'Client class' category: 'TusLibros' stamp: 'MV 11/5/2022 20:41:59'!
Client class
	instanceVariableNames: ''!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:43:04' prior: 50557646!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
		
	cashier checkOut.
	
	! !

Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds restInterfaceTest catalog authenticator lastId salesBook clients cartOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/5/2022 20:43:54'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds restInterfaceTest catalog authenticator lastId salesBook clients cartOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/5/2022 20:44:11' prior: 50560605!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastId := 0.
	cartIds := Dictionary new.
	clients _ Dictionary new.
	cartOwners _ Dictionary new.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:45:12' prior: 50560710!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	(cartOwners at: cartId) addPurchase: ''.
		
	cashier checkOut.
	
	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:46:39' prior: 50560749!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	(cartOwners at: cartId) addPurchase: (cartIds at:cartId).
		
	cashier checkOut.
	
	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:47:03' prior: 50560762!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	(cartOwners at: cartId) addPurchase: (cartIds at:cartId listOfItemsForInterface).
		
	cashier checkOut.
	
	! !
!Cart methodsFor: 'printing - private' stamp: 'MV 11/5/2022 20:50:22'!
listOfItemsForCheckout
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, '|', anAssociation value asString , '|'].
	^returnedString, self total asString
	! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:50:33'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:50:33'!
ERROR!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/5/2022 20:54:21' prior: 50560664!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId client|
	
	
	(authenticator canAuth: aClientID withPassword: aPassword)ifFalse: [self error: self class failedAuthenticationErrorMessage ].
	
	client _ clients at: aClientID ifAbsent: [clients add: (Client with: aClientID)].
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	cartOwners add: newId->client.
		
	^newId.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:54:24'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 20:54:24'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 20:54:24'!
ERROR!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 20:54:24'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 20:54:24'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 20:54:24'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 20:54:24'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:54:24'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:54:24'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:54:27'!
ERROR!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/5/2022 20:55:13' prior: 50560809!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId client|
	
	
	(authenticator canAuth: aClientID withPassword: aPassword)ifFalse: [self error: self class failedAuthenticationErrorMessage ].
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID)].
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	cartOwners add: newId->client.
		
	^newId.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:55:17'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 20:55:17'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 20:55:17'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 20:55:17'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 20:55:17'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 20:55:17'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 20:55:17'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:55:17'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:55:17'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:55:23'!
ERROR!
!Client class methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:55:40'!
listPurchases
	self shouldBeImplemented.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:55:45'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 20:55:45'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 20:55:45'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 20:55:45'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 20:55:45'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 20:55:45'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 20:55:45'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:55:45'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:55:45'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:55:47'!
ERROR!

!methodRemoval: Client class #listPurchases stamp: 'MV 11/5/2022 20:56:20'!
listPurchases
	self shouldBeImplemented.!
!Client methodsFor: 'nil' stamp: 'MV 11/5/2022 20:56:31'!
listPurchases

	! !

Object subclass: #Client
	instanceVariableNames: 'id purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Client category: 'TusLibros' stamp: 'MV 11/5/2022 20:56:39'!
Object subclass: #Client
	instanceVariableNames: 'id purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Client methodsFor: 'initialization' stamp: 'MV 11/5/2022 20:56:52' prior: 50560699!
initializeWithId: aClientId

	id _ aClientId.	
	purchases _ OrderedCollection new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 20:56:56'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:56:56'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:56:56'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:56:58'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:57:01'!
ERROR!
!Client class methodsFor: 'instance creation' stamp: 'MV 11/5/2022 20:58:08' prior: 50560688!
with: aClientId

	^self new initializeWithId: aClientId! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 20:58:11'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:58:11'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:58:11'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:58:14'!
FAILURE!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:58:45' prior: 50560963!
listPurchases

	OrderedCollection with: 'amongus'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 20:58:47'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:58:47'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:58:47'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:58:48'!
FAILURE!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:59:06' prior: 50561158!
listPurchases

	^OrderedCollection with: 'amongus'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 20:59:08'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:59:08'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:59:08'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:59:10'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:59:17'!
ERROR!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 20:59:38' prior: 50560776!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	(cartOwners at: cartId) addPurchase: ((cartIds at:cartId) listOfItemsForInterface).
		
	cashier checkOut.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 20:59:42'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 20:59:42'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:59:42'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 20:59:44'!
ERROR!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:00:33' prior: 50561337!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	(clients at: (cartOwners at: cartId)) addPurchase: ((cartIds at:cartId) listOfItemsForInterface).
		
	cashier checkOut.
	
	! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:00:34'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:00:38'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:00:38'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:00:38'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:00:40'!
ERROR!

----SNAPSHOT----(5 November 2022 21:02:15) CuisUniversity-5510.image priorSource: 7155150!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:02:20'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:02:20'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:02:20'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:02:20'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:02:20'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:02:20'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:02:20'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:02:20'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:02:20'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:02:26'!
ERROR!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:02:43' prior: 50561434!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	(cartOwners at: cartId) addPurchase: ((cartIds at:cartId) listOfItemsForInterface).
		
	cashier checkOut.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:02:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:02:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:02:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:02:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:02:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:02:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:02:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:02:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:02:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:02:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:02:48'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:02:48'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:02:48'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:02:50'!
ERROR!

cartOwners at: cartId!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/5/2022 21:06:05' prior: 50560863!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId client|
	
	
	(authenticator canAuth: aClientID withPassword: aPassword)ifFalse: [self error: self class failedAuthenticationErrorMessage ].
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	cartOwners add: newId->client.
		
	^newId.! !

----SNAPSHOT----(5 November 2022 21:06:15) CuisUniversity-5510.image priorSource: 7356260!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:06:22'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:06:23'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:06:23'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:06:23'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:06:23'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:06:23'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:06:23'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:06:23'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:06:23'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:06:24'!
ERROR!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:06:32'!
addPurchase: aString 
	self shouldBeImplemented.! !
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:06:54' prior: 50561775!
addPurchase: aPurchase

	purchases add: aPurchase.
	
	! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:06:55'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:06:59'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:06:59'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:06:59'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:07:02'!
FAILURE!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:07:15'!
FAILURE!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:07:15'!
FAILURE!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:07:32' prior: 50561245!
listPurchases

	^OrderedCollection new! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:07:34'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:07:34'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:07:34'!
ERROR!
!RestInterfaceTest methodsFor: 'debit mockup' stamp: 'MV 11/5/2022 21:08:00'!
debit: total from: creditCard 
	self shouldBeImplemented.! !
!RestInterfaceTest methodsFor: 'debit mockup' stamp: 'MV 11/5/2022 21:08:11' prior: 50561966!
debit: total from: creditCard 
	
	^true.! !
!RestInterfaceTest methodsFor: 'debit mockup' stamp: 'MV 11/5/2022 21:08:44' prior: 50561971!
debit: total from: creditCard 
	
	^true! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:08:45'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:08:48'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:08:48'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:08:48'!
ERROR!
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/5/2022 21:09:23' prior: 50560738!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastId _ 0.
	salesBook _ OrderedCollection new.
	cartIds _ Dictionary new.
	clients _ Dictionary new.
	cartOwners _ Dictionary new.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:09:23'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:09:23'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:09:23'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:09:23'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:09:23'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:09:23'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:09:23'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:09:23'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:09:23'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:09:23'!
ERROR!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:10:03' prior: 50557621!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName item itemPrice| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (OrderedCollection with: item,'|1|', itemPrice asString,'|' with: itemPrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:10:04'!
FAILURE!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:10:28' prior: 50561880!
listPurchases

	^purchases ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:10:30'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:10:30'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:10:30'!
FAILURE!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:11:04' prior: 50561575!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	(cartOwners at: cartId) addPurchase: ((cartIds at:cartId) listOfItemsForCheckout).
		
	cashier checkOut.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:11:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:11:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:11:07'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:11:07'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:11:07'!
FAILURE!
!Cart methodsFor: 'printing - private' stamp: 'MV 11/5/2022 21:13:35' prior: 50560789!
listOfItemsForCheckout
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , anAssociation key, '|', anAssociation value asString , '|'].
	^returnedString, self total asString
	! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:13:35'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:14:04' prior: 50562116!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName item itemPrice| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (OrderedCollection with: item,'|1|', itemPrice asString,'|',itemPrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:14:05'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:14:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:14:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:14:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:14:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:14:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:14:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:14:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:14:39'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:14:40'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:14:40'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:14:40'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:15:28' prior: 50562343!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName item itemPrice| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|1|', '|',itemPrice asString).
	
	
	! !
!Client methodsFor: 'initialization' stamp: 'MV 11/5/2022 21:16:18' prior: 50560978!
initializeWithId: aClientId

	id _ aClientId.	
	purchases _ ''.! !
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:16:28' prior: 50561780!
addPurchase: aPurchase

	purchases _ purchases, aPurchase.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:16:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:16:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:16:40'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:16:40'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:16:40'!
FAILURE!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:16:42'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:16:48' prior: 50557134!
test08createCartForUnknownClientCreatesClientWithNoPurchases

	internalRestInterface createCartFor: 'clientID' authenticatedWith: 'password'.
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: ''.
	
	
	
	! !

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:16:49'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:16:50'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/5/2022 21:16:58' prior: 50562479!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName item itemPrice| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|1|', itemPrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:16:59'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/5/2022 21:17:21'!
PASSED!

----SNAPSHOT----(5 November 2022 22:46:55) CuisUniversity-5510.image priorSource: 7361248!

----QUIT----(5 November 2022 22:47:01) CuisUniversity-5510.image priorSource: 7394203!

----STARTUP---- (6 November 2022 12:14:03) as C:\Lautaro Disco C\Programas Varios\CuisUniversity\CuisUniversity-5510.image!

!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:17:23'!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName item item2 itemPrice item2Price| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item2 _ testObjectsFactory itemSellByTheStore2.
	item2Price _ testObjectsFactory itemSellByTheStore2Price.
	
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|2|', item2).
	
	
	! !
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 12:28:08'!
printOfListOfItemsForInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	^returnedString 
	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:28:09' prior: 50556785!
listCart: cartId 
	
	
	^(cartIds at: cartId ifAbsent: [self error: self class invalidCartIdErrorMessage]) printOfListOfItemsForInterface. 
	
	
	! !

!methodRemoval: Cart #listOfItemsForInterface stamp: 'MV 11/6/2022 12:28:09'!
listOfItemsForInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	^returnedString 
	!
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 12:28:17'!
printListOfItemsForCheckout
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , anAssociation key, '|', anAssociation value asString , '|'].
	^returnedString, self total asString
	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:28:17' prior: 50562231!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	(cartOwners at: cartId) addPurchase: ((cartIds at:cartId) printListOfItemsForCheckout).
		
	cashier checkOut.
	
	! !

!methodRemoval: Cart #listOfItemsForCheckout stamp: 'MV 11/6/2022 12:28:17'!
listOfItemsForCheckout
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , anAssociation key, '|', anAssociation value asString , '|'].
	^returnedString, self total asString
	!
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 12:29:42'!
listOfItemsForInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	^returnedString 
	! !
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 12:29:49' prior: 50562831!
listOfItemsForInterface
	
	^items copy! !
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 12:32:25'!
listOfItemsFor: anInterface
	
	^anInterface addToPurchases: items copy from: self! !
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 12:33:08'!
listOfItemsFor: anInterface ofClient: aClientId
	
	^anInterface addToPurchases: items copy to: aClientId! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:33:41'!
addToPurchases: aBagOfItems to: aClientId

	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:34:22' prior: 50562858!
addToPurchases: aBagOfItems to: aClientId

	(clients at: aClientId) addPurchase: aBagOfItems! !
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:34:59' prior: 50562507!
addPurchase: aPurchase

	purchases _ purchases union: aPurchase
	
	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:35:58'!
addToPurchases: aBagOfItems to: aClientId withTotal: withTotal 

	(clients at: aClientId) addPurchase: aBagOfItems! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:35:58' prior: 50562851!
listOfItemsFor: anInterface ofClient: aClientId
	
	^anInterface addToPurchases: items copy to: aClientId withTotal: self total! !

!methodRemoval: InternalRestInterface #addToPurchases:to: stamp: 'MV 11/6/2022 12:35:58'!
addToPurchases: aBagOfItems to: aClientId

	(clients at: aClientId) addPurchase: aBagOfItems!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:36:17'!
addToPurchases: aBagOfItems withTotal: withTotal to: aClientId 

	(clients at: aClientId) addPurchase: aBagOfItems! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:36:17' prior: 50562881!
listOfItemsFor: anInterface ofClient: aClientId
	
	^anInterface addToPurchases: items copy withTotal: aClientId to: self total! !

!methodRemoval: InternalRestInterface #addToPurchases:to:withTotal: stamp: 'MV 11/6/2022 12:36:17'!
addToPurchases: aBagOfItems to: aClientId withTotal: withTotal 

	(clients at: aClientId) addPurchase: aBagOfItems!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:36:21' prior: 50562894!
addToPurchases: aBagOfItems withTotal: aTotal to: aClientId 

	(clients at: aClientId) addPurchase: aBagOfItems! !
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 12:36:59' prior: 50562901!
listOfItemsFor: anInterface ofClient: aClientId
	
	^anInterface addToPurchases: items copy withTotal: self total to: aClientId! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:37:20' prior: 50562916!
addToPurchases: aBagOfItems withTotal: aPrice to: aClientId 

	(clients at: aClientId) addPurchase: aBagOfItems withTotal: aPrice! !

!classDefinition: #Client category: 'TusLibros' stamp: 'MV 11/6/2022 12:37:42'!
Object subclass: #Client
	instanceVariableNames: 'id purchases total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:37:41'!
addPurchase: aPurchase withTotal: aPrice

	purchases _ purchases union: aPurchase.
	total _ total + aPrice
	
	! !
!Client methodsFor: 'initialization' stamp: 'MV 11/6/2022 12:37:53' prior: 50562502!
initializeWithId: aClientId

	id _ aClientId.	
	purchases _ Bag new.
	total _ 0.! !
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:40:26' prior: 50562144!
listPurchases

	|listOfPurchases|
	listOfPurchases _ ''.
	
	purchases sortedElements associationsDo: [:anAssociation| listOfPurchases _ listOfPurchases , anAssociation key, '|', anAssociation value asString, '|'].
	
	^listOfPurchases , total asString! !
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:40:38' prior: 50562958!
listPurchases

	|listOfPurchases|
	
	listOfPurchases _ ''.
	
	purchases sortedElements associationsDo: [:anAssociation| listOfPurchases _ listOfPurchases , anAssociation key, '|', anAssociation value asString, '|'].
	
	^listOfPurchases , total asString! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 12:40:43'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 12:40:43'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 12:40:43'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 12:40:43'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 12:40:43'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 12:40:43'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 12:40:43'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 12:40:43'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:40:43'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 12:40:43'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 12:40:45'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:41:10' prior: 50562595!
test08createCartForUnknownClientCreatesClientWithNoPurchases

	internalRestInterface createCartFor: 'clientID' authenticatedWith: 'password'.
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: '0'.
	
	
	
	! !

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 12:41:10'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:41:11'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 12:42:52'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:42:52'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 12:42:52'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:42:58'!
ERROR!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:43:43' prior: 50562869!
addPurchase: aPurchase

	purchases _ purchases addAll: aPurchase
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 12:43:45'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:43:45'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 12:43:45'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:43:46'!
ERROR!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:44:28' prior: 50563128!
addPurchase: aPurchase

	purchases addAll: aPurchase
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 12:44:37'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:44:37'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 12:44:37'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:44:38'!
ERROR!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:47:04' prior: 50562807!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	(cartIds at: cartId) listOfItemsFor: self ofClient: (cartOwners at: cartId).
		
	cashier checkOut.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 12:47:15'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:47:15'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 12:47:15'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:47:17'!
ERROR!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:47:45' prior: 50562945!
addPurchase: aPurchase withTotal: aPrice

	purchases addAll: aPurchase.
	total _ total + aPrice
	
	! !

!methodRemoval: Client #addPurchase: stamp: 'MV 11/6/2022 12:47:47'!
addPurchase: aPurchase

	purchases addAll: aPurchase
	
	!

!methodRemoval: Cart #listOfItemsFor: stamp: 'MV 11/6/2022 12:47:54'!
listOfItemsFor: anInterface
	
	^anInterface addToPurchases: items copy from: self!

!methodRemoval: Cart #listOfItemsForInterface stamp: 'MV 11/6/2022 12:47:59'!
listOfItemsForInterface
	
	^items copy!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:48:34'!
ERROR!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:50:18' prior: 50562931!
addToPurchases: aBagOfItems withTotal: aPrice to: aClient 

	(clients at: aClient) addPurchase: aBagOfItems withTotal: aPrice! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:50:23' prior: 50563435!
addToPurchases: aBagOfItems withTotal: aPrice to: aClient 

	aClient addPurchase: aBagOfItems withTotal: aPrice! !
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 12:50:27' prior: 50562923!
listOfItemsFor: anInterface ofClient: aClient
	
	^anInterface addToPurchases: items copy withTotal: self total to: aClient! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:50:39'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 12:50:39'!
FAILURE!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 12:50:39'!
FAILURE!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:52:06' prior: 50562730!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName item item2 itemPrice item2Price| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item2 _ testObjectsFactory itemSellByTheStore2.
	item2Price _ testObjectsFactory itemSellByTheStore2Price.
	
	internalRestInterface addToCart: cartId book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 12:52:07'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:52:12'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 12:52:12'!
PASSED!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 12:57:25'!
test11canNotCheckOutWithNonexistentCartID

	self should: [	internalRestInterface checkOutCart: 'Non-existent Cart ID' withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage]
	
	
	
	
	! !
!InternalRestInterface class methodsFor: 'error messages' stamp: 'MV 11/6/2022 12:57:41'!
nonExistentCartIDErrorMessage

	'Non existent cart ID'! !
!InternalRestInterface class methodsFor: 'error messages' stamp: 'MV 11/6/2022 12:57:44' prior: 50563681!
nonExistentCartIDErrorMessage

	^'Non existent cart ID'! !

----SNAPSHOT----(6 November 2022 12:58:14) CuisUniversity-5510.image priorSource: 7394295!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 12:58:15'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 12:58:16'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 12:58:16'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 12:58:16'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 12:58:16'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 12:58:16'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 12:58:16'!
FAILURE!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 12:58:16'!
FAILURE!

----SNAPSHOT----(6 November 2022 12:58:22) CuisUniversity-5510.image priorSource: 7425306!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:00:25' prior: 50563312!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	(cartIds at: cartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage]) listOfItemsFor: self ofClient: (cartOwners at: cartId).
		
	cashier checkOut.
	
	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:00:55' prior: 50563788!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	cashier _ Cashier toCheckout: (cartIds at: cartId) charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart _ cartIds at: cartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	
	cart listOfItemsFor: self ofClient: (cartOwners at: cartId).
		
	cashier checkOut.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:00:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:00:57'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:00:57'!
FAILURE!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:00:57'!
FAILURE!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:01:30'!
FAILURE!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:01:55' prior: 50563804!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	cart _ cartIds at: cartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	
	cashier _ Cashier toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart listOfItemsFor: self ofClient: (cartOwners at: cartId).
		
	cashier checkOut.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:01:57'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:01:57'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:03:26'!
test12canNotCheckOutWithNonexistentClientID

	
	
	self should: [	internalRestInterface checkOutCart: 'Non-existent Cart ID' withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage]
	
	
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:05:35'!
test12canNotCheckOutWithInvalidAuth

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	self should: [	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage]
	
	
	
	
	! !

!testRun: #RestInterfaceTest #test12canNotCheckOutWithInvalidAuth stamp: 'MV 11/6/2022 13:05:35'!
FAILURE!

!methodRemoval: RestInterfaceTest #test12canNotCheckOutWithInvalidAuth stamp: 'MV 11/6/2022 13:06:04'!
test12canNotCheckOutWithInvalidAuth

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	self should: [	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage]
	
	
	
	
	!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:06:27'!
test12canNotListPurchasesOfNonexistentClientID

	
	
	self should: [	internalRestInterface checkOutCart: 'Non-existent Cart ID' withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage]
	
	
	
	
	! !

!methodRemoval: RestInterfaceTest #test12canNotCheckOutWithNonexistentClientID stamp: 'MV 11/6/2022 13:06:27'!
test12canNotCheckOutWithNonexistentClientID

	
	
	self should: [	internalRestInterface checkOutCart: 'Non-existent Cart ID' withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage]
	
	
	
	
	!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:06:35' prior: 50564072!
test12canNotListPurchasesOfNonexistentClientID
	
	
	self should: [	internalRestInterface checkOutCart: 'Non-existent Cart ID' withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage]
	
	
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:07:36' prior: 50564101!
test12canNotListPurchasesOfNonexistentClientID
	
	
	self should: [internalRestInterface listPurchases: 'nonExistentClient' password: 'nonExistentClientsPassword']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface nonExistentClientErrorMessage]
	
	
	
	
	! !

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:07:42'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:07:43'!
ERROR!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:07:43'!
ERROR!
!InternalRestInterface class methodsFor: 'error messages' stamp: 'MV 11/6/2022 13:07:50'!
nonExistentClientErrorMessage
	self shouldBeImplemented.! !
!InternalRestInterface class methodsFor: 'error messages' stamp: 'MV 11/6/2022 13:08:00' prior: 50564139!
nonExistentClientErrorMessage
	
	'Non-existent client'! !
!InternalRestInterface class methodsFor: 'error messages' stamp: 'MV 11/6/2022 13:08:03' prior: 50564145!
nonExistentClientErrorMessage
	
	^'Non-existent client'! !

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:08:04'!
FAILURE!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:08:53' prior: 50560615!
listPurchases: aClientID password: aPassword
	
	(authenticator canAuth: aClientID withPassword: aPassword) ifFalse: [self error: self class failedAuthenticationErrorMessage].
	
	^(clients at: aClientID ifAbsent: [self error: self class nonExistentClientErrorMessage]) listPurchases! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:08:54'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:08:56'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:08:57'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:08:57'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:08:57'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:08:57'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:08:57'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:08:57'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:08:57'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:08:57'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:08:57'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:09:58'!
test13canNotListPurchasesWithInvalidAuth
	
	
	autheticator _ false.
	
	self should: [internalRestInterface listPurchases: 'user1' password: 'wrongPassword']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage]
	
	
	
	
	! !

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:10:00'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:10:01'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:10:01'!
PASSED!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:11:54'!
authenticate: aPassword withPassword: aClientID

	^ (authenticator canAuth: aClientID withPassword: aPassword) ifFalse: [self error: self class failedAuthenticationErrorMessage]! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:11:54' prior: 50564160!
listPurchases: aClientID password: aPassword
	
	self authenticate: aPassword withPassword: aClientID.
	
	^(clients at: aClientID ifAbsent: [self error: self class nonExistentClientErrorMessage]) listPurchases! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/6/2022 13:12:14' prior: 50561672!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	cartOwners add: newId->client.
		
	^newId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:12:16'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:12:16'!
PASSED!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:14:43' prior: 50564380!
listPurchases: aClientID password: aPassword
	
	self authenticate: aPassword withPassword: aClientID.
	
	^(clients at: aClientID ifAbsent: [self error: self class nonExistentClientErrorMessage]) sendPurchasesTo: self! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:14:51'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:14:51'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:14:51'!
ERROR!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:14:51'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:14:52'!
ERROR!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:16:22'!
sendPurchasesTo: aInterface

	aInterface listPurchases: purchases.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:17:01'!
listPurchases: aBagOfPurchases andTotal: aPrice
	
	|listOfPurchases|
	
	listOfPurchases _ ''.
	
	aBagOfPurchases sortedElements associationsDo: [:anAssociation| listOfPurchases _ listOfPurchases , anAssociation key, '|', anAssociation value asString, '|'].
	
	^listOfPurchases , aPrice asString! !
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:17:28'!
sendPurchasesTo: aInterface withTotal: aPrice 

	aInterface listPurchases: purchases.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:17:28' prior: 50564500!
listPurchases: aClientID password: aPassword
	
	self authenticate: aPassword withPassword: aClientID.
	
	^(clients at: aClientID ifAbsent: [self error: self class nonExistentClientErrorMessage]) sendPurchasesTo: self withTotal: self total! !

!methodRemoval: Client #sendPurchasesTo: stamp: 'MV 11/6/2022 13:17:28'!
sendPurchasesTo: aInterface

	aInterface listPurchases: purchases.!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:17:42'!
sendPurchasesTo: aInterface  

	aInterface listPurchases: purchases.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:17:42' prior: 50564631!
listPurchases: aClientID password: aPassword
	
	self authenticate: aPassword withPassword: aClientID.
	
	^(clients at: aClientID ifAbsent: [self error: self class nonExistentClientErrorMessage]) sendPurchasesTo: self ! !

!methodRemoval: Client #sendPurchasesTo:withTotal: stamp: 'MV 11/6/2022 13:17:42'!
sendPurchasesTo: aInterface withTotal: aPrice 

	aInterface listPurchases: purchases.!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:18:21' prior: 50564646!
sendPurchasesTo: aInterface  

	aInterface listPurchases: purchases withTotal: total.! !
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:18:30' prior: 50564668!
sendPurchasesTo: aInterface  

	aInterface listPurchases: purchases andTotal: total.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:18:32'!
FAILURE!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:18:32'!
FAILURE!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:18:32'!
FAILURE!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:18:32'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:18:36'!
FAILURE!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:18:47' prior: 50564674!
sendPurchasesTo: aInterface  

	^aInterface listPurchases: purchases andTotal: total.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:18:54'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:18:54'!
PASSED!
!Client methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:19:10'!
sendPurchasesToInterface: aInterface  

	^aInterface listPurchases: purchases andTotal: total.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:19:10' prior: 50564652!
listPurchases: aClientID password: aPassword
	
	self authenticate: aPassword withPassword: aClientID.
	
	^(clients at: aClientID ifAbsent: [self error: self class nonExistentClientErrorMessage]) sendPurchasesToInterface: self ! !

!methodRemoval: Client #sendPurchasesTo: stamp: 'MV 11/6/2022 13:19:10'!
sendPurchasesTo: aInterface  

	^aInterface listPurchases: purchases andTotal: total.!

----SNAPSHOT----(6 November 2022 13:19:23) CuisUniversity-5510.image priorSource: 7428268!

!methodRemoval: Client #listPurchases stamp: 'MV 11/6/2022 13:19:26'!
listPurchases

	|listOfPurchases|
	
	listOfPurchases _ ''.
	
	purchases sortedElements associationsDo: [:anAssociation| listOfPurchases _ listOfPurchases , anAssociation key, '|', anAssociation value asString, '|'].
	
	^listOfPurchases , total asString!
!Behavior method!
initialize
	#_coverageTracker4063861_ markAsExecuted.
	#_coverageTracker4063861_
		cover: (14 to: 18)
		declaredAt: (14 to: 18)
		by:
			(today _ #_coverageTracker4063861_
				coverAll:
					{35 to: 37}
				evaluating: [
					(#_coverageTracker4063861_
						coverAll:
							{23 to: 33}
						by: DateAndTime) now ]).! !
!Behavior method!
createCart
	#_coverageTracker4063835_ markAsExecuted.
	^ #_coverageTracker4063835_
		coverAll:
			{21 to: 37}
		evaluating: [
			(#_coverageTracker4063835_
				coverAll:
					{16 to: 19}
				by: Cart) acceptingItemsOf:
				(#_coverageTracker4063835_
					coverAll:
						{44 to: 57}
					evaluating: [
						(#_coverageTracker4063835_
							coverAll:
								{39 to: 42}
							byLiteralOrPseudoVariable: self) defaultCatalog ]) ].! !
!Behavior method!
defaultCatalog
	#_coverageTracker4063909_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ #_coverageTracker4063909_
		coverAll:
			{32 to: 34}
		evaluating: [
			(#_coverageTracker4063909_
				coverAll:
					{21 to: 30}
				by: Dictionary) new ].
	#_coverageTracker4063909_
		coverAll:
			{38 to: 40. 66 to: 69}
		evaluating: [
			cascadeReceiver
				at:
					(#_coverageTracker4063909_
						coverAll:
							{47 to: 64}
						evaluating: [
							(#_coverageTracker4063909_
								coverAll:
									{42 to: 45}
								byLiteralOrPseudoVariable: self) itemSellByTheStore ])
				put:
					(#_coverageTracker4063909_
						coverAll:
							{76 to: 98}
						evaluating: [
							(#_coverageTracker4063909_
								coverAll:
									{71 to: 74}
								byLiteralOrPseudoVariable: self) itemSellByTheStorePrice ]) ].
	#_coverageTracker4063909_
		coverAll:
			{103 to: 105. 132 to: 135}
		evaluating: [
			cascadeReceiver
				at:
					(#_coverageTracker4063909_
						coverAll:
							{112 to: 130}
						evaluating: [
							(#_coverageTracker4063909_
								coverAll:
									{107 to: 110}
								byLiteralOrPseudoVariable: self) itemSellByTheStore2 ])
				put:
					(#_coverageTracker4063909_
						coverAll:
							{142 to: 165}
						evaluating: [
							(#_coverageTracker4063909_
								coverAll:
									{137 to: 140}
								byLiteralOrPseudoVariable: self) itemSellByTheStore2Price ]) ].
	#_coverageTracker4063909_
		coverAll:
			{170 to: 177}
		evaluating: [ cascadeReceiver yourself ]] value.! !
!Behavior method!
itemSellByTheStore
	#_coverageTracker4063797_ markAsExecuted.
	^ #_coverageTracker4063797_
		coverAll:
			{25 to: 35}
		byLiteralOrPseudoVariable: 'validBook'.! !
!Behavior method!
itemSellByTheStorePrice
	#_coverageTracker4063739_ markAsExecuted.
	^ #_coverageTracker4063739_
		coverAll:
			{29 to: 30}
		byLiteralOrPseudoVariable: 10.! !
!Behavior method!
itemSellByTheStore2
	#_coverageTracker4064019_ markAsExecuted.
	^ #_coverageTracker4064019_
		coverAll:
			{26 to: 37}
		byLiteralOrPseudoVariable: 'validBook2'.! !
!Behavior method!
itemSellByTheStore2Price
	#_coverageTracker4063897_ markAsExecuted.
	^ #_coverageTracker4063897_
		coverAll:
			{30 to: 31}
		byLiteralOrPseudoVariable: 10.! !
!Behavior method!
acceptingItemsOf: aCatalog
	#_coverageTracker4063798_ markAsExecuted.
	^ #_coverageTracker4063798_
		coverAll:
			{40 to: 66}
		evaluating: [
			(#_coverageTracker4063798_
				coverAll:
					{36 to: 38}
				evaluating: [
					(#_coverageTracker4063798_
						coverAll:
							{31 to: 34}
						byLiteralOrPseudoVariable: self) new ]) initializeAcceptingItemsOf:
				(#_coverageTracker4063798_
					cover: (68 to: 75)
					declaredAt: (19 to: 26)
					by: aCatalog) ].! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	#_coverageTracker4063805_ markAsExecuted.
	#_coverageTracker4063805_
		cover: (40 to: 46)
		declaredAt: (40 to: 46)
		by:
			(catalog _ #_coverageTracker4063805_
				cover: (51 to: 58)
				declaredAt: (29 to: 36)
				by: aCatalog).
	#_coverageTracker4063805_
		cover: (62 to: 66)
		declaredAt: (62 to: 66)
		by:
			(items _ #_coverageTracker4063805_
				coverAll:
					{89 to: 91}
				evaluating: [
					(#_coverageTracker4063805_
						coverAll:
							{71 to: 87}
						by: OrderedCollection) new ]).! !
!Behavior method!
isEmpty
	#_coverageTracker4063896_ markAsExecuted.
	^ #_coverageTracker4063896_
		coverAll:
			{19 to: 25}
		evaluating: [
			(#_coverageTracker4063896_
				cover: (13 to: 17)
				declaredAt: (13 to: 17)
				by: items) isEmpty ].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	#_coverageTracker4063816_ markAsExecuted.
	^ #_coverageTracker4063816_
		coverAll:
			{27 to: 39}
		byLiteralOrPseudoVariable: 'invalidBook'.! !
!Behavior method!
add: anItem
	#_coverageTracker4063734_ markAsExecuted.
	^ #_coverageTracker4063734_
		coverAll:
			{22 to: 25. 29 to: 31}
		evaluating: [
			(#_coverageTracker4063734_
				coverAll:
					{17 to: 20}
				byLiteralOrPseudoVariable: self)
				add:
					(#_coverageTracker4063734_
						coverAll:
							{27 to: 27}
						byLiteralOrPseudoVariable: 1)
				of:
					(#_coverageTracker4063734_
						cover: (33 to: 38)
						declaredAt: (6 to: 11)
						by: anItem) ].! !
!Behavior method!
add: aQuantity of: anItem
	#_coverageTracker4063959_ markAsExecuted.
	#_coverageTracker4063959_
		coverAll:
			{34 to: 55}
		evaluating: [
			(#_coverageTracker4063959_
				coverAll:
					{29 to: 32}
				byLiteralOrPseudoVariable: self) assertIsValidQuantity:
				(#_coverageTracker4063959_
					cover: (57 to: 65)
					declaredAt: (6 to: 14)
					by: aQuantity) ].
	#_coverageTracker4063959_
		coverAll:
			{74 to: 91}
		evaluating: [
			(#_coverageTracker4063959_
				coverAll:
					{69 to: 72}
				byLiteralOrPseudoVariable: self) assertIsValidItem:
				(#_coverageTracker4063959_
					cover: (93 to: 98)
					declaredAt: (20 to: 25)
					by: anItem) ].
	#_coverageTracker4063959_
		coverAll:
			{105 to: 107. 119 to: 121}
		evaluating: [
			(#_coverageTracker4063959_
				coverAll:
					{103 to: 103}
				byLiteralOrPseudoVariable: 1)
				to:
					(#_coverageTracker4063959_
						cover: (109 to: 117)
						declaredAt: (6 to: 14)
						by: aQuantity)
				do: [ :aNumber |
					#_coverageTracker4063959_
						coverAll:
							{142 to: 145}
						evaluating: [
							(#_coverageTracker4063959_
								cover: (136 to: 140)
								declaredAt: (136 to: 140)
								by: items) add:
								(#_coverageTracker4063959_
									cover: (147 to: 152)
									declaredAt: (20 to: 25)
									by: anItem) ]]].! !
!Behavior method!
assertIsValidQuantity: aQuantity
	#_coverageTracker4063787_ markAsExecuted.
	#_coverageTracker4063787_
		coverAll:
			{63 to: 70}
		evaluating: [
			(#_coverageTracker4063787_
				coverAll:
					{46 to: 61}
				evaluating: [
					(#_coverageTracker4063787_
						cover: (36 to: 44)
						declaredAt: (24 to: 32)
						by: aQuantity) strictlyPositive ]) ifFalse: [
				#_coverageTracker4063787_
					coverAll:
						{79 to: 84}
					evaluating: [
						(#_coverageTracker4063787_
							coverAll:
								{74 to: 77}
							byLiteralOrPseudoVariable: self) error:
							(#_coverageTracker4063787_
								coverAll:
									{91 to: 117}
								evaluating: [
									(#_coverageTracker4063787_
										coverAll:
											{86 to: 89}
										byLiteralOrPseudoVariable: self) invalidQuantityErrorMessage ]) ]]].! !
!Behavior method!
assertIsValidItem: anItem
	#_coverageTracker4063817_ markAsExecuted.
	#_coverageTracker4063817_
		coverAll:
			{59 to: 66}
		evaluating: [
			(#_coverageTracker4063817_
				coverAll:
					{38 to: 49}
				evaluating: [
					(#_coverageTracker4063817_
						cover: (30 to: 36)
						declaredAt: (30 to: 36)
						by: catalog) includesKey:
						(#_coverageTracker4063817_
							cover: (51 to: 56)
							declaredAt: (20 to: 25)
							by: anItem) ]) ifFalse: [
				#_coverageTracker4063817_
					coverAll:
						{75 to: 80}
					evaluating: [
						(#_coverageTracker4063817_
							coverAll:
								{70 to: 73}
							byLiteralOrPseudoVariable: self) error:
							(#_coverageTracker4063817_
								coverAll:
									{87 to: 109}
								evaluating: [
									(#_coverageTracker4063817_
										coverAll:
											{82 to: 85}
										byLiteralOrPseudoVariable: self) invalidItemErrorMessage ]) ]]].! !
!Behavior method!
invalidItemErrorMessage
	#_coverageTracker4063862_ markAsExecuted.
	^ #_coverageTracker4063862_
		coverAll:
			{29 to: 52}
		byLiteralOrPseudoVariable: 'Item is not in catalog'.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:21:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	#_coverageTracker4063830_ markAsExecuted.
	^ #_coverageTracker4063830_
		coverAll:
			{33 to: 57}
		byLiteralOrPseudoVariable: 'Invalid number of items'.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:21:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
includes: anItem
	#_coverageTracker4063842_ markAsExecuted.
	^ #_coverageTracker4063842_
		coverAll:
			{27 to: 35}
		evaluating: [
			(#_coverageTracker4063842_
				cover: (21 to: 25)
				declaredAt: (21 to: 25)
				by: items) includes:
				(#_coverageTracker4063842_
					cover: (37 to: 42)
					declaredAt: (11 to: 16)
					by: anItem) ].! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:21:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	#_coverageTracker4063836_ markAsExecuted.
	^ #_coverageTracker4063836_
		coverAll:
			{32 to: 45}
		evaluating: [
			(#_coverageTracker4063836_
				cover: (26 to: 30)
				declaredAt: (26 to: 30)
				by: items) occurrencesOf:
				(#_coverageTracker4063836_
					cover: (47 to: 52)
					declaredAt: (16 to: 21)
					by: anItem) ].! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
notExpiredCreditCard
	#_coverageTracker4063964_ markAsExecuted.
	^ #_coverageTracker4063964_
		coverAll:
			{37 to: 47}
		evaluating: [
			(#_coverageTracker4063964_
				coverAll:
					{26 to: 35}
				by: CreditCard) expiringOn:
				(#_coverageTracker4063964_
					coverAll:
						{56 to: 61. 80 to: 84}
					evaluating: [
						(#_coverageTracker4063964_
							coverAll:
								{50 to: 54}
							by: Month)
							month:
								(#_coverageTracker4063964_
									coverAll:
										{69 to: 78}
									evaluating: [
										(#_coverageTracker4063964_
											cover: (63 to: 67)
											declaredAt: (63 to: 67)
											by: today) monthIndex ])
							year:
								(#_coverageTracker4063964_
									coverAll:
										{103 to: 103}
									evaluating: [
										(#_coverageTracker4063964_
											coverAll:
												{92 to: 101}
											evaluating: [
												(#_coverageTracker4063964_
													cover: (86 to: 90)
													declaredAt: (63 to: 67)
													by: today) yearNumber ]) +
											(#_coverageTracker4063964_
												coverAll:
													{105 to: 105}
												byLiteralOrPseudoVariable: 1) ]) ]) ].! !
!Behavior method!
expiringOn: aMonth
	#_coverageTracker4063901_ markAsExecuted.
	^ #_coverageTracker4063901_
		coverAll:
			{34 to: 54}
		evaluating: [
			(#_coverageTracker4063901_
				coverAll:
					{30 to: 32}
				evaluating: [
					(#_coverageTracker4063901_
						coverAll:
							{25 to: 28}
						byLiteralOrPseudoVariable: self) new ]) initializeExpiringOn:
				(#_coverageTracker4063901_
					cover: (56 to: 61)
					declaredAt: (13 to: 18)
					by: aMonth) ].! !
!Behavior method!
initializeExpiringOn: aMonth
	#_coverageTracker4063778_ markAsExecuted.
	#_coverageTracker4063778_
		cover: (34 to: 43)
		declaredAt: (34 to: 43)
		by:
			(expiration _ #_coverageTracker4063778_
				cover: (48 to: 53)
				declaredAt: (23 to: 28)
				by: aMonth).! !
!Behavior method!
today
	#_coverageTracker4063774_ markAsExecuted.
	^ #_coverageTracker4063774_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: today.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	#_coverageTracker4063800_ markAsExecuted.
	#_coverageTracker4063800_
		coverAll:
			{114 to: 130}
		evaluating: [
			(#_coverageTracker4063800_
				coverAll:
					{109 to: 112}
				byLiteralOrPseudoVariable: self) assertIsNotEmpty:
				(#_coverageTracker4063800_
					cover: (132 to: 136)
					declaredAt: (13 to: 17)
					by: aCart) ].
	#_coverageTracker4063800_
		coverAll:
			{145 to: 163. 177 to: 179}
		evaluating: [
			(#_coverageTracker4063800_
				coverAll:
					{140 to: 143}
				byLiteralOrPseudoVariable: self)
				assertIsNotExpired:
					(#_coverageTracker4063800_
						cover: (165 to: 175)
						declaredAt: (29 to: 39)
						by: aCreditCard)
				on:
					(#_coverageTracker4063800_
						cover: (181 to: 185)
						declaredAt: (74 to: 78)
						by: aDate) ].
	^ #_coverageTracker4063800_
		coverAll:
			{201 to: 221. 229 to: 237. 251 to: 259. 280 to: 293}
		evaluating: [
			(#_coverageTracker4063800_
				coverAll:
					{197 to: 199}
				evaluating: [
					(#_coverageTracker4063800_
						coverAll:
							{192 to: 195}
						byLiteralOrPseudoVariable: self) new ])
				initializeToCheckout:
					(#_coverageTracker4063800_
						cover: (223 to: 227)
						declaredAt: (13 to: 17)
						by: aCart)
				charging:
					(#_coverageTracker4063800_
						cover: (239 to: 249)
						declaredAt: (29 to: 39)
						by: aCreditCard)
				throught:
					(#_coverageTracker4063800_
						cover: (261 to: 278)
						declaredAt: (51 to: 68)
						by: aMerchantProcessor)
				registeringOn:
					(#_coverageTracker4063800_
						cover: (295 to: 304)
						declaredAt: (95 to: 104)
						by: aSalesBook) ].! !
!Behavior method!
assertIsNotEmpty: aCart
	#_coverageTracker4063897_ markAsExecuted.
	#_coverageTracker4063897_
		coverAll:
			{43 to: 49}
		evaluating: [
			(#_coverageTracker4063897_
				coverAll:
					{35 to: 41}
				evaluating: [
					(#_coverageTracker4063897_
						cover: (29 to: 33)
						declaredAt: (19 to: 23)
						by: aCart) isEmpty ]) ifTrue: [
				#_coverageTracker4063897_
					coverAll:
						{57 to: 62}
					evaluating: [
						(#_coverageTracker4063897_
							coverAll:
								{52 to: 55}
							byLiteralOrPseudoVariable: self) error:
							(#_coverageTracker4063897_
								coverAll:
									{69 to: 97}
								evaluating: [
									(#_coverageTracker4063897_
										coverAll:
											{64 to: 67}
										byLiteralOrPseudoVariable: self) cartCanNotBeEmptyErrorMessage ]) ]]].! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	#_coverageTracker4063830_ markAsExecuted.
	^ #_coverageTracker4063830_
		coverAll:
			{35 to: 67}
		byLiteralOrPseudoVariable: 'Can not check out an empty cart'.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	#_coverageTracker4063893_ markAsExecuted.
	#_coverageTracker4063893_
		coverAll:
			{79 to: 85}
		evaluating: [
			(#_coverageTracker4063893_
				coverAll:
					{59 to: 70}
				evaluating: [
					(#_coverageTracker4063893_
						cover: (47 to: 57)
						declaredAt: (21 to: 31)
						by: aCreditCard) isExpiredOn:
						(#_coverageTracker4063893_
							cover: (72 to: 76)
							declaredAt: (37 to: 41)
							by: aDate) ]) ifTrue: [
				#_coverageTracker4063893_
					coverAll:
						{94 to: 99}
					evaluating: [
						(#_coverageTracker4063893_
							coverAll:
								{89 to: 92}
							byLiteralOrPseudoVariable: self) error:
							(#_coverageTracker4063893_
								coverAll:
									{106 to: 148}
								evaluating: [
									(#_coverageTracker4063893_
										coverAll:
											{101 to: 104}
										byLiteralOrPseudoVariable: self) canNotChargeAnExpiredCreditCardErrorMessage ]) ]]].! !
!Behavior method!
isExpiredOn: aDate
	#_coverageTracker4063715_ markAsExecuted.
	^ #_coverageTracker4063715_
		coverAll:
			{42 to: 42}
		evaluating: [
			(#_coverageTracker4063715_
				coverAll:
					{36 to: 40}
				evaluating: [
					(#_coverageTracker4063715_
						cover: (25 to: 34)
						declaredAt: (25 to: 34)
						by: expiration) start ]) <
				(#_coverageTracker4063715_
					coverAll:
						{99 to: 103}
					evaluating: [
						(#_coverageTracker4063715_
							coverAll:
								{51 to: 56. 75 to: 79}
							evaluating: [
								(#_coverageTracker4063715_
									coverAll:
										{45 to: 49}
									by: Month)
									month:
										(#_coverageTracker4063715_
											coverAll:
												{64 to: 73}
											evaluating: [
												(#_coverageTracker4063715_
													cover: (58 to: 62)
													declaredAt: (14 to: 18)
													by: aDate) monthIndex ])
									year:
										(#_coverageTracker4063715_
											coverAll:
												{87 to: 96}
											evaluating: [
												(#_coverageTracker4063715_
													cover: (81 to: 85)
													declaredAt: (14 to: 18)
													by: aDate) yearNumber ]) ]) start ]) ].! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	#_coverageTracker4063831_ markAsExecuted.
	#_coverageTracker4063831_
		cover: (109 to: 112)
		declaredAt: (109 to: 112)
		by:
			(cart _ #_coverageTracker4063831_
				cover: (117 to: 121)
				declaredAt: (23 to: 27)
				by: aCart).
	#_coverageTracker4063831_
		cover: (125 to: 134)
		declaredAt: (125 to: 134)
		by:
			(creditCard _ #_coverageTracker4063831_
				cover: (139 to: 149)
				declaredAt: (39 to: 49)
				by: aCreditCard).
	#_coverageTracker4063831_
		cover: (153 to: 169)
		declaredAt: (153 to: 169)
		by:
			(merchantProcessor _ #_coverageTracker4063831_
				cover: (174 to: 191)
				declaredAt: (61 to: 78)
				by: aMerchantProcessor).
	#_coverageTracker4063831_
		cover: (195 to: 203)
		declaredAt: (195 to: 203)
		by:
			(salesBook _ #_coverageTracker4063831_
				cover: (208 to: 217)
				declaredAt: (95 to: 104)
				by: aSalesBook).! !
!Behavior method!
checkOut
	#_coverageTracker4063779_ markAsExecuted.
	#_coverageTracker4063779_
		coverAll:
			{17 to: 30}
		evaluating: [
			(#_coverageTracker4063779_
				coverAll:
					{12 to: 15}
				byLiteralOrPseudoVariable: self) calculateTotal ].
	#_coverageTracker4063779_
		coverAll:
			{39 to: 48}
		evaluating: [
			(#_coverageTracker4063779_
				coverAll:
					{34 to: 37}
				byLiteralOrPseudoVariable: self) debitTotal ].
	#_coverageTracker4063779_
		coverAll:
			{57 to: 68}
		evaluating: [
			(#_coverageTracker4063779_
				coverAll:
					{52 to: 55}
				byLiteralOrPseudoVariable: self) registerSale ].
	^ #_coverageTracker4063779_
		cover: (75 to: 79)
		declaredAt: (75 to: 79)
		by: total.! !
!Behavior method!
calculateTotal
	#_coverageTracker4063776_ markAsExecuted.
	#_coverageTracker4063776_
		cover: (18 to: 22)
		declaredAt: (18 to: 22)
		by:
			(total _ #_coverageTracker4063776_
				coverAll:
					{32 to: 36}
				evaluating: [
					(#_coverageTracker4063776_
						cover: (27 to: 30)
						declaredAt: (27 to: 30)
						by: cart) total ]).! !
!Behavior method!
total
	#_coverageTracker4063974_ markAsExecuted.
	^ #_coverageTracker4063974_
		coverAll:
			{17 to: 20}
		evaluating: [
			(#_coverageTracker4063974_
				cover: (11 to: 15)
				declaredAt: (11 to: 15)
				by: items) sum: [ :anItem |
				#_coverageTracker4063974_
					coverAll:
						{42 to: 44}
					evaluating: [
						(#_coverageTracker4063974_
							cover: (34 to: 40)
							declaredAt: (34 to: 40)
							by: catalog) at:
							(#_coverageTracker4063974_
								cover: (46 to: 51)
								declaredAt: (25 to: 30)
								by: anItem) ]]].! !
!Behavior method!
debitTotal
	#_coverageTracker4063828_ markAsExecuted.
	#_coverageTracker4063828_
		coverAll:
			{32 to: 37. 45 to: 49}
		evaluating: [
			(#_coverageTracker4063828_
				cover: (14 to: 30)
				declaredAt: (14 to: 30)
				by: merchantProcessor)
				debit:
					(#_coverageTracker4063828_
						cover: (39 to: 43)
						declaredAt: (39 to: 43)
						by: total)
				from:
					(#_coverageTracker4063828_
						cover: (51 to: 60)
						declaredAt: (51 to: 60)
						by: creditCard) ].! !
!Behavior method!
registerSale
	#_coverageTracker4063781_ markAsExecuted.
	#_coverageTracker4063781_
		coverAll:
			{26 to: 29}
		evaluating: [
			(#_coverageTracker4063781_
				cover: (16 to: 24)
				declaredAt: (16 to: 24)
				by: salesBook) add:
				(#_coverageTracker4063781_
					coverAll:
						{36 to: 45}
					evaluating: [
						(#_coverageTracker4063781_
							coverAll:
								{31 to: 34}
							byLiteralOrPseudoVariable: self) createSale ]) ].! !
!Behavior method!
createSale
	#_coverageTracker4063976_ markAsExecuted.
	^ #_coverageTracker4063976_
		coverAll:
			{21 to: 23}
		evaluating: [
			(#_coverageTracker4063976_
				coverAll:
					{16 to: 19}
				by: Sale) of:
				(#_coverageTracker4063976_
					cover: (25 to: 29)
					declaredAt: (25 to: 29)
					by: total) ].! !
!Behavior method!
of: aTotal
	"should assert total is not negative or 0!!"
	#_coverageTracker4063987_ markAsExecuted.
	^ #_coverageTracker4063987_
		coverAll:
			{69 to: 84}
		evaluating: [
			(#_coverageTracker4063987_
				coverAll:
					{65 to: 67}
				evaluating: [
					(#_coverageTracker4063987_
						coverAll:
							{60 to: 63}
						byLiteralOrPseudoVariable: self) new ]) initializeTotal:
				(#_coverageTracker4063987_
					cover: (86 to: 91)
					declaredAt: (5 to: 10)
					by: aTotal) ].! !
!Behavior method!
initializeTotal: aTotal
	#_coverageTracker4063731_ markAsExecuted.
	#_coverageTracker4063731_
		cover: (27 to: 31)
		declaredAt: (27 to: 31)
		by:
			(total _ #_coverageTracker4063731_
				cover: (36 to: 41)
				declaredAt: (18 to: 23)
				by: aTotal).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
expiredCreditCard
	#_coverageTracker4063768_ markAsExecuted.
	^ #_coverageTracker4063768_
		coverAll:
			{34 to: 44}
		evaluating: [
			(#_coverageTracker4063768_
				coverAll:
					{23 to: 32}
				by: CreditCard) expiringOn:
				(#_coverageTracker4063768_
					coverAll:
						{53 to: 58. 77 to: 81}
					evaluating: [
						(#_coverageTracker4063768_
							coverAll:
								{47 to: 51}
							by: Month)
							month:
								(#_coverageTracker4063768_
									coverAll:
										{66 to: 75}
									evaluating: [
										(#_coverageTracker4063768_
											cover: (60 to: 64)
											declaredAt: (60 to: 64)
											by: today) monthIndex ])
							year:
								(#_coverageTracker4063768_
									coverAll:
										{100 to: 100}
									evaluating: [
										(#_coverageTracker4063768_
											coverAll:
												{89 to: 98}
											evaluating: [
												(#_coverageTracker4063768_
													cover: (83 to: 87)
													declaredAt: (60 to: 64)
													by: today) yearNumber ]) -
											(#_coverageTracker4063768_
												coverAll:
													{102 to: 102}
												byLiteralOrPseudoVariable: 1) ]) ]) ].! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	#_coverageTracker4063811_ markAsExecuted.
	^ #_coverageTracker4063811_
		coverAll:
			{49 to: 87}
		byLiteralOrPseudoVariable: 'Can not charge an expired credit card'.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
total
	#_coverageTracker4063729_ markAsExecuted.
	^ #_coverageTracker4063729_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:21:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	#_coverageTracker4063741_ markAsExecuted.
	^ #_coverageTracker4063741_
		coverAll:
			{39 to: 65}
		byLiteralOrPseudoVariable: 'Credit card has no credit'.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
withAuthenticator: aRestInterfaceTest withCatalog: aCatalog
	#_coverageTracker4063809_ markAsExecuted.
	^ #_coverageTracker4063809_
		coverAll:
			{74 to: 101. 122 to: 133}
		evaluating: [
			(#_coverageTracker4063809_
				coverAll:
					{70 to: 72}
				evaluating: [
					(#_coverageTracker4063809_
						coverAll:
							{65 to: 68}
						byLiteralOrPseudoVariable: self) new ])
				initializeWithAuthenticator:
					(#_coverageTracker4063809_
						cover: (103 to: 120)
						declaredAt: (20 to: 37)
						by: aRestInterfaceTest)
				withCatalog:
					(#_coverageTracker4063809_
						cover: (135 to: 142)
						declaredAt: (52 to: 59)
						by: aCatalog) ].! !
!Behavior method!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog
	#_coverageTracker4063845_ markAsExecuted.
	#_coverageTracker4063845_
		cover: (72 to: 84)
		declaredAt: (72 to: 84)
		by:
			(authenticator _ #_coverageTracker4063845_
				cover: (89 to: 103)
				declaredAt: (30 to: 44)
				by: anAuthenticator).
	#_coverageTracker4063845_
		cover: (107 to: 113)
		declaredAt: (107 to: 113)
		by:
			(catalog _ #_coverageTracker4063845_
				cover: (118 to: 125)
				declaredAt: (59 to: 66)
				by: aCatalog).
	#_coverageTracker4063845_
		cover: (129 to: 134)
		declaredAt: (129 to: 134)
		by:
			(lastId _ #_coverageTracker4063845_
				coverAll:
					{138 to: 138}
				byLiteralOrPseudoVariable: 0).
	#_coverageTracker4063845_
		cover: (142 to: 150)
		declaredAt: (142 to: 150)
		by:
			(salesBook _ #_coverageTracker4063845_
				coverAll:
					{172 to: 174}
				evaluating: [
					(#_coverageTracker4063845_
						coverAll:
							{154 to: 170}
						by: OrderedCollection) new ]).
	#_coverageTracker4063845_
		cover: (178 to: 184)
		declaredAt: (178 to: 184)
		by:
			(cartIds _ #_coverageTracker4063845_
				coverAll:
					{199 to: 201}
				evaluating: [
					(#_coverageTracker4063845_
						coverAll:
							{188 to: 197}
						by: Dictionary) new ]).
	#_coverageTracker4063845_
		cover: (205 to: 211)
		declaredAt: (205 to: 211)
		by:
			(clients _ #_coverageTracker4063845_
				coverAll:
					{226 to: 228}
				evaluating: [
					(#_coverageTracker4063845_
						coverAll:
							{215 to: 224}
						by: Dictionary) new ]).
	#_coverageTracker4063845_
		cover: (232 to: 241)
		declaredAt: (232 to: 241)
		by:
			(cartOwners _ #_coverageTracker4063845_
				coverAll:
					{256 to: 258}
				evaluating: [
					(#_coverageTracker4063845_
						coverAll:
							{245 to: 254}
						by: Dictionary) new ]).! !
!Behavior method!
createCartFor: aClientID authenticatedWith: aPassword
	| cart newId client |
	#_coverageTracker4063923_ markAsExecuted.
	#_coverageTracker4063923_
		coverAll:
			{87 to: 99. 111 to: 123}
		evaluating: [
			(#_coverageTracker4063923_
				coverAll:
					{82 to: 85}
				byLiteralOrPseudoVariable: self)
				authenticate:
					(#_coverageTracker4063923_
						cover: (101 to: 109)
						declaredAt: (16 to: 24)
						by: aClientID)
				withPassword:
					(#_coverageTracker4063923_
						cover: (125 to: 133)
						declaredAt: (45 to: 53)
						by: aPassword) ].
	#_coverageTracker4063923_
		cover: (139 to: 144)
		declaredAt: (71 to: 76)
		by:
			(client _ #_coverageTracker4063923_
				coverAll:
					{156 to: 158. 170 to: 178}
				evaluating: [
					(#_coverageTracker4063923_
						cover: (148 to: 154)
						declaredAt: (148 to: 154)
						by: clients)
						at:
							(#_coverageTracker4063923_
								cover: (160 to: 168)
								declaredAt: (16 to: 24)
								by: aClientID)
						ifAbsent: [
							#_coverageTracker4063923_
								coverAll:
									{189 to: 192}
								evaluating: [
									(#_coverageTracker4063923_
										cover: (181 to: 187)
										declaredAt: (148 to: 154)
										by: clients) add:
										(#_coverageTracker4063923_
											coverAll:
												{203 to: 204}
											evaluating: [
												(#_coverageTracker4063923_
													cover: (194 to: 202)
													declaredAt: (16 to: 24)
													by: aClientID) ->
													(#_coverageTracker4063923_
														coverAll:
															{213 to: 217}
														evaluating: [
															(#_coverageTracker4063923_
																coverAll:
																	{206 to: 211}
																by: Client) with:
																(#_coverageTracker4063923_
																	cover: (219 to: 227)
																	declaredAt: (16 to: 24)
																	by: aClientID) ]) ]) ].
							#_coverageTracker4063923_
								coverAll:
									{239 to: 241}
								evaluating: [
									(#_coverageTracker4063923_
										cover: (231 to: 237)
										declaredAt: (148 to: 154)
										by: clients) at:
										(#_coverageTracker4063923_
											cover: (243 to: 251)
											declaredAt: (16 to: 24)
											by: aClientID) ]]]).
	#_coverageTracker4063923_
		cover: (256 to: 259)
		declaredAt: (60 to: 63)
		by:
			(cart _ #_coverageTracker4063923_
				coverAll:
					{268 to: 284}
				evaluating: [
					(#_coverageTracker4063923_
						coverAll:
							{263 to: 266}
						by: Cart) acceptingItemsOf:
						(#_coverageTracker4063923_
							cover: (286 to: 292)
							declaredAt: (286 to: 292)
							by: catalog) ]).
	#_coverageTracker4063923_
		cover: (297 to: 301)
		declaredAt: (65 to: 69)
		by:
			(newId _ #_coverageTracker4063923_
				coverAll:
					{312 to: 312}
				evaluating: [
					(#_coverageTracker4063923_
						cover: (305 to: 310)
						declaredAt: (305 to: 310)
						by: lastId) +
						(#_coverageTracker4063923_
							coverAll:
								{313 to: 313}
							byLiteralOrPseudoVariable: 1) ]).
	#_coverageTracker4063923_
		cover: (317 to: 322)
		declaredAt: (305 to: 310)
		by:
			(lastId _ #_coverageTracker4063923_
				cover: (326 to: 330)
				declaredAt: (65 to: 69)
				by: newId).
	#_coverageTracker4063923_
		coverAll:
			{342 to: 345}
		evaluating: [
			(#_coverageTracker4063923_
				cover: (334 to: 340)
				declaredAt: (334 to: 340)
				by: cartIds) add:
				(#_coverageTracker4063923_
					coverAll:
						{352 to: 353}
					evaluating: [
						(#_coverageTracker4063923_
							cover: (347 to: 351)
							declaredAt: (65 to: 69)
							by: newId) ->
							(#_coverageTracker4063923_
								cover: (354 to: 357)
								declaredAt: (60 to: 63)
								by: cart) ]) ].
	#_coverageTracker4063923_
		coverAll:
			{372 to: 375}
		evaluating: [
			(#_coverageTracker4063923_
				cover: (361 to: 370)
				declaredAt: (361 to: 370)
				by: cartOwners) add:
				(#_coverageTracker4063923_
					coverAll:
						{382 to: 383}
					evaluating: [
						(#_coverageTracker4063923_
							cover: (377 to: 381)
							declaredAt: (65 to: 69)
							by: newId) ->
							(#_coverageTracker4063923_
								cover: (384 to: 389)
								declaredAt: (71 to: 76)
								by: client) ]) ].
	^ #_coverageTracker4063923_
		cover: (397 to: 401)
		declaredAt: (65 to: 69)
		by: newId.! !
!Behavior method!
authenticate: aPassword withPassword: aClientID
	#_coverageTracker4064028_ markAsExecuted.
	^ #_coverageTracker4064028_
		coverAll:
			{112 to: 119}
		evaluating: [
			(#_coverageTracker4064028_
				coverAll:
					{68 to: 75. 87 to: 99}
				evaluating: [
					(#_coverageTracker4064028_
						cover: (54 to: 66)
						declaredAt: (54 to: 66)
						by: authenticator)
						canAuth:
							(#_coverageTracker4064028_
								cover: (77 to: 85)
								declaredAt: (39 to: 47)
								by: aClientID)
						withPassword:
							(#_coverageTracker4064028_
								cover: (101 to: 109)
								declaredAt: (15 to: 23)
								by: aPassword) ]) ifFalse: [
				#_coverageTracker4064028_
					coverAll:
						{127 to: 132}
					evaluating: [
						(#_coverageTracker4064028_
							coverAll:
								{122 to: 125}
							byLiteralOrPseudoVariable: self) error:
							(#_coverageTracker4064028_
								coverAll:
									{145 to: 176}
								evaluating: [
									(#_coverageTracker4064028_
										coverAll:
											{139 to: 143}
										evaluating: [
											(#_coverageTracker4064028_
												coverAll:
													{134 to: 137}
												byLiteralOrPseudoVariable: self) class ]) failedAuthenticationErrorMessage ]) ]]].! !
!Behavior method!
with: aClientId
	#_coverageTracker4063713_ markAsExecuted.
	^ #_coverageTracker4063713_
		coverAll:
			{29 to: 45}
		evaluating: [
			(#_coverageTracker4063713_
				coverAll:
					{25 to: 27}
				evaluating: [
					(#_coverageTracker4063713_
						coverAll:
							{20 to: 23}
						byLiteralOrPseudoVariable: self) new ]) initializeWithId:
				(#_coverageTracker4063713_
					cover: (47 to: 55)
					declaredAt: (7 to: 15)
					by: aClientId) ].! !
!Behavior method!
initializeWithId: aClientId
	#_coverageTracker4063784_ markAsExecuted.
	#_coverageTracker4063784_
		cover: (31 to: 32)
		declaredAt: (31 to: 32)
		by:
			(id _ #_coverageTracker4063784_
				cover: (36 to: 44)
				declaredAt: (19 to: 27)
				by: aClientId).
	#_coverageTracker4063784_
		cover: (49 to: 57)
		declaredAt: (49 to: 57)
		by:
			(purchases _ #_coverageTracker4063784_
				coverAll:
					{65 to: 67}
				evaluating: [
					(#_coverageTracker4063784_
						coverAll:
							{61 to: 63}
						by: Bag) new ]).
	#_coverageTracker4063784_
		cover: (71 to: 75)
		declaredAt: (71 to: 75)
		by:
			(total _ #_coverageTracker4063784_
				coverAll:
					{79 to: 79}
				byLiteralOrPseudoVariable: 0).! !
!Behavior method!
listCart: cartId
	#_coverageTracker4063873_ markAsExecuted.
	^ #_coverageTracker4063873_
		coverAll:
			{107 to: 136}
		evaluating: [
			(#_coverageTracker4063873_
				coverAll:
					{34 to: 36. 45 to: 53}
				evaluating: [
					(#_coverageTracker4063873_
						cover: (26 to: 32)
						declaredAt: (26 to: 32)
						by: cartIds)
						at:
							(#_coverageTracker4063873_
								cover: (38 to: 43)
								declaredAt: (11 to: 16)
								by: cartId)
						ifAbsent: [
							#_coverageTracker4063873_
								coverAll:
									{61 to: 66}
								evaluating: [
									(#_coverageTracker4063873_
										coverAll:
											{56 to: 59}
										byLiteralOrPseudoVariable: self) error:
										(#_coverageTracker4063873_
											coverAll:
												{79 to: 103}
											evaluating: [
												(#_coverageTracker4063873_
													coverAll:
														{73 to: 77}
													evaluating: [
														(#_coverageTracker4063873_
															coverAll:
																{68 to: 71}
															byLiteralOrPseudoVariable: self) class ]) invalidCartIdErrorMessage ]) ]]]) printOfListOfItemsForInterface ].! !
!Behavior method!
printOfListOfItemsForInterface
	| returnedString |
	#_coverageTracker4063877_ markAsExecuted.
	#_coverageTracker4063877_
		cover: (51 to: 64)
		declaredAt: (34 to: 47)
		by:
			(returnedString _ #_coverageTracker4063877_
				coverAll:
					{68 to: 69}
				byLiteralOrPseudoVariable: '').
	#_coverageTracker4063877_
		coverAll:
			{100 to: 114}
		evaluating: [
			(#_coverageTracker4063877_
				coverAll:
					{85 to: 98}
				evaluating: [
					(#_coverageTracker4063877_
						coverAll:
							{79 to: 83}
						evaluating: [
							(#_coverageTracker4063877_
								cover: (73 to: 77)
								declaredAt: (73 to: 77)
								by: items) asBag ]) sortedElements ]) associationsDo: [ :anAssociation |
				#_coverageTracker4063877_
					cover: (151 to: 164)
					declaredAt: (34 to: 47)
					by:
						(returnedString _ #_coverageTracker4063877_
							coverAll:
								{226 to: 226}
							evaluating: [
								(#_coverageTracker4063877_
									coverAll:
										{195 to: 195}
									evaluating: [
										(#_coverageTracker4063877_
											coverAll:
												{190 to: 190}
											evaluating: [
												(#_coverageTracker4063877_
													coverAll:
														{171 to: 171}
													evaluating: [
														(#_coverageTracker4063877_
															coverAll:
																{166 to: 166}
															evaluating: [
																(#_coverageTracker4063877_
																	cover: (133 to: 146)
																	declaredAt: (34 to: 47)
																	by: returnedString) ,
																	(#_coverageTracker4063877_
																		coverAll:
																			{168 to: 170}
																		byLiteralOrPseudoVariable: ' ') ]) ,
															(#_coverageTracker4063877_
																coverAll:
																	{187 to: 189}
																evaluating: [
																	(#_coverageTracker4063877_
																		cover: (173 to: 185)
																		declaredAt: (118 to: 130)
																		by: anAssociation) key ]) ]) ,
													(#_coverageTracker4063877_
														coverAll:
															{192 to: 194}
														byLiteralOrPseudoVariable: ' ') ]) ,
											(#_coverageTracker4063877_
												coverAll:
													{217 to: 224}
												evaluating: [
													(#_coverageTracker4063877_
														coverAll:
															{211 to: 215}
														evaluating: [
															(#_coverageTracker4063877_
																cover: (197 to: 209)
																declaredAt: (118 to: 130)
																by: anAssociation) value ]) asString ]) ]) ,
									(#_coverageTracker4063877_
										coverAll:
											{228 to: 230}
										byLiteralOrPseudoVariable: '|') ]) ]].
	^ #_coverageTracker4063877_
		cover: (236 to: 249)
		declaredAt: (34 to: 47)
		by: returnedString.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:21:47'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:21:47'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook ammount: anAmmount
	#_coverageTracker4063838_ markAsExecuted.
	#_coverageTracker4063838_
		coverAll:
			{77 to: 80. 92 to: 94}
		evaluating: [
			(#_coverageTracker4063838_
				coverAll:
					{65 to: 67}
				evaluating: [
					(#_coverageTracker4063838_
						cover: (57 to: 63)
						declaredAt: (57 to: 63)
						by: cartIds) at:
						(#_coverageTracker4063838_
							cover: (69 to: 74)
							declaredAt: (12 to: 17)
							by: cartId) ])
				add:
					(#_coverageTracker4063838_
						cover: (82 to: 90)
						declaredAt: (40 to: 48)
						by: anAmmount)
				of:
					(#_coverageTracker4063838_
						cover: (96 to: 100)
						declaredAt: (25 to: 29)
						by: aBook) ].! !

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:21:47'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:21:47'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	#_coverageTracker4063842_ markAsExecuted.
	^ #_coverageTracker4063842_
		coverAll:
			{29 to: 58}
		byLiteralOrPseudoVariable: 'supplied cartId is not valid'.! !

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
listPurchases: aClientID password: aPassword
	#_coverageTracker4063904_ markAsExecuted.
	#_coverageTracker4063904_
		coverAll:
			{54 to: 66. 78 to: 90}
		evaluating: [
			(#_coverageTracker4063904_
				coverAll:
					{49 to: 52}
				byLiteralOrPseudoVariable: self)
				authenticate:
					(#_coverageTracker4063904_
						cover: (68 to: 76)
						declaredAt: (36 to: 44)
						by: aPassword)
				withPassword:
					(#_coverageTracker4063904_
						cover: (92 to: 100)
						declaredAt: (16 to: 24)
						by: aClientID) ].
	^ #_coverageTracker4063904_
		coverAll:
			{196 to: 220}
		evaluating: [
			(#_coverageTracker4063904_
				coverAll:
					{116 to: 118. 130 to: 138}
				evaluating: [
					(#_coverageTracker4063904_
						cover: (108 to: 114)
						declaredAt: (108 to: 114)
						by: clients)
						at:
							(#_coverageTracker4063904_
								cover: (120 to: 128)
								declaredAt: (16 to: 24)
								by: aClientID)
						ifAbsent: [
							#_coverageTracker4063904_
								coverAll:
									{146 to: 151}
								evaluating: [
									(#_coverageTracker4063904_
										coverAll:
											{141 to: 144}
										byLiteralOrPseudoVariable: self) error:
										(#_coverageTracker4063904_
											coverAll:
												{164 to: 192}
											evaluating: [
												(#_coverageTracker4063904_
													coverAll:
														{158 to: 162}
													evaluating: [
														(#_coverageTracker4063904_
															coverAll:
																{153 to: 156}
															byLiteralOrPseudoVariable: self) class ]) nonExistentClientErrorMessage ]) ]]]) sendPurchasesToInterface:
				(#_coverageTracker4063904_
					coverAll:
						{222 to: 225}
					byLiteralOrPseudoVariable: self) ].! !
!Behavior method!
sendPurchasesToInterface: aInterface
	#_coverageTracker4063859_ markAsExecuted.
	^ #_coverageTracker4063859_
		coverAll:
			{54 to: 67. 79 to: 87}
		evaluating: [
			(#_coverageTracker4063859_
				cover: (43 to: 52)
				declaredAt: (27 to: 36)
				by: aInterface)
				listPurchases:
					(#_coverageTracker4063859_
						cover: (69 to: 77)
						declaredAt: (69 to: 77)
						by: purchases)
				andTotal:
					(#_coverageTracker4063859_
						cover: (89 to: 93)
						declaredAt: (89 to: 93)
						by: total) ].! !
!Behavior method!
listPurchases: aBagOfPurchases andTotal: aPrice
	| listOfPurchases |
	#_coverageTracker4063745_ markAsExecuted.
	#_coverageTracker4063745_
		cover: (73 to: 87)
		declaredAt: (53 to: 67)
		by:
			(listOfPurchases _ #_coverageTracker4063745_
				coverAll:
					{91 to: 92}
				byLiteralOrPseudoVariable: '').
	#_coverageTracker4063745_
		coverAll:
			{129 to: 143}
		evaluating: [
			(#_coverageTracker4063745_
				coverAll:
					{114 to: 127}
				evaluating: [
					(#_coverageTracker4063745_
						cover: (98 to: 112)
						declaredAt: (16 to: 30)
						by: aBagOfPurchases) sortedElements ]) associationsDo: [ :anAssociation |
				#_coverageTracker4063745_
					cover: (180 to: 194)
					declaredAt: (53 to: 67)
					by:
						(listOfPurchases _ #_coverageTracker4063745_
							coverAll:
								{250 to: 250}
							evaluating: [
								(#_coverageTracker4063745_
									coverAll:
										{220 to: 220}
									evaluating: [
										(#_coverageTracker4063745_
											coverAll:
												{215 to: 215}
											evaluating: [
												(#_coverageTracker4063745_
													coverAll:
														{196 to: 196}
													evaluating: [
														(#_coverageTracker4063745_
															cover: (162 to: 176)
															declaredAt: (53 to: 67)
															by: listOfPurchases) ,
															(#_coverageTracker4063745_
																coverAll:
																	{212 to: 214}
																evaluating: [
																	(#_coverageTracker4063745_
																		cover: (198 to: 210)
																		declaredAt: (147 to: 159)
																		by: anAssociation) key ]) ]) ,
													(#_coverageTracker4063745_
														coverAll:
															{217 to: 219}
														byLiteralOrPseudoVariable: '|') ]) ,
											(#_coverageTracker4063745_
												coverAll:
													{242 to: 249}
												evaluating: [
													(#_coverageTracker4063745_
														coverAll:
															{236 to: 240}
														evaluating: [
															(#_coverageTracker4063745_
																cover: (222 to: 234)
																declaredAt: (147 to: 159)
																by: anAssociation) value ]) asString ]) ]) ,
									(#_coverageTracker4063745_
										coverAll:
											{252 to: 254}
										byLiteralOrPseudoVariable: '|') ]) ]].
	^ #_coverageTracker4063745_
		coverAll:
			{278 to: 278}
		evaluating: [
			(#_coverageTracker4063745_
				cover: (262 to: 276)
				declaredAt: (53 to: 67)
				by: listOfPurchases) ,
				(#_coverageTracker4063745_
					coverAll:
						{287 to: 294}
					evaluating: [
						(#_coverageTracker4063745_
							cover: (280 to: 285)
							declaredAt: (42 to: 47)
							by: aPrice) asString ]) ].! !

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	| cashier cart |
	#_coverageTracker4063996_ markAsExecuted.
	#_coverageTracker4063996_
		cover: (97 to: 100)
		declaredAt: (88 to: 91)
		by:
			(cart _ #_coverageTracker4063996_
				coverAll:
					{112 to: 114. 123 to: 131}
				evaluating: [
					(#_coverageTracker4063996_
						cover: (104 to: 110)
						declaredAt: (104 to: 110)
						by: cartIds)
						at:
							(#_coverageTracker4063996_
								cover: (116 to: 121)
								declaredAt: (15 to: 20)
								by: cartId)
						ifAbsent: [
							#_coverageTracker4063996_
								coverAll:
									{139 to: 144}
								evaluating: [
									(#_coverageTracker4063996_
										coverAll:
											{134 to: 137}
										byLiteralOrPseudoVariable: self) error:
										(#_coverageTracker4063996_
											coverAll:
												{157 to: 185}
											evaluating: [
												(#_coverageTracker4063996_
													coverAll:
														{151 to: 155}
													evaluating: [
														(#_coverageTracker4063996_
															coverAll:
																{146 to: 149}
															byLiteralOrPseudoVariable: self) class ]) nonExistentCartIDErrorMessage ]) ]]]).
	#_coverageTracker4063996_
		cover: (192 to: 198)
		declaredAt: (80 to: 86)
		by:
			(cashier _ #_coverageTracker4063996_
				coverAll:
					{210 to: 220. 227 to: 235. 243 to: 251. 272 to: 274. 282 to: 295}
				evaluating: [
					(#_coverageTracker4063996_
						coverAll:
							{202 to: 208}
						by: Cashier)
						toCheckout:
							(#_coverageTracker4063996_
								cover: (222 to: 225)
								declaredAt: (88 to: 91)
								by: cart)
						charging:
							(#_coverageTracker4063996_
								cover: (237 to: 241)
								declaredAt: (32 to: 36)
								by: aCard)
						throught:
							(#_coverageTracker4063996_
								cover: (253 to: 270)
								declaredAt: (47 to: 64)
								by: aMerchantProcessor)
						on:
							(#_coverageTracker4063996_
								cover: (276 to: 280)
								declaredAt: (70 to: 74)
								by: aDate)
						registeringOn:
							(#_coverageTracker4063996_
								cover: (297 to: 305)
								declaredAt: (297 to: 305)
								by: salesBook) ]).
	#_coverageTracker4063996_
		coverAll:
			{316 to: 330. 337 to: 345}
		evaluating: [
			(#_coverageTracker4063996_
				cover: (311 to: 314)
				declaredAt: (88 to: 91)
				by: cart)
				listOfItemsFor:
					(#_coverageTracker4063996_
						coverAll:
							{332 to: 335}
						byLiteralOrPseudoVariable: self)
				ofClient:
					(#_coverageTracker4063996_
						coverAll:
							{359 to: 361}
						evaluating: [
							(#_coverageTracker4063996_
								cover: (348 to: 357)
								declaredAt: (348 to: 357)
								by: cartOwners) at:
								(#_coverageTracker4063996_
									cover: (363 to: 368)
									declaredAt: (15 to: 20)
									by: cartId) ]) ].
	#_coverageTracker4063996_
		coverAll:
			{384 to: 391}
		evaluating: [
			(#_coverageTracker4063996_
				cover: (376 to: 382)
				declaredAt: (80 to: 86)
				by: cashier) checkOut ].! !
!Behavior method!
listOfItemsFor: anInterface ofClient: aClient
	#_coverageTracker4063812_ markAsExecuted.
	^ #_coverageTracker4063812_
		coverAll:
			{63 to: 77. 90 to: 99. 112 to: 114}
		evaluating: [
			(#_coverageTracker4063812_
				cover: (51 to: 61)
				declaredAt: (17 to: 27)
				by: anInterface)
				addToPurchases:
					(#_coverageTracker4063812_
						coverAll:
							{85 to: 88}
						evaluating: [
							(#_coverageTracker4063812_
								cover: (79 to: 83)
								declaredAt: (79 to: 83)
								by: items) copy ])
				withTotal:
					(#_coverageTracker4063812_
						coverAll:
							{106 to: 110}
						evaluating: [
							(#_coverageTracker4063812_
								coverAll:
									{101 to: 104}
								byLiteralOrPseudoVariable: self) total ])
				to:
					(#_coverageTracker4063812_
						cover: (116 to: 122)
						declaredAt: (39 to: 45)
						by: aClient) ].! !
!Behavior method!
addToPurchases: aBagOfItems withTotal: aPrice to: aClient
	#_coverageTracker4063773_ markAsExecuted.
	#_coverageTracker4063773_
		coverAll:
			{70 to: 81. 95 to: 104}
		evaluating: [
			(#_coverageTracker4063773_
				cover: (62 to: 68)
				declaredAt: (51 to: 57)
				by: aClient)
				addPurchase:
					(#_coverageTracker4063773_
						cover: (83 to: 93)
						declaredAt: (17 to: 27)
						by: aBagOfItems)
				withTotal:
					(#_coverageTracker4063773_
						cover: (106 to: 111)
						declaredAt: (40 to: 45)
						by: aPrice) ].! !
!Behavior method!
addPurchase: aPurchase withTotal: aPrice
	#_coverageTracker4063742_ markAsExecuted.
	#_coverageTracker4063742_
		coverAll:
			{54 to: 60}
		evaluating: [
			(#_coverageTracker4063742_
				cover: (44 to: 52)
				declaredAt: (44 to: 52)
				by: purchases) addAll:
				(#_coverageTracker4063742_
					cover: (62 to: 70)
					declaredAt: (14 to: 22)
					by: aPurchase) ].
	#_coverageTracker4063742_
		cover: (82 to: 86)
		declaredAt: (74 to: 78)
		by:
			(total _ #_coverageTracker4063742_
				coverAll:
					{88 to: 88}
				evaluating: [
					(#_coverageTracker4063742_
						cover: (74 to: 78)
						declaredAt: (74 to: 78)
						by: total) +
						(#_coverageTracker4063742_
							cover: (90 to: 95)
							declaredAt: (35 to: 40)
							by: aPrice) ]).! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:21:47'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
nonExistentCartIDErrorMessage
	#_coverageTracker4063732_ markAsExecuted.
	^ #_coverageTracker4063732_
		coverAll:
			{34 to: 55}
		byLiteralOrPseudoVariable: 'Non existent cart ID'.! !

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
nonExistentClientErrorMessage
	#_coverageTracker4063729_ markAsExecuted.
	^ #_coverageTracker4063729_
		coverAll:
			{35 to: 55}
		byLiteralOrPseudoVariable: 'Non-existent client'.! !

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:21:47'!
PASSED!
!Behavior method!
failedAuthenticationErrorMessage
	#_coverageTracker4063812_ markAsExecuted.
	^ #_coverageTracker4063812_
		coverAll:
			{36 to: 88}
		byLiteralOrPseudoVariable: 'Authentication failed: Invalid username or password'.! !

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:21:47'!
PASSED!

!methodRemoval: Cart #printListOfItemsForCheckout stamp: 'MV 11/6/2022 13:22:19'!
printListOfItemsForCheckout
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , anAssociation key, '|', anAssociation value asString , '|'].
	^returnedString, self total asString
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:22:24'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:22:24'!
PASSED!
!Behavior method!
initialize
	#_coverageTracker4105129_ markAsExecuted.
	#_coverageTracker4105129_
		cover: (14 to: 18)
		declaredAt: (14 to: 18)
		by:
			(today _ #_coverageTracker4105129_
				coverAll:
					{35 to: 37}
				evaluating: [
					(#_coverageTracker4105129_
						coverAll:
							{23 to: 33}
						by: DateAndTime) now ]).! !
!Behavior method!
createCart
	#_coverageTracker4105075_ markAsExecuted.
	^ #_coverageTracker4105075_
		coverAll:
			{21 to: 37}
		evaluating: [
			(#_coverageTracker4105075_
				coverAll:
					{16 to: 19}
				by: Cart) acceptingItemsOf:
				(#_coverageTracker4105075_
					coverAll:
						{44 to: 57}
					evaluating: [
						(#_coverageTracker4105075_
							coverAll:
								{39 to: 42}
							byLiteralOrPseudoVariable: self) defaultCatalog ]) ].! !
!Behavior method!
defaultCatalog
	#_coverageTracker4105220_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ #_coverageTracker4105220_
		coverAll:
			{32 to: 34}
		evaluating: [
			(#_coverageTracker4105220_
				coverAll:
					{21 to: 30}
				by: Dictionary) new ].
	#_coverageTracker4105220_
		coverAll:
			{38 to: 40. 66 to: 69}
		evaluating: [
			cascadeReceiver
				at:
					(#_coverageTracker4105220_
						coverAll:
							{47 to: 64}
						evaluating: [
							(#_coverageTracker4105220_
								coverAll:
									{42 to: 45}
								byLiteralOrPseudoVariable: self) itemSellByTheStore ])
				put:
					(#_coverageTracker4105220_
						coverAll:
							{76 to: 98}
						evaluating: [
							(#_coverageTracker4105220_
								coverAll:
									{71 to: 74}
								byLiteralOrPseudoVariable: self) itemSellByTheStorePrice ]) ].
	#_coverageTracker4105220_
		coverAll:
			{103 to: 105. 132 to: 135}
		evaluating: [
			cascadeReceiver
				at:
					(#_coverageTracker4105220_
						coverAll:
							{112 to: 130}
						evaluating: [
							(#_coverageTracker4105220_
								coverAll:
									{107 to: 110}
								byLiteralOrPseudoVariable: self) itemSellByTheStore2 ])
				put:
					(#_coverageTracker4105220_
						coverAll:
							{142 to: 165}
						evaluating: [
							(#_coverageTracker4105220_
								coverAll:
									{137 to: 140}
								byLiteralOrPseudoVariable: self) itemSellByTheStore2Price ]) ].
	#_coverageTracker4105220_
		coverAll:
			{170 to: 177}
		evaluating: [ cascadeReceiver yourself ]] value.! !
!Behavior method!
itemSellByTheStore
	#_coverageTracker4105015_ markAsExecuted.
	^ #_coverageTracker4105015_
		coverAll:
			{25 to: 35}
		byLiteralOrPseudoVariable: 'validBook'.! !
!Behavior method!
itemSellByTheStorePrice
	#_coverageTracker4104959_ markAsExecuted.
	^ #_coverageTracker4104959_
		coverAll:
			{29 to: 30}
		byLiteralOrPseudoVariable: 10.! !
!Behavior method!
itemSellByTheStore2
	#_coverageTracker4105295_ markAsExecuted.
	^ #_coverageTracker4105295_
		coverAll:
			{26 to: 37}
		byLiteralOrPseudoVariable: 'validBook2'.! !
!Behavior method!
itemSellByTheStore2Price
	#_coverageTracker4105180_ markAsExecuted.
	^ #_coverageTracker4105180_
		coverAll:
			{30 to: 31}
		byLiteralOrPseudoVariable: 10.! !
!Behavior method!
acceptingItemsOf: aCatalog
	#_coverageTracker4105015_ markAsExecuted.
	^ #_coverageTracker4105015_
		coverAll:
			{40 to: 66}
		evaluating: [
			(#_coverageTracker4105015_
				coverAll:
					{36 to: 38}
				evaluating: [
					(#_coverageTracker4105015_
						coverAll:
							{31 to: 34}
						byLiteralOrPseudoVariable: self) new ]) initializeAcceptingItemsOf:
				(#_coverageTracker4105015_
					cover: (68 to: 75)
					declaredAt: (19 to: 26)
					by: aCatalog) ].! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	#_coverageTracker4105025_ markAsExecuted.
	#_coverageTracker4105025_
		cover: (40 to: 46)
		declaredAt: (40 to: 46)
		by:
			(catalog _ #_coverageTracker4105025_
				cover: (51 to: 58)
				declaredAt: (29 to: 36)
				by: aCatalog).
	#_coverageTracker4105025_
		cover: (62 to: 66)
		declaredAt: (62 to: 66)
		by:
			(items _ #_coverageTracker4105025_
				coverAll:
					{89 to: 91}
				evaluating: [
					(#_coverageTracker4105025_
						coverAll:
							{71 to: 87}
						by: OrderedCollection) new ]).! !
!Behavior method!
isEmpty
	#_coverageTracker4105172_ markAsExecuted.
	^ #_coverageTracker4105172_
		coverAll:
			{19 to: 25}
		evaluating: [
			(#_coverageTracker4105172_
				cover: (13 to: 17)
				declaredAt: (13 to: 17)
				by: items) isEmpty ].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	#_coverageTracker4105035_ markAsExecuted.
	^ #_coverageTracker4105035_
		coverAll:
			{27 to: 39}
		byLiteralOrPseudoVariable: 'invalidBook'.! !
!Behavior method!
add: anItem
	#_coverageTracker4104958_ markAsExecuted.
	^ #_coverageTracker4104958_
		coverAll:
			{22 to: 25. 29 to: 31}
		evaluating: [
			(#_coverageTracker4104958_
				coverAll:
					{17 to: 20}
				byLiteralOrPseudoVariable: self)
				add:
					(#_coverageTracker4104958_
						coverAll:
							{27 to: 27}
						byLiteralOrPseudoVariable: 1)
				of:
					(#_coverageTracker4104958_
						cover: (33 to: 38)
						declaredAt: (6 to: 11)
						by: anItem) ].! !
!Behavior method!
add: aQuantity of: anItem
	#_coverageTracker4105270_ markAsExecuted.
	#_coverageTracker4105270_
		coverAll:
			{34 to: 55}
		evaluating: [
			(#_coverageTracker4105270_
				coverAll:
					{29 to: 32}
				byLiteralOrPseudoVariable: self) assertIsValidQuantity:
				(#_coverageTracker4105270_
					cover: (57 to: 65)
					declaredAt: (6 to: 14)
					by: aQuantity) ].
	#_coverageTracker4105270_
		coverAll:
			{74 to: 91}
		evaluating: [
			(#_coverageTracker4105270_
				coverAll:
					{69 to: 72}
				byLiteralOrPseudoVariable: self) assertIsValidItem:
				(#_coverageTracker4105270_
					cover: (93 to: 98)
					declaredAt: (20 to: 25)
					by: anItem) ].
	#_coverageTracker4105270_
		coverAll:
			{105 to: 107. 119 to: 121}
		evaluating: [
			(#_coverageTracker4105270_
				coverAll:
					{103 to: 103}
				byLiteralOrPseudoVariable: 1)
				to:
					(#_coverageTracker4105270_
						cover: (109 to: 117)
						declaredAt: (6 to: 14)
						by: aQuantity)
				do: [ :aNumber |
					#_coverageTracker4105270_
						coverAll:
							{142 to: 145}
						evaluating: [
							(#_coverageTracker4105270_
								cover: (136 to: 140)
								declaredAt: (136 to: 140)
								by: items) add:
								(#_coverageTracker4105270_
									cover: (147 to: 152)
									declaredAt: (20 to: 25)
									by: anItem) ]]].! !
!Behavior method!
assertIsValidQuantity: aQuantity
	#_coverageTracker4105004_ markAsExecuted.
	#_coverageTracker4105004_
		coverAll:
			{63 to: 70}
		evaluating: [
			(#_coverageTracker4105004_
				coverAll:
					{46 to: 61}
				evaluating: [
					(#_coverageTracker4105004_
						cover: (36 to: 44)
						declaredAt: (24 to: 32)
						by: aQuantity) strictlyPositive ]) ifFalse: [
				#_coverageTracker4105004_
					coverAll:
						{79 to: 84}
					evaluating: [
						(#_coverageTracker4105004_
							coverAll:
								{74 to: 77}
							byLiteralOrPseudoVariable: self) error:
							(#_coverageTracker4105004_
								coverAll:
									{91 to: 117}
								evaluating: [
									(#_coverageTracker4105004_
										coverAll:
											{86 to: 89}
										byLiteralOrPseudoVariable: self) invalidQuantityErrorMessage ]) ]]].! !
!Behavior method!
assertIsValidItem: anItem
	#_coverageTracker4105036_ markAsExecuted.
	#_coverageTracker4105036_
		coverAll:
			{59 to: 66}
		evaluating: [
			(#_coverageTracker4105036_
				coverAll:
					{38 to: 49}
				evaluating: [
					(#_coverageTracker4105036_
						cover: (30 to: 36)
						declaredAt: (30 to: 36)
						by: catalog) includesKey:
						(#_coverageTracker4105036_
							cover: (51 to: 56)
							declaredAt: (20 to: 25)
							by: anItem) ]) ifFalse: [
				#_coverageTracker4105036_
					coverAll:
						{75 to: 80}
					evaluating: [
						(#_coverageTracker4105036_
							coverAll:
								{70 to: 73}
							byLiteralOrPseudoVariable: self) error:
							(#_coverageTracker4105036_
								coverAll:
									{87 to: 109}
								evaluating: [
									(#_coverageTracker4105036_
										coverAll:
											{82 to: 85}
										byLiteralOrPseudoVariable: self) invalidItemErrorMessage ]) ]]].! !
!Behavior method!
invalidItemErrorMessage
	#_coverageTracker4105130_ markAsExecuted.
	^ #_coverageTracker4105130_
		coverAll:
			{29 to: 52}
		byLiteralOrPseudoVariable: 'Item is not in catalog'.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:22:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	#_coverageTracker4105055_ markAsExecuted.
	^ #_coverageTracker4105055_
		coverAll:
			{33 to: 57}
		byLiteralOrPseudoVariable: 'Invalid number of items'.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:22:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
includes: anItem
	#_coverageTracker4105097_ markAsExecuted.
	^ #_coverageTracker4105097_
		coverAll:
			{27 to: 35}
		evaluating: [
			(#_coverageTracker4105097_
				cover: (21 to: 25)
				declaredAt: (21 to: 25)
				by: items) includes:
				(#_coverageTracker4105097_
					cover: (37 to: 42)
					declaredAt: (11 to: 16)
					by: anItem) ].! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:22:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	#_coverageTracker4105078_ markAsExecuted.
	^ #_coverageTracker4105078_
		coverAll:
			{32 to: 45}
		evaluating: [
			(#_coverageTracker4105078_
				cover: (26 to: 30)
				declaredAt: (26 to: 30)
				by: items) occurrencesOf:
				(#_coverageTracker4105078_
					cover: (47 to: 52)
					declaredAt: (16 to: 21)
					by: anItem) ].! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
notExpiredCreditCard
	#_coverageTracker4105274_ markAsExecuted.
	^ #_coverageTracker4105274_
		coverAll:
			{37 to: 47}
		evaluating: [
			(#_coverageTracker4105274_
				coverAll:
					{26 to: 35}
				by: CreditCard) expiringOn:
				(#_coverageTracker4105274_
					coverAll:
						{56 to: 61. 80 to: 84}
					evaluating: [
						(#_coverageTracker4105274_
							coverAll:
								{50 to: 54}
							by: Month)
							month:
								(#_coverageTracker4105274_
									coverAll:
										{69 to: 78}
									evaluating: [
										(#_coverageTracker4105274_
											cover: (63 to: 67)
											declaredAt: (63 to: 67)
											by: today) monthIndex ])
							year:
								(#_coverageTracker4105274_
									coverAll:
										{103 to: 103}
									evaluating: [
										(#_coverageTracker4105274_
											coverAll:
												{92 to: 101}
											evaluating: [
												(#_coverageTracker4105274_
													cover: (86 to: 90)
													declaredAt: (63 to: 67)
													by: today) yearNumber ]) +
											(#_coverageTracker4105274_
												coverAll:
													{105 to: 105}
												byLiteralOrPseudoVariable: 1) ]) ]) ].! !
!Behavior method!
expiringOn: aMonth
	#_coverageTracker4105193_ markAsExecuted.
	^ #_coverageTracker4105193_
		coverAll:
			{34 to: 54}
		evaluating: [
			(#_coverageTracker4105193_
				coverAll:
					{30 to: 32}
				evaluating: [
					(#_coverageTracker4105193_
						coverAll:
							{25 to: 28}
						byLiteralOrPseudoVariable: self) new ]) initializeExpiringOn:
				(#_coverageTracker4105193_
					cover: (56 to: 61)
					declaredAt: (13 to: 18)
					by: aMonth) ].! !
!Behavior method!
initializeExpiringOn: aMonth
	#_coverageTracker4104995_ markAsExecuted.
	#_coverageTracker4104995_
		cover: (34 to: 43)
		declaredAt: (34 to: 43)
		by:
			(expiration _ #_coverageTracker4104995_
				cover: (48 to: 53)
				declaredAt: (23 to: 28)
				by: aMonth).! !
!Behavior method!
today
	#_coverageTracker4104994_ markAsExecuted.
	^ #_coverageTracker4104994_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: today.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	#_coverageTracker4105018_ markAsExecuted.
	#_coverageTracker4105018_
		coverAll:
			{114 to: 130}
		evaluating: [
			(#_coverageTracker4105018_
				coverAll:
					{109 to: 112}
				byLiteralOrPseudoVariable: self) assertIsNotEmpty:
				(#_coverageTracker4105018_
					cover: (132 to: 136)
					declaredAt: (13 to: 17)
					by: aCart) ].
	#_coverageTracker4105018_
		coverAll:
			{145 to: 163. 177 to: 179}
		evaluating: [
			(#_coverageTracker4105018_
				coverAll:
					{140 to: 143}
				byLiteralOrPseudoVariable: self)
				assertIsNotExpired:
					(#_coverageTracker4105018_
						cover: (165 to: 175)
						declaredAt: (29 to: 39)
						by: aCreditCard)
				on:
					(#_coverageTracker4105018_
						cover: (181 to: 185)
						declaredAt: (74 to: 78)
						by: aDate) ].
	^ #_coverageTracker4105018_
		coverAll:
			{201 to: 221. 229 to: 237. 251 to: 259. 280 to: 293}
		evaluating: [
			(#_coverageTracker4105018_
				coverAll:
					{197 to: 199}
				evaluating: [
					(#_coverageTracker4105018_
						coverAll:
							{192 to: 195}
						byLiteralOrPseudoVariable: self) new ])
				initializeToCheckout:
					(#_coverageTracker4105018_
						cover: (223 to: 227)
						declaredAt: (13 to: 17)
						by: aCart)
				charging:
					(#_coverageTracker4105018_
						cover: (239 to: 249)
						declaredAt: (29 to: 39)
						by: aCreditCard)
				throught:
					(#_coverageTracker4105018_
						cover: (261 to: 278)
						declaredAt: (51 to: 68)
						by: aMerchantProcessor)
				registeringOn:
					(#_coverageTracker4105018_
						cover: (295 to: 304)
						declaredAt: (95 to: 104)
						by: aSalesBook) ].! !
!Behavior method!
assertIsNotEmpty: aCart
	#_coverageTracker4105182_ markAsExecuted.
	#_coverageTracker4105182_
		coverAll:
			{43 to: 49}
		evaluating: [
			(#_coverageTracker4105182_
				coverAll:
					{35 to: 41}
				evaluating: [
					(#_coverageTracker4105182_
						cover: (29 to: 33)
						declaredAt: (19 to: 23)
						by: aCart) isEmpty ]) ifTrue: [
				#_coverageTracker4105182_
					coverAll:
						{57 to: 62}
					evaluating: [
						(#_coverageTracker4105182_
							coverAll:
								{52 to: 55}
							byLiteralOrPseudoVariable: self) error:
							(#_coverageTracker4105182_
								coverAll:
									{69 to: 97}
								evaluating: [
									(#_coverageTracker4105182_
										coverAll:
											{64 to: 67}
										byLiteralOrPseudoVariable: self) cartCanNotBeEmptyErrorMessage ]) ]]].! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	#_coverageTracker4105057_ markAsExecuted.
	^ #_coverageTracker4105057_
		coverAll:
			{35 to: 67}
		byLiteralOrPseudoVariable: 'Can not check out an empty cart'.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	#_coverageTracker4105170_ markAsExecuted.
	#_coverageTracker4105170_
		coverAll:
			{79 to: 85}
		evaluating: [
			(#_coverageTracker4105170_
				coverAll:
					{59 to: 70}
				evaluating: [
					(#_coverageTracker4105170_
						cover: (47 to: 57)
						declaredAt: (21 to: 31)
						by: aCreditCard) isExpiredOn:
						(#_coverageTracker4105170_
							cover: (72 to: 76)
							declaredAt: (37 to: 41)
							by: aDate) ]) ifTrue: [
				#_coverageTracker4105170_
					coverAll:
						{94 to: 99}
					evaluating: [
						(#_coverageTracker4105170_
							coverAll:
								{89 to: 92}
							byLiteralOrPseudoVariable: self) error:
							(#_coverageTracker4105170_
								coverAll:
									{106 to: 148}
								evaluating: [
									(#_coverageTracker4105170_
										coverAll:
											{101 to: 104}
										byLiteralOrPseudoVariable: self) canNotChargeAnExpiredCreditCardErrorMessage ]) ]]].! !
!Behavior method!
isExpiredOn: aDate
	#_coverageTracker4104940_ markAsExecuted.
	^ #_coverageTracker4104940_
		coverAll:
			{42 to: 42}
		evaluating: [
			(#_coverageTracker4104940_
				coverAll:
					{36 to: 40}
				evaluating: [
					(#_coverageTracker4104940_
						cover: (25 to: 34)
						declaredAt: (25 to: 34)
						by: expiration) start ]) <
				(#_coverageTracker4104940_
					coverAll:
						{99 to: 103}
					evaluating: [
						(#_coverageTracker4104940_
							coverAll:
								{51 to: 56. 75 to: 79}
							evaluating: [
								(#_coverageTracker4104940_
									coverAll:
										{45 to: 49}
									by: Month)
									month:
										(#_coverageTracker4104940_
											coverAll:
												{64 to: 73}
											evaluating: [
												(#_coverageTracker4104940_
													cover: (58 to: 62)
													declaredAt: (14 to: 18)
													by: aDate) monthIndex ])
									year:
										(#_coverageTracker4104940_
											coverAll:
												{87 to: 96}
											evaluating: [
												(#_coverageTracker4104940_
													cover: (81 to: 85)
													declaredAt: (14 to: 18)
													by: aDate) yearNumber ]) ]) start ]) ].! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	#_coverageTracker4105057_ markAsExecuted.
	#_coverageTracker4105057_
		cover: (109 to: 112)
		declaredAt: (109 to: 112)
		by:
			(cart _ #_coverageTracker4105057_
				cover: (117 to: 121)
				declaredAt: (23 to: 27)
				by: aCart).
	#_coverageTracker4105057_
		cover: (125 to: 134)
		declaredAt: (125 to: 134)
		by:
			(creditCard _ #_coverageTracker4105057_
				cover: (139 to: 149)
				declaredAt: (39 to: 49)
				by: aCreditCard).
	#_coverageTracker4105057_
		cover: (153 to: 169)
		declaredAt: (153 to: 169)
		by:
			(merchantProcessor _ #_coverageTracker4105057_
				cover: (174 to: 191)
				declaredAt: (61 to: 78)
				by: aMerchantProcessor).
	#_coverageTracker4105057_
		cover: (195 to: 203)
		declaredAt: (195 to: 203)
		by:
			(salesBook _ #_coverageTracker4105057_
				cover: (208 to: 217)
				declaredAt: (95 to: 104)
				by: aSalesBook).! !
!Behavior method!
checkOut
	#_coverageTracker4104997_ markAsExecuted.
	#_coverageTracker4104997_
		coverAll:
			{17 to: 30}
		evaluating: [
			(#_coverageTracker4104997_
				coverAll:
					{12 to: 15}
				byLiteralOrPseudoVariable: self) calculateTotal ].
	#_coverageTracker4104997_
		coverAll:
			{39 to: 48}
		evaluating: [
			(#_coverageTracker4104997_
				coverAll:
					{34 to: 37}
				byLiteralOrPseudoVariable: self) debitTotal ].
	#_coverageTracker4104997_
		coverAll:
			{57 to: 68}
		evaluating: [
			(#_coverageTracker4104997_
				coverAll:
					{52 to: 55}
				byLiteralOrPseudoVariable: self) registerSale ].
	^ #_coverageTracker4104997_
		cover: (75 to: 79)
		declaredAt: (75 to: 79)
		by: total.! !
!Behavior method!
calculateTotal
	#_coverageTracker4104995_ markAsExecuted.
	#_coverageTracker4104995_
		cover: (18 to: 22)
		declaredAt: (18 to: 22)
		by:
			(total _ #_coverageTracker4104995_
				coverAll:
					{32 to: 36}
				evaluating: [
					(#_coverageTracker4104995_
						cover: (27 to: 30)
						declaredAt: (27 to: 30)
						by: cart) total ]).! !
!Behavior method!
total
	#_coverageTracker4105279_ markAsExecuted.
	^ #_coverageTracker4105279_
		coverAll:
			{17 to: 20}
		evaluating: [
			(#_coverageTracker4105279_
				cover: (11 to: 15)
				declaredAt: (11 to: 15)
				by: items) sum: [ :anItem |
				#_coverageTracker4105279_
					coverAll:
						{42 to: 44}
					evaluating: [
						(#_coverageTracker4105279_
							cover: (34 to: 40)
							declaredAt: (34 to: 40)
							by: catalog) at:
							(#_coverageTracker4105279_
								cover: (46 to: 51)
								declaredAt: (25 to: 30)
								by: anItem) ]]].! !
!Behavior method!
debitTotal
	#_coverageTracker4105047_ markAsExecuted.
	#_coverageTracker4105047_
		coverAll:
			{32 to: 37. 45 to: 49}
		evaluating: [
			(#_coverageTracker4105047_
				cover: (14 to: 30)
				declaredAt: (14 to: 30)
				by: merchantProcessor)
				debit:
					(#_coverageTracker4105047_
						cover: (39 to: 43)
						declaredAt: (39 to: 43)
						by: total)
				from:
					(#_coverageTracker4105047_
						cover: (51 to: 60)
						declaredAt: (51 to: 60)
						by: creditCard) ].! !
!Behavior method!
registerSale
	#_coverageTracker4105000_ markAsExecuted.
	#_coverageTracker4105000_
		coverAll:
			{26 to: 29}
		evaluating: [
			(#_coverageTracker4105000_
				cover: (16 to: 24)
				declaredAt: (16 to: 24)
				by: salesBook) add:
				(#_coverageTracker4105000_
					coverAll:
						{36 to: 45}
					evaluating: [
						(#_coverageTracker4105000_
							coverAll:
								{31 to: 34}
							byLiteralOrPseudoVariable: self) createSale ]) ].! !
!Behavior method!
createSale
	#_coverageTracker4105280_ markAsExecuted.
	^ #_coverageTracker4105280_
		coverAll:
			{21 to: 23}
		evaluating: [
			(#_coverageTracker4105280_
				coverAll:
					{16 to: 19}
				by: Sale) of:
				(#_coverageTracker4105280_
					cover: (25 to: 29)
					declaredAt: (25 to: 29)
					by: total) ].! !
!Behavior method!
of: aTotal
	"should assert total is not negative or 0!!"
	#_coverageTracker4105282_ markAsExecuted.
	^ #_coverageTracker4105282_
		coverAll:
			{69 to: 84}
		evaluating: [
			(#_coverageTracker4105282_
				coverAll:
					{65 to: 67}
				evaluating: [
					(#_coverageTracker4105282_
						coverAll:
							{60 to: 63}
						byLiteralOrPseudoVariable: self) new ]) initializeTotal:
				(#_coverageTracker4105282_
					cover: (86 to: 91)
					declaredAt: (5 to: 10)
					by: aTotal) ].! !
!Behavior method!
initializeTotal: aTotal
	#_coverageTracker4104956_ markAsExecuted.
	#_coverageTracker4104956_
		cover: (27 to: 31)
		declaredAt: (27 to: 31)
		by:
			(total _ #_coverageTracker4104956_
				cover: (36 to: 41)
				declaredAt: (18 to: 23)
				by: aTotal).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
expiredCreditCard
	#_coverageTracker4104988_ markAsExecuted.
	^ #_coverageTracker4104988_
		coverAll:
			{34 to: 44}
		evaluating: [
			(#_coverageTracker4104988_
				coverAll:
					{23 to: 32}
				by: CreditCard) expiringOn:
				(#_coverageTracker4104988_
					coverAll:
						{53 to: 58. 77 to: 81}
					evaluating: [
						(#_coverageTracker4104988_
							coverAll:
								{47 to: 51}
							by: Month)
							month:
								(#_coverageTracker4104988_
									coverAll:
										{66 to: 75}
									evaluating: [
										(#_coverageTracker4104988_
											cover: (60 to: 64)
											declaredAt: (60 to: 64)
											by: today) monthIndex ])
							year:
								(#_coverageTracker4104988_
									coverAll:
										{100 to: 100}
									evaluating: [
										(#_coverageTracker4104988_
											coverAll:
												{89 to: 98}
											evaluating: [
												(#_coverageTracker4104988_
													cover: (83 to: 87)
													declaredAt: (60 to: 64)
													by: today) yearNumber ]) -
											(#_coverageTracker4104988_
												coverAll:
													{102 to: 102}
												byLiteralOrPseudoVariable: 1) ]) ]) ].! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	#_coverageTracker4105030_ markAsExecuted.
	^ #_coverageTracker4105030_
		coverAll:
			{49 to: 87}
		byLiteralOrPseudoVariable: 'Can not charge an expired credit card'.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
total
	#_coverageTracker4104943_ markAsExecuted.
	^ #_coverageTracker4104943_
		cover: (12 to: 16)
		declaredAt: (12 to: 16)
		by: total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:22:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	#_coverageTracker4104961_ markAsExecuted.
	^ #_coverageTracker4104961_
		coverAll:
			{39 to: 65}
		byLiteralOrPseudoVariable: 'Credit card has no credit'.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
withAuthenticator: aRestInterfaceTest withCatalog: aCatalog
	#_coverageTracker4105026_ markAsExecuted.
	^ #_coverageTracker4105026_
		coverAll:
			{74 to: 101. 122 to: 133}
		evaluating: [
			(#_coverageTracker4105026_
				coverAll:
					{70 to: 72}
				evaluating: [
					(#_coverageTracker4105026_
						coverAll:
							{65 to: 68}
						byLiteralOrPseudoVariable: self) new ])
				initializeWithAuthenticator:
					(#_coverageTracker4105026_
						cover: (103 to: 120)
						declaredAt: (20 to: 37)
						by: aRestInterfaceTest)
				withCatalog:
					(#_coverageTracker4105026_
						cover: (135 to: 142)
						declaredAt: (52 to: 59)
						by: aCatalog) ].! !
!Behavior method!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog
	#_coverageTracker4105099_ markAsExecuted.
	#_coverageTracker4105099_
		cover: (72 to: 84)
		declaredAt: (72 to: 84)
		by:
			(authenticator _ #_coverageTracker4105099_
				cover: (89 to: 103)
				declaredAt: (30 to: 44)
				by: anAuthenticator).
	#_coverageTracker4105099_
		cover: (107 to: 113)
		declaredAt: (107 to: 113)
		by:
			(catalog _ #_coverageTracker4105099_
				cover: (118 to: 125)
				declaredAt: (59 to: 66)
				by: aCatalog).
	#_coverageTracker4105099_
		cover: (129 to: 134)
		declaredAt: (129 to: 134)
		by:
			(lastId _ #_coverageTracker4105099_
				coverAll:
					{138 to: 138}
				byLiteralOrPseudoVariable: 0).
	#_coverageTracker4105099_
		cover: (142 to: 150)
		declaredAt: (142 to: 150)
		by:
			(salesBook _ #_coverageTracker4105099_
				coverAll:
					{172 to: 174}
				evaluating: [
					(#_coverageTracker4105099_
						coverAll:
							{154 to: 170}
						by: OrderedCollection) new ]).
	#_coverageTracker4105099_
		cover: (178 to: 184)
		declaredAt: (178 to: 184)
		by:
			(cartIds _ #_coverageTracker4105099_
				coverAll:
					{199 to: 201}
				evaluating: [
					(#_coverageTracker4105099_
						coverAll:
							{188 to: 197}
						by: Dictionary) new ]).
	#_coverageTracker4105099_
		cover: (205 to: 211)
		declaredAt: (205 to: 211)
		by:
			(clients _ #_coverageTracker4105099_
				coverAll:
					{226 to: 228}
				evaluating: [
					(#_coverageTracker4105099_
						coverAll:
							{215 to: 224}
						by: Dictionary) new ]).
	#_coverageTracker4105099_
		cover: (232 to: 241)
		declaredAt: (232 to: 241)
		by:
			(cartOwners _ #_coverageTracker4105099_
				coverAll:
					{256 to: 258}
				evaluating: [
					(#_coverageTracker4105099_
						coverAll:
							{245 to: 254}
						by: Dictionary) new ]).! !
!Behavior method!
createCartFor: aClientID authenticatedWith: aPassword
	| cart newId client |
	#_coverageTracker4105234_ markAsExecuted.
	#_coverageTracker4105234_
		coverAll:
			{87 to: 99. 111 to: 123}
		evaluating: [
			(#_coverageTracker4105234_
				coverAll:
					{82 to: 85}
				byLiteralOrPseudoVariable: self)
				authenticate:
					(#_coverageTracker4105234_
						cover: (101 to: 109)
						declaredAt: (16 to: 24)
						by: aClientID)
				withPassword:
					(#_coverageTracker4105234_
						cover: (125 to: 133)
						declaredAt: (45 to: 53)
						by: aPassword) ].
	#_coverageTracker4105234_
		cover: (139 to: 144)
		declaredAt: (71 to: 76)
		by:
			(client _ #_coverageTracker4105234_
				coverAll:
					{156 to: 158. 170 to: 178}
				evaluating: [
					(#_coverageTracker4105234_
						cover: (148 to: 154)
						declaredAt: (148 to: 154)
						by: clients)
						at:
							(#_coverageTracker4105234_
								cover: (160 to: 168)
								declaredAt: (16 to: 24)
								by: aClientID)
						ifAbsent: [
							#_coverageTracker4105234_
								coverAll:
									{189 to: 192}
								evaluating: [
									(#_coverageTracker4105234_
										cover: (181 to: 187)
										declaredAt: (148 to: 154)
										by: clients) add:
										(#_coverageTracker4105234_
											coverAll:
												{203 to: 204}
											evaluating: [
												(#_coverageTracker4105234_
													cover: (194 to: 202)
													declaredAt: (16 to: 24)
													by: aClientID) ->
													(#_coverageTracker4105234_
														coverAll:
															{213 to: 217}
														evaluating: [
															(#_coverageTracker4105234_
																coverAll:
																	{206 to: 211}
																by: Client) with:
																(#_coverageTracker4105234_
																	cover: (219 to: 227)
																	declaredAt: (16 to: 24)
																	by: aClientID) ]) ]) ].
							#_coverageTracker4105234_
								coverAll:
									{239 to: 241}
								evaluating: [
									(#_coverageTracker4105234_
										cover: (231 to: 237)
										declaredAt: (148 to: 154)
										by: clients) at:
										(#_coverageTracker4105234_
											cover: (243 to: 251)
											declaredAt: (16 to: 24)
											by: aClientID) ]]]).
	#_coverageTracker4105234_
		cover: (256 to: 259)
		declaredAt: (60 to: 63)
		by:
			(cart _ #_coverageTracker4105234_
				coverAll:
					{268 to: 284}
				evaluating: [
					(#_coverageTracker4105234_
						coverAll:
							{263 to: 266}
						by: Cart) acceptingItemsOf:
						(#_coverageTracker4105234_
							cover: (286 to: 292)
							declaredAt: (286 to: 292)
							by: catalog) ]).
	#_coverageTracker4105234_
		cover: (297 to: 301)
		declaredAt: (65 to: 69)
		by:
			(newId _ #_coverageTracker4105234_
				coverAll:
					{312 to: 312}
				evaluating: [
					(#_coverageTracker4105234_
						cover: (305 to: 310)
						declaredAt: (305 to: 310)
						by: lastId) +
						(#_coverageTracker4105234_
							coverAll:
								{313 to: 313}
							byLiteralOrPseudoVariable: 1) ]).
	#_coverageTracker4105234_
		cover: (317 to: 322)
		declaredAt: (305 to: 310)
		by:
			(lastId _ #_coverageTracker4105234_
				cover: (326 to: 330)
				declaredAt: (65 to: 69)
				by: newId).
	#_coverageTracker4105234_
		coverAll:
			{342 to: 345}
		evaluating: [
			(#_coverageTracker4105234_
				cover: (334 to: 340)
				declaredAt: (334 to: 340)
				by: cartIds) add:
				(#_coverageTracker4105234_
					coverAll:
						{352 to: 353}
					evaluating: [
						(#_coverageTracker4105234_
							cover: (347 to: 351)
							declaredAt: (65 to: 69)
							by: newId) ->
							(#_coverageTracker4105234_
								cover: (354 to: 357)
								declaredAt: (60 to: 63)
								by: cart) ]) ].
	#_coverageTracker4105234_
		coverAll:
			{372 to: 375}
		evaluating: [
			(#_coverageTracker4105234_
				cover: (361 to: 370)
				declaredAt: (361 to: 370)
				by: cartOwners) add:
				(#_coverageTracker4105234_
					coverAll:
						{382 to: 383}
					evaluating: [
						(#_coverageTracker4105234_
							cover: (377 to: 381)
							declaredAt: (65 to: 69)
							by: newId) ->
							(#_coverageTracker4105234_
								cover: (384 to: 389)
								declaredAt: (71 to: 76)
								by: client) ]) ].
	^ #_coverageTracker4105234_
		cover: (397 to: 401)
		declaredAt: (65 to: 69)
		by: newId.! !
!Behavior method!
authenticate: aPassword withPassword: aClientID
	#_coverageTracker4105304_ markAsExecuted.
	^ #_coverageTracker4105304_
		coverAll:
			{112 to: 119}
		evaluating: [
			(#_coverageTracker4105304_
				coverAll:
					{68 to: 75. 87 to: 99}
				evaluating: [
					(#_coverageTracker4105304_
						cover: (54 to: 66)
						declaredAt: (54 to: 66)
						by: authenticator)
						canAuth:
							(#_coverageTracker4105304_
								cover: (77 to: 85)
								declaredAt: (39 to: 47)
								by: aClientID)
						withPassword:
							(#_coverageTracker4105304_
								cover: (101 to: 109)
								declaredAt: (15 to: 23)
								by: aPassword) ]) ifFalse: [
				#_coverageTracker4105304_
					coverAll:
						{127 to: 132}
					evaluating: [
						(#_coverageTracker4105304_
							coverAll:
								{122 to: 125}
							byLiteralOrPseudoVariable: self) error:
							(#_coverageTracker4105304_
								coverAll:
									{145 to: 176}
								evaluating: [
									(#_coverageTracker4105304_
										coverAll:
											{139 to: 143}
										evaluating: [
											(#_coverageTracker4105304_
												coverAll:
													{134 to: 137}
												byLiteralOrPseudoVariable: self) class ]) failedAuthenticationErrorMessage ]) ]]].! !
!Behavior method!
with: aClientId
	#_coverageTracker4104938_ markAsExecuted.
	^ #_coverageTracker4104938_
		coverAll:
			{29 to: 45}
		evaluating: [
			(#_coverageTracker4104938_
				coverAll:
					{25 to: 27}
				evaluating: [
					(#_coverageTracker4104938_
						coverAll:
							{20 to: 23}
						byLiteralOrPseudoVariable: self) new ]) initializeWithId:
				(#_coverageTracker4104938_
					cover: (47 to: 55)
					declaredAt: (7 to: 15)
					by: aClientId) ].! !
!Behavior method!
initializeWithId: aClientId
	#_coverageTracker4105001_ markAsExecuted.
	#_coverageTracker4105001_
		cover: (31 to: 32)
		declaredAt: (31 to: 32)
		by:
			(id _ #_coverageTracker4105001_
				cover: (36 to: 44)
				declaredAt: (19 to: 27)
				by: aClientId).
	#_coverageTracker4105001_
		cover: (49 to: 57)
		declaredAt: (49 to: 57)
		by:
			(purchases _ #_coverageTracker4105001_
				coverAll:
					{65 to: 67}
				evaluating: [
					(#_coverageTracker4105001_
						coverAll:
							{61 to: 63}
						by: Bag) new ]).
	#_coverageTracker4105001_
		cover: (71 to: 75)
		declaredAt: (71 to: 75)
		by:
			(total _ #_coverageTracker4105001_
				coverAll:
					{79 to: 79}
				byLiteralOrPseudoVariable: 0).! !
!Behavior method!
listCart: cartId
	#_coverageTracker4105130_ markAsExecuted.
	^ #_coverageTracker4105130_
		coverAll:
			{107 to: 136}
		evaluating: [
			(#_coverageTracker4105130_
				coverAll:
					{34 to: 36. 45 to: 53}
				evaluating: [
					(#_coverageTracker4105130_
						cover: (26 to: 32)
						declaredAt: (26 to: 32)
						by: cartIds)
						at:
							(#_coverageTracker4105130_
								cover: (38 to: 43)
								declaredAt: (11 to: 16)
								by: cartId)
						ifAbsent: [
							#_coverageTracker4105130_
								coverAll:
									{61 to: 66}
								evaluating: [
									(#_coverageTracker4105130_
										coverAll:
											{56 to: 59}
										byLiteralOrPseudoVariable: self) error:
										(#_coverageTracker4105130_
											coverAll:
												{79 to: 103}
											evaluating: [
												(#_coverageTracker4105130_
													coverAll:
														{73 to: 77}
													evaluating: [
														(#_coverageTracker4105130_
															coverAll:
																{68 to: 71}
															byLiteralOrPseudoVariable: self) class ]) invalidCartIdErrorMessage ]) ]]]) printOfListOfItemsForInterface ].! !
!Behavior method!
printOfListOfItemsForInterface
	| returnedString |
	#_coverageTracker4105148_ markAsExecuted.
	#_coverageTracker4105148_
		cover: (51 to: 64)
		declaredAt: (34 to: 47)
		by:
			(returnedString _ #_coverageTracker4105148_
				coverAll:
					{68 to: 69}
				byLiteralOrPseudoVariable: '').
	#_coverageTracker4105148_
		coverAll:
			{100 to: 114}
		evaluating: [
			(#_coverageTracker4105148_
				coverAll:
					{85 to: 98}
				evaluating: [
					(#_coverageTracker4105148_
						coverAll:
							{79 to: 83}
						evaluating: [
							(#_coverageTracker4105148_
								cover: (73 to: 77)
								declaredAt: (73 to: 77)
								by: items) asBag ]) sortedElements ]) associationsDo: [ :anAssociation |
				#_coverageTracker4105148_
					cover: (151 to: 164)
					declaredAt: (34 to: 47)
					by:
						(returnedString _ #_coverageTracker4105148_
							coverAll:
								{226 to: 226}
							evaluating: [
								(#_coverageTracker4105148_
									coverAll:
										{195 to: 195}
									evaluating: [
										(#_coverageTracker4105148_
											coverAll:
												{190 to: 190}
											evaluating: [
												(#_coverageTracker4105148_
													coverAll:
														{171 to: 171}
													evaluating: [
														(#_coverageTracker4105148_
															coverAll:
																{166 to: 166}
															evaluating: [
																(#_coverageTracker4105148_
																	cover: (133 to: 146)
																	declaredAt: (34 to: 47)
																	by: returnedString) ,
																	(#_coverageTracker4105148_
																		coverAll:
																			{168 to: 170}
																		byLiteralOrPseudoVariable: ' ') ]) ,
															(#_coverageTracker4105148_
																coverAll:
																	{187 to: 189}
																evaluating: [
																	(#_coverageTracker4105148_
																		cover: (173 to: 185)
																		declaredAt: (118 to: 130)
																		by: anAssociation) key ]) ]) ,
													(#_coverageTracker4105148_
														coverAll:
															{192 to: 194}
														byLiteralOrPseudoVariable: ' ') ]) ,
											(#_coverageTracker4105148_
												coverAll:
													{217 to: 224}
												evaluating: [
													(#_coverageTracker4105148_
														coverAll:
															{211 to: 215}
														evaluating: [
															(#_coverageTracker4105148_
																cover: (197 to: 209)
																declaredAt: (118 to: 130)
																by: anAssociation) value ]) asString ]) ]) ,
									(#_coverageTracker4105148_
										coverAll:
											{228 to: 230}
										byLiteralOrPseudoVariable: '|') ]) ]].
	^ #_coverageTracker4105148_
		cover: (236 to: 249)
		declaredAt: (34 to: 47)
		by: returnedString.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:22:28'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:22:28'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook ammount: anAmmount
	#_coverageTracker4105078_ markAsExecuted.
	#_coverageTracker4105078_
		coverAll:
			{77 to: 80. 92 to: 94}
		evaluating: [
			(#_coverageTracker4105078_
				coverAll:
					{65 to: 67}
				evaluating: [
					(#_coverageTracker4105078_
						cover: (57 to: 63)
						declaredAt: (57 to: 63)
						by: cartIds) at:
						(#_coverageTracker4105078_
							cover: (69 to: 74)
							declaredAt: (12 to: 17)
							by: cartId) ])
				add:
					(#_coverageTracker4105078_
						cover: (82 to: 90)
						declaredAt: (40 to: 48)
						by: anAmmount)
				of:
					(#_coverageTracker4105078_
						cover: (96 to: 100)
						declaredAt: (25 to: 29)
						by: aBook) ].! !

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:22:28'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:22:28'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	#_coverageTracker4105089_ markAsExecuted.
	^ #_coverageTracker4105089_
		coverAll:
			{29 to: 58}
		byLiteralOrPseudoVariable: 'supplied cartId is not valid'.! !

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
listPurchases: aClientID password: aPassword
	#_coverageTracker4105201_ markAsExecuted.
	#_coverageTracker4105201_
		coverAll:
			{54 to: 66. 78 to: 90}
		evaluating: [
			(#_coverageTracker4105201_
				coverAll:
					{49 to: 52}
				byLiteralOrPseudoVariable: self)
				authenticate:
					(#_coverageTracker4105201_
						cover: (68 to: 76)
						declaredAt: (36 to: 44)
						by: aPassword)
				withPassword:
					(#_coverageTracker4105201_
						cover: (92 to: 100)
						declaredAt: (16 to: 24)
						by: aClientID) ].
	^ #_coverageTracker4105201_
		coverAll:
			{196 to: 220}
		evaluating: [
			(#_coverageTracker4105201_
				coverAll:
					{116 to: 118. 130 to: 138}
				evaluating: [
					(#_coverageTracker4105201_
						cover: (108 to: 114)
						declaredAt: (108 to: 114)
						by: clients)
						at:
							(#_coverageTracker4105201_
								cover: (120 to: 128)
								declaredAt: (16 to: 24)
								by: aClientID)
						ifAbsent: [
							#_coverageTracker4105201_
								coverAll:
									{146 to: 151}
								evaluating: [
									(#_coverageTracker4105201_
										coverAll:
											{141 to: 144}
										byLiteralOrPseudoVariable: self) error:
										(#_coverageTracker4105201_
											coverAll:
												{164 to: 192}
											evaluating: [
												(#_coverageTracker4105201_
													coverAll:
														{158 to: 162}
													evaluating: [
														(#_coverageTracker4105201_
															coverAll:
																{153 to: 156}
															byLiteralOrPseudoVariable: self) class ]) nonExistentClientErrorMessage ]) ]]]) sendPurchasesToInterface:
				(#_coverageTracker4105201_
					coverAll:
						{222 to: 225}
					byLiteralOrPseudoVariable: self) ].! !
!Behavior method!
sendPurchasesToInterface: aInterface
	#_coverageTracker4105119_ markAsExecuted.
	^ #_coverageTracker4105119_
		coverAll:
			{54 to: 67. 79 to: 87}
		evaluating: [
			(#_coverageTracker4105119_
				cover: (43 to: 52)
				declaredAt: (27 to: 36)
				by: aInterface)
				listPurchases:
					(#_coverageTracker4105119_
						cover: (69 to: 77)
						declaredAt: (69 to: 77)
						by: purchases)
				andTotal:
					(#_coverageTracker4105119_
						cover: (89 to: 93)
						declaredAt: (89 to: 93)
						by: total) ].! !
!Behavior method!
listPurchases: aBagOfPurchases andTotal: aPrice
	| listOfPurchases |
	#_coverageTracker4104972_ markAsExecuted.
	#_coverageTracker4104972_
		cover: (73 to: 87)
		declaredAt: (53 to: 67)
		by:
			(listOfPurchases _ #_coverageTracker4104972_
				coverAll:
					{91 to: 92}
				byLiteralOrPseudoVariable: '').
	#_coverageTracker4104972_
		coverAll:
			{129 to: 143}
		evaluating: [
			(#_coverageTracker4104972_
				coverAll:
					{114 to: 127}
				evaluating: [
					(#_coverageTracker4104972_
						cover: (98 to: 112)
						declaredAt: (16 to: 30)
						by: aBagOfPurchases) sortedElements ]) associationsDo: [ :anAssociation |
				#_coverageTracker4104972_
					cover: (180 to: 194)
					declaredAt: (53 to: 67)
					by:
						(listOfPurchases _ #_coverageTracker4104972_
							coverAll:
								{250 to: 250}
							evaluating: [
								(#_coverageTracker4104972_
									coverAll:
										{220 to: 220}
									evaluating: [
										(#_coverageTracker4104972_
											coverAll:
												{215 to: 215}
											evaluating: [
												(#_coverageTracker4104972_
													coverAll:
														{196 to: 196}
													evaluating: [
														(#_coverageTracker4104972_
															cover: (162 to: 176)
															declaredAt: (53 to: 67)
															by: listOfPurchases) ,
															(#_coverageTracker4104972_
																coverAll:
																	{212 to: 214}
																evaluating: [
																	(#_coverageTracker4104972_
																		cover: (198 to: 210)
																		declaredAt: (147 to: 159)
																		by: anAssociation) key ]) ]) ,
													(#_coverageTracker4104972_
														coverAll:
															{217 to: 219}
														byLiteralOrPseudoVariable: '|') ]) ,
											(#_coverageTracker4104972_
												coverAll:
													{242 to: 249}
												evaluating: [
													(#_coverageTracker4104972_
														coverAll:
															{236 to: 240}
														evaluating: [
															(#_coverageTracker4104972_
																cover: (222 to: 234)
																declaredAt: (147 to: 159)
																by: anAssociation) value ]) asString ]) ]) ,
									(#_coverageTracker4104972_
										coverAll:
											{252 to: 254}
										byLiteralOrPseudoVariable: '|') ]) ]].
	^ #_coverageTracker4104972_
		coverAll:
			{278 to: 278}
		evaluating: [
			(#_coverageTracker4104972_
				cover: (262 to: 276)
				declaredAt: (53 to: 67)
				by: listOfPurchases) ,
				(#_coverageTracker4104972_
					coverAll:
						{287 to: 294}
					evaluating: [
						(#_coverageTracker4104972_
							cover: (280 to: 285)
							declaredAt: (42 to: 47)
							by: aPrice) asString ]) ].! !

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	| cashier cart |
	#_coverageTracker4105286_ markAsExecuted.
	#_coverageTracker4105286_
		cover: (97 to: 100)
		declaredAt: (88 to: 91)
		by:
			(cart _ #_coverageTracker4105286_
				coverAll:
					{112 to: 114. 123 to: 131}
				evaluating: [
					(#_coverageTracker4105286_
						cover: (104 to: 110)
						declaredAt: (104 to: 110)
						by: cartIds)
						at:
							(#_coverageTracker4105286_
								cover: (116 to: 121)
								declaredAt: (15 to: 20)
								by: cartId)
						ifAbsent: [
							#_coverageTracker4105286_
								coverAll:
									{139 to: 144}
								evaluating: [
									(#_coverageTracker4105286_
										coverAll:
											{134 to: 137}
										byLiteralOrPseudoVariable: self) error:
										(#_coverageTracker4105286_
											coverAll:
												{157 to: 185}
											evaluating: [
												(#_coverageTracker4105286_
													coverAll:
														{151 to: 155}
													evaluating: [
														(#_coverageTracker4105286_
															coverAll:
																{146 to: 149}
															byLiteralOrPseudoVariable: self) class ]) nonExistentCartIDErrorMessage ]) ]]]).
	#_coverageTracker4105286_
		cover: (192 to: 198)
		declaredAt: (80 to: 86)
		by:
			(cashier _ #_coverageTracker4105286_
				coverAll:
					{210 to: 220. 227 to: 235. 243 to: 251. 272 to: 274. 282 to: 295}
				evaluating: [
					(#_coverageTracker4105286_
						coverAll:
							{202 to: 208}
						by: Cashier)
						toCheckout:
							(#_coverageTracker4105286_
								cover: (222 to: 225)
								declaredAt: (88 to: 91)
								by: cart)
						charging:
							(#_coverageTracker4105286_
								cover: (237 to: 241)
								declaredAt: (32 to: 36)
								by: aCard)
						throught:
							(#_coverageTracker4105286_
								cover: (253 to: 270)
								declaredAt: (47 to: 64)
								by: aMerchantProcessor)
						on:
							(#_coverageTracker4105286_
								cover: (276 to: 280)
								declaredAt: (70 to: 74)
								by: aDate)
						registeringOn:
							(#_coverageTracker4105286_
								cover: (297 to: 305)
								declaredAt: (297 to: 305)
								by: salesBook) ]).
	#_coverageTracker4105286_
		coverAll:
			{316 to: 330. 337 to: 345}
		evaluating: [
			(#_coverageTracker4105286_
				cover: (311 to: 314)
				declaredAt: (88 to: 91)
				by: cart)
				listOfItemsFor:
					(#_coverageTracker4105286_
						coverAll:
							{332 to: 335}
						byLiteralOrPseudoVariable: self)
				ofClient:
					(#_coverageTracker4105286_
						coverAll:
							{359 to: 361}
						evaluating: [
							(#_coverageTracker4105286_
								cover: (348 to: 357)
								declaredAt: (348 to: 357)
								by: cartOwners) at:
								(#_coverageTracker4105286_
									cover: (363 to: 368)
									declaredAt: (15 to: 20)
									by: cartId) ]) ].
	#_coverageTracker4105286_
		coverAll:
			{384 to: 391}
		evaluating: [
			(#_coverageTracker4105286_
				cover: (376 to: 382)
				declaredAt: (80 to: 86)
				by: cashier) checkOut ].! !
!Behavior method!
listOfItemsFor: anInterface ofClient: aClient
	#_coverageTracker4105032_ markAsExecuted.
	^ #_coverageTracker4105032_
		coverAll:
			{63 to: 77. 90 to: 99. 112 to: 114}
		evaluating: [
			(#_coverageTracker4105032_
				cover: (51 to: 61)
				declaredAt: (17 to: 27)
				by: anInterface)
				addToPurchases:
					(#_coverageTracker4105032_
						coverAll:
							{85 to: 88}
						evaluating: [
							(#_coverageTracker4105032_
								cover: (79 to: 83)
								declaredAt: (79 to: 83)
								by: items) copy ])
				withTotal:
					(#_coverageTracker4105032_
						coverAll:
							{106 to: 110}
						evaluating: [
							(#_coverageTracker4105032_
								coverAll:
									{101 to: 104}
								byLiteralOrPseudoVariable: self) total ])
				to:
					(#_coverageTracker4105032_
						cover: (116 to: 122)
						declaredAt: (39 to: 45)
						by: aClient) ].! !
!Behavior method!
addToPurchases: aBagOfItems withTotal: aPrice to: aClient
	#_coverageTracker4104992_ markAsExecuted.
	#_coverageTracker4104992_
		coverAll:
			{70 to: 81. 95 to: 104}
		evaluating: [
			(#_coverageTracker4104992_
				cover: (62 to: 68)
				declaredAt: (51 to: 57)
				by: aClient)
				addPurchase:
					(#_coverageTracker4104992_
						cover: (83 to: 93)
						declaredAt: (17 to: 27)
						by: aBagOfItems)
				withTotal:
					(#_coverageTracker4104992_
						cover: (106 to: 111)
						declaredAt: (40 to: 45)
						by: aPrice) ].! !
!Behavior method!
addPurchase: aPurchase withTotal: aPrice
	#_coverageTracker4104961_ markAsExecuted.
	#_coverageTracker4104961_
		coverAll:
			{54 to: 60}
		evaluating: [
			(#_coverageTracker4104961_
				cover: (44 to: 52)
				declaredAt: (44 to: 52)
				by: purchases) addAll:
				(#_coverageTracker4104961_
					cover: (62 to: 70)
					declaredAt: (14 to: 22)
					by: aPurchase) ].
	#_coverageTracker4104961_
		cover: (82 to: 86)
		declaredAt: (74 to: 78)
		by:
			(total _ #_coverageTracker4104961_
				coverAll:
					{88 to: 88}
				evaluating: [
					(#_coverageTracker4104961_
						cover: (74 to: 78)
						declaredAt: (74 to: 78)
						by: total) +
						(#_coverageTracker4104961_
							cover: (90 to: 95)
							declaredAt: (35 to: 40)
							by: aPrice) ]).! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:22:28'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
nonExistentCartIDErrorMessage
	#_coverageTracker4104957_ markAsExecuted.
	^ #_coverageTracker4104957_
		coverAll:
			{34 to: 55}
		byLiteralOrPseudoVariable: 'Non existent cart ID'.! !

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
nonExistentClientErrorMessage
	#_coverageTracker4104945_ markAsExecuted.
	^ #_coverageTracker4104945_
		coverAll:
			{35 to: 55}
		byLiteralOrPseudoVariable: 'Non-existent client'.! !

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Behavior method!
failedAuthenticationErrorMessage
	#_coverageTracker4105031_ markAsExecuted.
	^ #_coverageTracker4105031_
		coverAll:
			{36 to: 88}
		byLiteralOrPseudoVariable: 'Authentication failed: Invalid username or password'.! !

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:22:28'!
PASSED!
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 13:28:10'!
addPurchases: anInterface to: aClient
	
	^anInterface addToPurchases: items copy withTotal: self total to: aClient! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:28:10' prior: 50563914!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	cart _ cartIds at: cartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	
	cashier _ Cashier toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart addPurchases: self to: (cartOwners at: cartId).
		
	cashier checkOut.
	
	! !

!methodRemoval: Cart #listOfItemsFor:ofClient: stamp: 'MV 11/6/2022 13:28:10'!
listOfItemsFor: anInterface ofClient: aClient
	
	^anInterface addToPurchases: items copy withTotal: self total to: aClient!
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 13:28:56'!
addPurchasesTo: anInterface ofClient: aClient
	
	^anInterface addToPurchases: items copy withTotal: self total to: aClient! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:28:56' prior: 50568262!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	cart _ cartIds at: cartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	
	cashier _ Cashier toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart addPurchasesTo: self ofClient: (cartOwners at: cartId).
		
	cashier checkOut.
	
	! !

!methodRemoval: Cart #addPurchases:to: stamp: 'MV 11/6/2022 13:28:56'!
addPurchases: anInterface to: aClient
	
	^anInterface addToPurchases: items copy withTotal: self total to: aClient!
!Cart methodsFor: 'printing - private' stamp: 'MV 11/6/2022 13:29:15'!
sendAddPurchasesTo: anInterface ofClient: aClient
	
	^anInterface addToPurchases: items copy withTotal: self total to: aClient! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:29:15' prior: 50568291!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	cart _ cartIds at: cartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	
	cashier _ Cashier toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart sendAddPurchasesTo: self ofClient: (cartOwners at: cartId).
		
	cashier checkOut.
	
	! !

!methodRemoval: Cart #addPurchasesTo:ofClient: stamp: 'MV 11/6/2022 13:29:15'!
addPurchasesTo: anInterface ofClient: aClient
	
	^anInterface addToPurchases: items copy withTotal: self total to: aClient!
!Cart methodsFor: 'interface - private' stamp: 'MV 11/6/2022 13:29:45'!
sendAddToPurchasesTo: anInterface ofClient: aClient
	
	^anInterface addToPurchases: items copy withTotal: self total to: aClient! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:29:45' prior: 50568320!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	cart _ cartIds at: cartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	
	cashier _ Cashier toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart sendAddToPurchasesTo: self ofClient: (cartOwners at: cartId).
		
	cashier checkOut.
	
	! !

!methodRemoval: Cart #sendAddPurchasesTo:ofClient: stamp: 'MV 11/6/2022 13:29:45'!
sendAddPurchasesTo: anInterface ofClient: aClient
	
	^anInterface addToPurchases: items copy withTotal: self total to: aClient!
!Cart methodsFor: 'interface - private' stamp: 'MV 11/6/2022 13:30:31'!
sendListCartToInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	^returnedString 
	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:30:31' prior: 50562777!
listCart: cartId 
	
	
	^(cartIds at: cartId ifAbsent: [self error: self class invalidCartIdErrorMessage]) sendListCartToInterface. 
	
	
	! !

!methodRemoval: Cart #printOfListOfItemsForInterface stamp: 'MV 11/6/2022 13:30:31'!
printOfListOfItemsForInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	^returnedString 
	!
!Cart methodsFor: 'interface - private' stamp: 'MV 11/6/2022 13:30:52'!
sendListCartToInterface: anInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	^returnedString 
	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:30:52' prior: 50568384!
listCart: cartId 
	
	
	^(cartIds at: cartId ifAbsent: [self error: self class invalidCartIdErrorMessage]) sendListCartToInterface: self. 
	
	
	! !

!methodRemoval: Cart #sendListCartToInterface stamp: 'MV 11/6/2022 13:30:52'!
sendListCartToInterface
	|returnedString|
	returnedString _ ''.
	items asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	^returnedString 
	!
!Cart methodsFor: 'interface - private' stamp: 'MV 11/6/2022 13:31:30' prior: 50568402!
sendListCartToInterface: anInterface
	
	^anInterface printListCart: items copy
	! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/6/2022 13:32:10'!
printListCart: aBagOfItems
	
	|returnedString|
	
	returnedString _ ''.
	
	aBagOfItems sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	
	^returnedString 
	
	! !
!Cart methodsFor: 'interface - private' stamp: 'MV 11/6/2022 13:32:29'!
sendPrintListCartToInterface: anInterface
	
	^anInterface printListCart: items copy
	! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:32:29' prior: 50568414!
listCart: cartId 
	
	
	^(cartIds at: cartId ifAbsent: [self error: self class invalidCartIdErrorMessage]) sendPrintListCartToInterface: self. 
	
	
	! !

!methodRemoval: Cart #sendListCartToInterface: stamp: 'MV 11/6/2022 13:32:29'!
sendListCartToInterface: anInterface
	
	^anInterface printListCart: items copy
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:32:30'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:32:30'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:32:30'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:32:30'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:32:30'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:32:32'!
ERROR!
!Cart methodsFor: 'interface - private' stamp: 'MV 11/6/2022 13:33:04' prior: 50568449!
sendPrintListCartToInterface: anInterface
	
	^anInterface printListCart: items asBag copy
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:33:05'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:33:05'!
PASSED!
!Cart methodsFor: 'interface - private' stamp: 'MV 11/6/2022 13:33:22' prior: 50568566!
sendPrintListCartToInterface: anInterface
	
	^anInterface printListCart: items copy
	! !
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/6/2022 13:33:28' prior: 50568438!
printListCart: aBagOfItems
	
	|returnedString|
	
	returnedString _ ''.
	
	aBagOfItems asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	
	^returnedString 
	
	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:33:30'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:33:30'!
PASSED!
!InternalRestInterface methodsFor: 'accessing' stamp: 'MV 11/6/2022 13:33:36' prior: 50568671!
printListCart: aCollectionOfItems
	
	|returnedString|
	
	returnedString _ ''.
	
	aCollectionOfItems asBag sortedElements associationsDo: [:anAssociation| returnedString _  returnedString , ' ', anAssociation key, ' ', anAssociation value asString , '|'].
	
	^returnedString 
	
	! !

----SNAPSHOT----(6 November 2022 13:35:07) CuisUniversity-5510.image priorSource: 7463942!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:38:17'!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	
	self should: [internalRestInterface listPurchases: 'user1' password: 'wrongPassword']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage]
	
	
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:38:29' prior: 50568745!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	
	
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:39:50' prior: 50568757!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	|cartId cart2Id userName item item2 itemPrice item2Price| 
		
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	userName _ 'manuel'.
	item2 _ testObjectsFactory itemSellByTheStore2.
	item2Price _ testObjectsFactory itemSellByTheStore2Price.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	cart2Id _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface addToCart: cartId book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:40:04' prior: 50568762!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	|cartId cart2Id userName item item2 itemPrice item2Price| 
		
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	userName _ 'manuel'.
	item2 _ testObjectsFactory itemSellByTheStore2.
	item2Price _ testObjectsFactory itemSellByTheStore2Price.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	cart2Id _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface addToCart: cartId book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:40:09'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 13:40:09'!
FAILURE!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 13:40:09'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:41:32' prior: 50568793!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	|cartId cart2Id userName item item2 itemPrice item2Price| 
		
	item _ testObjectsFactory itemSellByTheStore.
	itemPrice _ testObjectsFactory itemSellByTheStorePrice.
	userName _ 'manuel'.
	item2 _ testObjectsFactory itemSellByTheStore2.
	item2Price _ testObjectsFactory itemSellByTheStore2Price.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	cart2Id _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface addToCart: cart2Id book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	internalRestInterface checkOutCart: cart2Id withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 13:41:33'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 13:41:33'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:44:53'!
test15canNotAddToCart30MinutesAfterLastAction
	
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:50:53' prior: 50569021!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	"hacer pasar 30 minutos hehe".
	
	self should: [internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1]
		raise: Error
		withExceptionDo: [:anError| self assert: anError errorMessage equals: InternalRestInterface amongusErrorMessage.
								self assert: (internalRestInterface listCart: cartId) equals: '']

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:51:06' prior: 50569026!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	"hacer pasar 30 minutos hehe".
	
	self should: [internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError errorMessage equals: InternalRestInterface amongusErrorMessage.
								self assert: (internalRestInterface listCart: cartId) equals: '']

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 13:52:39' prior: 50569045!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	"hacer pasar 30 minutos hehe".
	
	self should: [internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError errorMessage equals: InternalRestInterface expiredSessionErrorMessage.
								self assert: (internalRestInterface listCart: cartId) equals: '']

	
	! !

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 13:52:41'!
FAILURE!

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory autheticator internalRestInterface clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'MV 11/6/2022 13:52:58'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory autheticator internalRestInterface clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory autheticator internalRestInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'MV 11/6/2022 13:53:05'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory autheticator internalRestInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/6/2022 13:53:18'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds catalog authenticator lastId salesBook clients cartOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds catalog authenticator lastId salesBook clients cartOwners clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/6/2022 13:53:26'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds catalog authenticator lastId salesBook clients cartOwners clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/6/2022 13:54:03'!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog withClock: aClock  
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastId _ 0.
	salesBook _ OrderedCollection new.
	cartIds _ Dictionary new.
	clients _ Dictionary new.
	cartOwners _ Dictionary new.! !
!InternalRestInterface class methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:54:03' prior: 50556823!
withAuthenticator: aRestInterfaceTest withCatalog: aCatalog
	
	^self new initializeWithAuthenticator: aRestInterfaceTest withCatalog: aCatalog withClock: self! !

!methodRemoval: InternalRestInterface #initializeWithAuthenticator:withCatalog: stamp: 'MV 11/6/2022 13:54:03'!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastId _ 0.
	salesBook _ OrderedCollection new.
	cartIds _ Dictionary new.
	clients _ Dictionary new.
	cartOwners _ Dictionary new.!
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'MV 11/6/2022 13:54:29'!
withAuthenticator: aRestInterfaceTest withCatalog: aCatalog withClock: aClock 
	
	^self new initializeWithAuthenticator: aRestInterfaceTest withCatalog: aCatalog withClock: self! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:54:29' prior: 50556448!
test03createReturnsDifferentCartIdFromLastTime

	|cartId1 cartId2| 
	
		
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new withClock: self.
	
	cartId1 _ 	internalRestInterface createCartFor: 'pancrasio' authenticatedWith: 'pancreas'.
	cartId2 _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self deny: (cartId1 = cartId2)

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:54:29' prior: 50557314 overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: testObjectsFactory defaultCatalog withClock: self .! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:54:29' prior: 50557355!
test02createCartFailsWithInvalidAuth
	|cartId|
	
	autheticator _ [^false].	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new withClock: self.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 13:54:29' prior: 50556415!
test01createCartReturnsCartIdOfEmptyCartWithValidAuth

	|cartId| 
	
	internalRestInterface _ InternalRestInterface withAuthenticator: self withCatalog: Dictionary new withClock: self.
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !

!methodRemoval: InternalRestInterface class #withAuthenticator:withCatalog: stamp: 'MV 11/6/2022 13:54:29'!
withAuthenticator: aRestInterfaceTest withCatalog: aCatalog
	
	^self new initializeWithAuthenticator: aRestInterfaceTest withCatalog: aCatalog withClock: self!
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'MV 11/6/2022 13:54:35' prior: 50569177!
withAuthenticator: aRestInterfaceTest withCatalog: aCatalog withClock: aClock 
	
	^self new initializeWithAuthenticator: aRestInterfaceTest withCatalog: aCatalog withClock: aClock! !

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/6/2022 13:59:00'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds catalog authenticator lastId salesBook clients cartOwners clock cartsLastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'nil' stamp: 'MV 11/6/2022 13:58:57'!
assertCartIsNotExpired: aCartID

	clock currentTime - (cartsLastUpdate at: aCartID)! !

DateAndTime now!

DateAndTime now + DateAndTime now!

DateAndTime now + (Duration minutes:30)!
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/6/2022 14:02:40' prior: 50569144!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog withClock: aClock  
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastId _ 0.
	salesBook _ OrderedCollection new.
	cartIds _ Dictionary new.
	clients _ Dictionary new.
	cartOwners _ Dictionary new.
	cartsLastUpdate _ Dictionary new.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 14:06:05' prior: 50569275!
assertCartIsNotExpired: aCartID

	(clock currentTime - (Duration minutes: 30)) < (cartsLastUpdate at: aCartID) ifFalse: [self error: self class expiredCartErrorMessage]! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:06:14' prior: 50569065!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	"hacer pasar 30 minutos hehe".
	
	self should: [internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError errorMessage equals: InternalRestInterface expiredCartErrorMessage.
								self assert: (internalRestInterface listCart: cartId) equals: '']

	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:06:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:06:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:06:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:06:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:06:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:06:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:06:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:06:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:06:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:06:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:06:20'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:06:20'!
FAILURE!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:06:20'!
FAILURE!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:06:44' prior: 50556802!
addToCart: aCartId book: aBook ammount: anAmmount 
	
	self assertCartIsNotExpired: aCartId.
	
	(cartIds at: aCartId) add: anAmmount of: aBook.! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:07:10' prior: 50569431!
addToCart: aCartId book: aBook ammount: anAmmount 
	
	self assertCartIsNotExpired: aCartId.
	
	(cartIds at: aCartId) add: anAmmount of: aBook.
	
	self updateCartLastUpdate: aCartId! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:08:15'!
updateCartLastUpdate: aCartId

	cartsLastUpdate at: aCartId put: clock currentTime! !

----SNAPSHOT----(6 November 2022 14:08:26) CuisUniversity-5510.image priorSource: 7586937!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:08:43' prior: 50569448!
updateCartLastUpdate: aCartId

	cartsLastUpdate at: aCartId put: clock now! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 14:08:53' prior: 50569298!
assertCartIsNotExpired: aCartID

	(clock now - (Duration minutes: 30)) < (cartsLastUpdate at: aCartID) ifFalse: [self error: self class expiredCartErrorMessage]! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:09:26' prior: 50564390!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	cartOwners add: newId->client.
	
	self updateCartLastUpdate: newId
		
	^newId.! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:09:28' prior: 50569471!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	cartOwners add: newId->client.
	self updateCartLastUpdate: newId
		
	^newId.! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:09:54' prior: 50568456!
listCart: aCartId 
	
	self assertCartIsNotExpired: aCartId.
	self updateCartLastUpdate: aCartId.
	
	^(cartIds at: cartIds ifAbsent: [self error: self class invalidCartIdErrorMessage]) sendPrintListCartToInterface: self. 
	
	
	! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:10:02' prior: 50569505!
listCart: aCartId 
	
	self assertCartIsNotExpired: aCartId.
	self updateCartLastUpdate: aCartId.
	
	^(cartIds at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage]) sendPrintListCartToInterface: self. 
	
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:10:16'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:10:16'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:10:16'!
ERROR!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:10:16'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:10:17'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:10:17'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:10:17'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:10:17'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:10:17'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:10:17'!
ERROR!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:10:17'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:10:17'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:10:17'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:10:17'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:10:17'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:10:19'!
ERROR!

!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'MV 11/6/2022 14:10:49'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'testObjectsFactory autheticator internalRestInterface clockBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'nil' stamp: 'MV 11/6/2022 14:10:48'!
now

	^clockBehaviour value! !
!RestInterfaceTest methodsFor: 'setUp' stamp: 'MV 11/6/2022 14:11:06' prior: 50569203 overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: testObjectsFactory defaultCatalog withClock: self .
	clockBehaviour _ DateAndTime now.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 14:11:18' prior: 50569638!
now

	^clockBehaviour now! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:11:20'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:11:20'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:11:23'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:12:02'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:12:02'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:12:04'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:12:23'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:12:29'!
ERROR!
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/6/2022 14:13:36' prior: 50569284!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog withClock: aClock  
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastId _ 0.
	salesBook _ OrderedCollection new.
	cartIds _ Dictionary new.
	clients _ Dictionary new.
	cartOwners _ Dictionary new.
	cartsLastUpdate _ Dictionary new.
	clock _ aClock.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:13:38'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:13:38'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:13:40'!
ERROR!
!RestInterfaceTest methodsFor: 'setUp' stamp: 'MV 11/6/2022 14:14:19' prior: 50569643 overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: testObjectsFactory defaultCatalog withClock: self .
	clockBehaviour _ Time now.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:14:20'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:14:20'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:14:22'!
ERROR!
!RestInterfaceTest methodsFor: 'setUp' stamp: 'MV 11/6/2022 14:14:52' prior: 50569993 overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: testObjectsFactory defaultCatalog withClock: self .
	clockBehaviour _ Time.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:14:55'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:14:55'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:14:55'!
FAILURE!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:14:55'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:14:55'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:14:55'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:14:55'!
FAILURE!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:14:56'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:14:56'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:14:56'!
ERROR!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:14:56'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:14:56'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:14:56'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:14:56'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:14:56'!
ERROR!
!RestInterfaceTest methodsFor: 'setUp' stamp: 'MV 11/6/2022 14:15:11' prior: 50570109 overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: testObjectsFactory defaultCatalog withClock: self .
	clockBehaviour _ DateAndTime.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:15:12'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:15:12'!
FAILURE!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:15:12'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:15:12'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:15:12'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:15:12'!
FAILURE!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:15:12'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:15:12'!
ERROR!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:15:12'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:15:12'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:15:12'!
ERROR!
!RestInterfaceTest methodsFor: 'setUp' stamp: 'MV 11/6/2022 14:15:18' prior: 50570221 overrides: 16961394!
setUp

	testObjectsFactory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: testObjectsFactory defaultCatalog withClock: self .
	clockBehaviour _ DateAndTime now.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 14:15:38' prior: 50569655!
now

	^clockBehaviour! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:15:42'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:15:42'!
FAILURE!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:15:42'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:15:42'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:15:42'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:15:42'!
FAILURE!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:15:42'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:15:42'!
ERROR!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:15:42'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:15:42'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:15:42'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:15:43'!
ERROR!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:16:39' prior: 50569488!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	cartOwners add: newId->client.
	self updateCartLastUpdate: newId.
		
	^newId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:16:41'!
FAILURE!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:16:41'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:16:41'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:16:50'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:16:51'!
FAILURE!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:16:51'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:16:51'!
FAILURE!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:16:56'!
FAILURE!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:19:19' prior: 50569515!
listCart: aCartId 
	
	(cartIds includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorMessage].
	
	self assertCartIsNotExpired: aCartId.
	self updateCartLastUpdate: aCartId.
	
	^(cartIds at: aCartId) sendPrintListCartToInterface: self. 
	
	
	! !

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:19:20'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:19:21'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:19:21'!
FAILURE!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:19:21'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:20:32' prior: 50569307!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError errorMessage equals: InternalRestInterface expiredCartErrorMessage.
								self assert: (internalRestInterface listCart: cartId) equals: '']

	
	! !

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:20:34'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:20:38'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:20:38'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:20:38'!
ERROR!
!InternalRestInterface class methodsFor: 'error messages' stamp: 'MV 11/6/2022 14:20:43'!
expiredCartErrorMessage
	self shouldBeImplemented.! !
!InternalRestInterface class methodsFor: 'error messages' stamp: 'MV 11/6/2022 14:20:52' prior: 50570923!
expiredCartErrorMessage
	
	^'Expired cart'! !

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:20:53'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:20:56'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:20:56'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:20:56'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:21:09' prior: 50570794!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage.
								self assert: (internalRestInterface listCart: cartId) equals: '']

	
	! !

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:21:10'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:21:12'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:21:12'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:21:12'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:21:52' prior: 50571040!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage.]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:21:54' prior: 50571169!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:21:55'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:21:56'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:21:57'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:21:57'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:22:34'!
test15canNotListCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !

!testRun: #RestInterfaceTest #test15canNotListCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:22:41'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotListCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:22:41'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:22:47'!
test16canNotListCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !

!methodRemoval: RestInterfaceTest #test15canNotListCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:22:47'!
test15canNotListCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:23:04'!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:23:15' prior: 50571422!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:23:47' prior: 50571439!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	internalRestInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore ammount: 1.
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [	internalRestInterface checkOutCart: cartId withCard: testObjectsFactory notExpiredCreditCard through: self on: Date today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:23:53'!
FAILURE!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:23:53'!
FAILURE!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:24:46' prior: 50568350!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	self assertCartIsNotExpired: cartId.
	
	cart _ cartIds at: cartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	
	cashier _ Cashier toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart sendAddToPurchasesTo: self ofClient: (cartOwners at: cartId).
		
	cashier checkOut.
	
	self updateCartLastUpdate: cartId.
	
	! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:25:48' prior: 50571489!
checkOutCart: cartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	cart _ cartIds at: cartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	
	self assertCartIsNotExpired: cartId.	
	
	cashier _ Cashier toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart sendAddToPurchasesTo: self ofClient: (cartOwners at: cartId).
		
	cashier checkOut.
	
	self updateCartLastUpdate: cartId.
	
	! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:25:52' prior: 50571507!
checkOutCart: aCartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	cart _ cartIds at: aCartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	
	self assertCartIsNotExpired: aCartId.	
	
	cashier _ Cashier toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart sendAddToPurchasesTo: self ofClient: (cartOwners at: aCartId).
		
	cashier checkOut.
	
	self updateCartLastUpdate: aCartId.
	
	! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:27:33' prior: 50571525!
checkOutCart: aCartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	cart _ cartIds at: aCartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	
	self assertCartIsNotExpired: aCartId.	
	
	cashier _ Cashier toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart sendAddToPurchasesTo: self ofClient: (cartOwners at: aCartId).
		
	cashier checkOut.
	
	self updateCartLastUpdate: aCartId.
	
	! !
!InternalRestInterface methodsFor: 'cart validation' stamp: 'MV 11/6/2022 14:28:13'!
validateCart: aCartId

	cartIds at: aCartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	self assertCartIsNotExpired: aCartId.! !
!InternalRestInterface methodsFor: 'cart validation' stamp: 'MV 11/6/2022 14:28:32'!
validateCartId: aCartId

	cartIds at: aCartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	self assertCartIsNotExpired: aCartId.! !

!methodRemoval: InternalRestInterface #validateCart: stamp: 'MV 11/6/2022 14:28:32'!
validateCart: aCartId

	cartIds at: aCartId ifAbsent: [self error: self class nonExistentCartIDErrorMessage].
	self assertCartIsNotExpired: aCartId.!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:28:50' prior: 50571544!
checkOutCart: aCartId withCard: aCard through: aMerchantProcessor on: aDate
	
	|cashier cart|
	
	self validateCartId: aCartId.
	
	cart _ cartIds at: aCartId.
	
	cashier _ Cashier toCheckout: cart charging: aCard throught: aMerchantProcessor on: aDate registeringOn: salesBook.
	
	cart sendAddToPurchasesTo: self ofClient: (cartOwners at: aCartId).
		
	cashier checkOut.
	
	self updateCartLastUpdate: aCartId.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:28:51'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:28:51'!
PASSED!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:29:11' prior: 50570675!
listCart: aCartId 
	
	self validateCartId: aCartId.
	self updateCartLastUpdate: aCartId.
	
	^(cartIds at: aCartId) sendPrintListCartToInterface: self. 
	
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:29:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:29:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:29:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:29:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:29:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:29:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:29:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:29:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:29:14'!
FAILURE!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:29:14'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:29:14'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/6/2022 14:30:46' prior: 50556509!
test07listCartFailsWithInvalidCartId

	|listCartOutput|
	 
	listCartOutput _ 'test string'.	
	internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	"cartId es 0 por ser el primer cart de la interfaz"
	
	self should: [listCartOutput _ internalRestInterface listCart: 666] raise: Error
	withExceptionDo:[:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage.
						  self assert: listCartOutput equals: 'test string'].

	
	! !

!methodRemoval: InternalRestInterface class #invalidCartIdErrorMessage stamp: 'MV 11/6/2022 14:30:51'!
invalidCartIdErrorMessage
	^'supplied cartId is not valid'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:30:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:30:54'!
PASSED!

----SNAPSHOT----(6 November 2022 14:30:58) CuisUniversity-5510.image priorSource: 7609685!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:34:46' prior: 50570453!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	newId _ self createAndAddNewCartId.
	self updateCartLastUpdate: newId.
		
	^newId.! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:36:33' prior: 50572072!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	newId _ lastId +1.
	lastId _ newId.
	cartIds add: newId->cart.
	cartOwners add: newId->client.
	self updateCartLastUpdate: newId.
		
	^newId.! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:36:40' prior: 50572087!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart newCartId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	newCartId _ lastId +1.
	lastId _ newCartId.
	cartIds add: newCartId->cart.
	cartOwners add: newCartId->client.
	self updateCartLastUpdate: newCartId.
		
	^newCartId.! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:36:44' prior: 50572104!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart cartId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	cartId _ lastId +1.
	lastId _ cartId.
	cartIds add: cartId->cart.
	cartOwners add: cartId->client.
	self updateCartLastUpdate: cartId.
		
	^cartId.! !

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/6/2022 14:36:56'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds catalog authenticator lastCartId salesBook clients cartOwners clock cartsLastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 14:36:56' prior: 50572122!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart cartId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	cartId _ lastCartId +1.
	lastCartId _ cartId.
	cartIds add: cartId->cart.
	cartOwners add: cartId->client.
	self updateCartLastUpdate: cartId.
		
	^cartId.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'MV 11/6/2022 14:36:56' prior: 50569875!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog withClock: aClock  
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastCartId _ 0.
	salesBook _ OrderedCollection new.
	cartIds _ Dictionary new.
	clients _ Dictionary new.
	cartOwners _ Dictionary new.
	cartsLastUpdate _ Dictionary new.
	clock _ aClock.! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:37:21' prior: 50572150!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart cartId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	cartId _ self newCartId.
	cartIds add: cartId->cart.
	cartOwners add: cartId->client.
	self updateCartLastUpdate: cartId.
		
	^cartId.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:37:24'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:37:24'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:37:24'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:37:24'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:37:24'!
ERROR!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:37:25'!
ERROR!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:37:33'!
newCartId
	self shouldBeImplemented.! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/6/2022 14:38:02' prior: 50572265!
newCartId
	
	|newId|
	
	newId _ lastCartId + 1.
	lastCartId _ newId.
	^newId.! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:38:04'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/6/2022 14:38:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/6/2022 14:38:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/6/2022 14:38:07'!
PASSED!

----SNAPSHOT----(6 November 2022 14:39:29) CuisUniversity-5510.image priorSource: 7693361!

----SNAPSHOT----(6 November 2022 14:43:01) CuisUniversity-5510.image priorSource: 7703562!

----QUIT----(6 November 2022 14:43:33) CuisUniversity-5510.image priorSource: 7703654!

----STARTUP---- (7 November 2022 10:59:41) as C:\Lautaro Disco C\Programas Varios\CuisUniversity\CuisUniversity-5510.image!


!classDefinition: #RestInterfaceTest category: 'TusLibros' stamp: 'MV 11/7/2022 11:00:31'!
TestCase subclass: #RestInterfaceTest
	instanceVariableNames: 'factory autheticator internalRestInterface clockBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:00:31' prior: 50571459!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:00:31' prior: 50571188!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:00:31' prior: 50570333 overrides: 16961394!
setUp

	factory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: factory defaultCatalog withClock: self .
	clockBehaviour _ DateAndTime now.! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:00:31' prior: 50563667!
test11canNotCheckOutWithNonexistentCartID

	self should: [	internalRestInterface checkOutCart: 'Non-existent Cart ID' withCard: factory notExpiredCreditCard through: self on: Date today]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage]
	
	
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:00:31' prior: 50568930!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	|cartId cart2Id userName item item2 itemPrice item2Price| 
		
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	userName _ 'manuel'.
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	cart2Id _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface addToCart: cart2Id book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	internalRestInterface checkOutCart: cart2Id withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:00:31' prior: 50563544!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName item item2 itemPrice item2Price| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	internalRestInterface addToCart: cartId book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:00:31' prior: 50556479!
test05addToCartCorrectlyAddsSeveralBooksToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore2 ammount: 3.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', factory itemSellByTheStore , ' 2|' , ' ', factory itemSellByTheStore2 , ' 3|'.

	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:00:31' prior: 50556464!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', factory itemSellByTheStore , ' 1|'.

	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:00:31' prior: 50562615!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName item itemPrice| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|1|', itemPrice asString).
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:00:52' prior: 50572579!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName itemPrice| 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	itemPrice _ factory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (factory itemSellByTheStore,'|1|', itemPrice asString).
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:00:57' prior: 50572601!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName | 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (factory itemSellByTheStore,'|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:00:59'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:00:59'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:01:53' prior: 50572623!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName itemAmmount | 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	itemAmmount _ 1.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: itemAmmount.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (factory itemSellByTheStore,'|',itemAmmount asString,'|', factory itemSellByTheStorePrice asString).
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:01:57' prior: 50572710!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName itemAmmount | 
		
	userName _ 'manuel'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	itemAmmount _ 1.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: itemAmmount.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') 
		equals: (factory itemSellByTheStore,'|',itemAmmount asString,'|', factory itemSellByTheStorePrice asString).
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:02:24' prior: 50564115!
test12canNotListPurchasesOfNonexistentClientID
		
	self should: [internalRestInterface listPurchases: 'nonExistentClient' password: 'nonExistentClientsPassword']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface nonExistentClientErrorMessage]
	
	
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:02:27' prior: 50564306!
test13canNotListPurchasesWithInvalidAuth
	
	autheticator _ false.
	
	self should: [internalRestInterface listPurchases: 'user1' password: 'wrongPassword']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage]
	
	
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:03:16' prior: 50572431!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:03:20' prior: 50571389!
test16canNotListCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:03:23' prior: 50572800!
test16canNotListCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'clock protocol' stamp: 'MV 11/7/2022 11:04:06' prior: 50570345!
now

	^clockBehaviour now! !
!RestInterfaceTest methodsFor: 'setUp' stamp: 'MV 11/7/2022 11:04:11' prior: 50572450 overrides: 16961394!
setUp

	factory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: factory defaultCatalog withClock: self .
	clockBehaviour _ DateAndTime.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:04:13'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:04:13'!
ERROR!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:04:13'!
ERROR!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:04:13'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:04:34'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:04:51' prior: 50572782!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	clockBehaviour _ DateAndTime now + (Duration minutes: 30).
	
	self should: [internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:04:57' prior: 50572817!
test16canNotListCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	clockBehaviour _ DateAndTime now + (Duration minutes: 30).
	
	self should: [internalRestInterface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:04:59' prior: 50572409!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
	
	clockBehaviour _ DateAndTime now + (Duration minutes: 30).
	
	self should: [	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:05:01'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:05:02'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:05:02'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:05:02'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:05:02'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:05:02'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:05:02'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:05:02'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:05:02'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:05:02'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:05:02'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:05:02'!
ERROR!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:05:02'!
ERROR!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:05:02'!
ERROR!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:05:03'!
ERROR!
!RestInterfaceTest methodsFor: 'clock protocol' stamp: 'MV 11/7/2022 11:05:59' prior: 50572834!
now

	^clockBehaviour! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:03:16' prior: 50572961!
test15canNotAddToCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:03:23' prior: 50572979!
test16canNotListCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [internalRestInterface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:00:31' prior: 50572996!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'setUp' stamp: 'MV 11/7/2022 11:06:33' prior: 50572839 overrides: 16961394!
setUp

	factory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: factory defaultCatalog withClock: self .
	clockBehaviour _ DateAndTime now.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:06:34'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:06:35'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:06:35'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:08:37' prior: 50573169!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	"internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1."
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:38'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:38'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:08:41' prior: 50573309!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:42'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:43'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:08:43'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:10:12'!
assertCartIsExpired30MinutesAfter: aBlock
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: aBlock
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:10:38' prior: 50573545!
assertCartIsExpired30MinutesAfter: aBlock
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [aBlock value: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:11:26' prior: 50573134!
test15canNotAddToCart30MinutesAfterLastAction
		
	self assertCartIsExpired30MinutesAfter: [:cartId| internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1].
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:11:47' prior: 50573397!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:11:48'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:12:39' prior: 50573152!
test16canNotListCart30MinutesAfterLastAction
	
	self assertCartIsExpired30MinutesAfter: [:cartId | internalRestInterface listCart: cartId]
	
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:12:44' prior: 50573577!
test15canNotAddToCart30MinutesAfterLastAction
		
	self assertCartIsExpired30MinutesAfter: [:cartId| internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1]
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:13:02' prior: 50573586!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	self assertCartIsExpired30MinutesAfter: [:cartId | internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today]! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:13:05'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:13:05'!
PASSED!
!RestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 11:15:50'!
assertExpiredCartRaisesExpiredErrorWhenDoing: aBlock
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [aBlock value: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:15:50' prior: 50573609!
test16canNotListCart30MinutesAfterLastAction
	
	self assertExpiredCartRaisesExpiredErrorWhenDoing: [:cartId | internalRestInterface listCart: cartId]
	
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:15:50' prior: 50573617!
test15canNotAddToCart30MinutesAfterLastAction
		
	self assertExpiredCartRaisesExpiredErrorWhenDoing: [:cartId| internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1]
	
	! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:15:50' prior: 50573626!
test17canNotCheckOutCart30MinutesAfterLastAction
	
	self assertExpiredCartRaisesExpiredErrorWhenDoing: [:cartId | internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today]! !

!methodRemoval: RestInterfaceTest #assertCartIsExpired30MinutesAfter: stamp: 'MV 11/7/2022 11:15:50'!
assertCartIsExpired30MinutesAfter: aBlock
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 30).
	
	self should: [aBlock value: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:18:13' prior: 50569234!
test01createCartReturnsCartIdOfEmptyCartWithValidAuth

	|cartId| 
	
	cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:18:14'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:18:14'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:18:20' prior: 50569214!
test02createCartFailsWithInvalidAuth
	|cartId|
	
	autheticator _ [^false].	
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:18:55' prior: 50573837!
test02createCartFailsWithInvalidAuth
	|cartId|
	
	autheticator _ false.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: 'usuario' authenticatedWith: 'contraseña'] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:18:55'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:18:55'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:19:01' prior: 50569186!
test03createReturnsDifferentCartIdFromLastTime

	|cartId1 cartId2| 
	
		
	cartId1 _ 	internalRestInterface createCartFor: 'pancrasio' authenticatedWith: 'pancreas'.
	cartId2 _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self deny: (cartId1 = cartId2)

	! !

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:19:02'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:19:02'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:19:16' prior: 50573935!
test03createReturnsDifferentCartIdFromLastTime

	|cartId1 cartId2| 
			
	cartId1 _ 	internalRestInterface createCartFor: 'pancrasio' authenticatedWith: 'pancreas'.
	cartId2 _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self deny: (cartId1 = cartId2)

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:19:37' prior: 50574014!
test03createReturnsDifferentCartIdFromLastTime

	|cartId1 cartId2| 
			
	cartId1 _ 	internalRestInterface createCartFor: 'aValidUser1' authenticatedWith: 'user1Password'.
	cartId2 _ internalRestInterface createCartFor: 'aValidUser2' authenticatedWith: 'user2Password'. 
	
	self deny: (cartId1 = cartId2)

	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:19:42'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:19:43'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:21:35' prior: 50572564!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', factory itemSellByTheStore , ' 1|'.

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:21:40' prior: 50572545!
test05addToCartCorrectlyAddsSeveralBooksToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore2 ammount: 3.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', factory itemSellByTheStore , ' 2|' , ' ', factory itemSellByTheStore2 , ' 3|'.

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:21:47' prior: 50556499!
test06listCartReturnsEmptyStringOnEmptyCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 

	
	self assert: (internalRestInterface listCart: cartId) equals: ''.

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:21:52' prior: 50574135!
test06listCartReturnsEmptyStringOnEmptyCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	self assert: (internalRestInterface listCart: cartId) equals: ''.

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:22:11'!
test06listCartOfEmptyCartReturnsEmptyString

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	self assert: (internalRestInterface listCart: cartId) equals: ''.

	
	! !

!methodRemoval: RestInterfaceTest #test06listCartReturnsEmptyStringOnEmptyCart stamp: 'MV 11/7/2022 11:22:11'!
test06listCartReturnsEmptyStringOnEmptyCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	self assert: (internalRestInterface listCart: cartId) equals: ''.

	
	!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:22:21' prior: 50574156!
test06listCartOfEmptyCartReturnsEmptyString

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.

	
	! !

!testRun: #RestInterfaceTest #test06listCartOfEmptyCartReturnsEmptyString stamp: 'MV 11/7/2022 11:22:22'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartOfEmptyCartReturnsEmptyString stamp: 'MV 11/7/2022 11:22:24'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:22:32'!
test06listCartOfEmptyCartIsEmpty

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.

	
	! !

!methodRemoval: RestInterfaceTest #test06listCartOfEmptyCartReturnsEmptyString stamp: 'MV 11/7/2022 11:22:32'!
test06listCartOfEmptyCartReturnsEmptyString

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'. 
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.

	
	!

!testRun: #RestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 11:22:33'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:22:51' prior: 50571829!
test07listCartFailsWithInvalidCartId

	|listCartOutput|
	 
	listCartOutput _ 'test string'.	
	internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self should: [listCartOutput _ internalRestInterface listCart: 666] raise: Error
	withExceptionDo:[:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage.
						  self assert: listCartOutput equals: 'test string'].

	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:23:00' prior: 50574218!
test07listCartFailsWithInvalidCartId

	|expectedListCartOutput|
	 
	expectedListCartOutput _ 'test string'.	
	internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self should: [expectedListCartOutput _ internalRestInterface listCart: 666] raise: Error
	withExceptionDo:[:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage.
						  self assert: expectedListCartOutput equals: 'test string'].

	
	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:23:09'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 11:23:09'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:23:38' prior: 50573760!
test01createCartReturnsCartIdOfEmptyCartWithValidAuth

	|cartId| 
	
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: 'aValidPassword'.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 11:23:42'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'MV 11/7/2022 11:24:43'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(7 November 2022 11:24:48) CuisUniversity-5510.image priorSource: 7703746!

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'card'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'MV 11/7/2022 11:27:07'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'card'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'MV 11/7/2022 11:27:32'!
test01cardsNumberMustBe16CharactersLong

	self should: [CreditCard numbered: 1  expiring: (Month month: 2 year: 2024 ) ownedBy: 'Falsulio' ]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidCardNumberErrorMessage ].
		
	self should: [CreditCard numbered: 1111111111111111111111  expiring: (Month month: 2 year: 2024 ) ownedBy: 'Falsulio' ]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidCardNumberErrorMessage ].! !
!CreditCard class methodsFor: 'nil' stamp: 'MV 11/7/2022 11:30:38'!
invalidCardNumberErrorMessage

	^'Card number must be a 16 digits long number'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'MV 11/7/2022 11:30:53'!
numbered: anInteger expiring: aMonth ownedBy: aNameString  

	(anInteger asString size = 16 and: (anInteger isKindOf: Integer) )ifFalse: [self error: self invalidCardNumberErrorMessage].
	(self isInvalidName: aNameString) ifTrue: [self error: self invalidNameErrorMessage].
	(aMonth isKindOf: Month) ifFalse: [self error: self invalidExpirationErrorMessage].
	
	^self new initializeNumbered: anInteger expiring: aMonth ownedBy: aNameString ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MV 11/7/2022 11:32:24' prior: 50556915!
expiredCreditCard
	
	^CreditCard numbered: 1111222233334444 expiring: (Month month: today monthIndex year: today yearNumber - 1) ownedBy: 'expiredCreditCardOwner'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'MV 11/7/2022 11:33:02' prior: 50556922!
notExpiredCreditCard
	
	^CreditCard numbered: 1111222233334444 expiring: (Month month: today monthIndex year: today yearNumber + 1) ownedBy: 'notExpiredCreditCardOwner'! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'MV 11/7/2022 11:33:16'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!CreditCard class methodsFor: 'instance creation' stamp: 'MV 11/7/2022 11:33:32'!
numbered: anInteger expiringOn: aMonth ownedBy: aNameString  

	(anInteger asString size = 16 and: (anInteger isKindOf: Integer) )ifFalse: [self error: self invalidCardNumberErrorMessage].
	(self isInvalidName: aNameString) ifTrue: [self error: self invalidNameErrorMessage].
	(aMonth isKindOf: Month) ifFalse: [self error: self invalidExpirationErrorMessage].
	
	^self new initializeNumbered: anInteger expiring: aMonth ownedBy: aNameString ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:33:32' prior: 50574355!
test01cardsNumberMustBe16CharactersLong

	self should: [CreditCard numbered: 1  expiringOn: (Month month: 2 year: 2024 ) ownedBy: 'Falsulio' ]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidCardNumberErrorMessage ].
		
	self should: [CreditCard numbered: 1111111111111111111111  expiringOn: (Month month: 2 year: 2024 ) ownedBy: 'Falsulio' ]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidCardNumberErrorMessage ].! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:33:32' prior: 50574406!
notExpiredCreditCard
	
	^CreditCard numbered: 1111222233334444 expiringOn: (Month month: today monthIndex year: today yearNumber + 1) ownedBy: 'notExpiredCreditCardOwner'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 11:33:32' prior: 50574397!
expiredCreditCard
	
	^CreditCard numbered: 1111222233334444 expiringOn: (Month month: today monthIndex year: today yearNumber - 1) ownedBy: 'expiredCreditCardOwner'! !

!methodRemoval: CreditCard class #numbered:expiring:ownedBy: stamp: 'MV 11/7/2022 11:33:32'!
numbered: anInteger expiring: aMonth ownedBy: aNameString  

	(anInteger asString size = 16 and: (anInteger isKindOf: Integer) )ifFalse: [self error: self invalidCardNumberErrorMessage].
	(self isInvalidName: aNameString) ifTrue: [self error: self invalidNameErrorMessage].
	(aMonth isKindOf: Month) ifFalse: [self error: self invalidExpirationErrorMessage].
	
	^self new initializeNumbered: anInteger expiring: aMonth ownedBy: aNameString !
!CreditCard class methodsFor: 'error message' stamp: 'MV 11/7/2022 11:33:41'!
invalidExpirationErrorMessage

	^'Invalid card expiration'! !
!CreditCard class methodsFor: 'error message' stamp: 'MV 11/7/2022 11:33:46'!
invalidNameErrorMessage
	
	^'Card name can not be empty, nor contain only spaces, nor contain invalid characters'! !
!CreditCard class methodsFor: 'nil' stamp: 'MV 11/7/2022 11:33:54' prior: 50574495!
invalidNameErrorMessage
	
	^'Card name can not be empty, nor contain only spaces, nor contain invalid characters'! !
!CreditCard class methodsFor: 'error message' stamp: 'MV 11/7/2022 11:34:04'!
isInvalidName: aNameString

	^aNameString isEmpty or: (self nameIsAllSpaces: aNameString) or: (self nameContainsInvalidCharacters: aNameString)! !
!CreditCard class methodsFor: 'instance creation assertions' stamp: 'MV 11/7/2022 11:34:25'!
nameContainsInvalidCharacters: aNameString

	'/*{}+-[].,-_^?¿!!%$#"/~`' do: [:invalidCharacter| (aNameString includes: invalidCharacter) ifTrue: [^true]].
	^false.! !
!CreditCard class methodsFor: 'instance creation assertions' stamp: 'MV 11/7/2022 11:34:30'!
nameIsAllSpaces: aNameString

	^ (aNameString occurrencesOf: ' 'first) = aNameString size! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MV 11/7/2022 11:34:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration cardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'nil' stamp: 'MV 11/7/2022 11:34:47' overrides: 16901772!
= aCard

	^cardNumber = aCard cardNumber! !
!CreditCard methodsFor: 'nil' stamp: 'MV 11/7/2022 11:35:22'!
cardNumber

	^cardNumber ! !
!CreditCard methodsFor: 'initialization' stamp: 'MV 11/7/2022 11:35:39'!
initializeNumbered: aString expiring: aMonth ownedBy: aName  
	
	cardNumber := aString.
	expiration := aMonth.! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'MV 11/7/2022 11:35:47'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 11:36:15'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 11:36:28'!
test02cardsNumberMustBeANumber

	self should: [CreditCard numbered: 'aaaaaaaaaaaaaaaa'  expiring: (Month month: 2 year: 2024 ) ownedBy: 'Falsulio']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidCardNumberErrorMessage].! !

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 11:36:37'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 11:36:37'!
FAILURE!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 11:36:37'!
FAILURE!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 11:36:59'!
FAILURE!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 11:36:59'!
FAILURE!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 11:37:42'!
FAILURE!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 11:37:42'!
FAILURE!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:04:34'!
FAILURE!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:04:34'!
FAILURE!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 12:05:34'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:05:34'!
FAILURE!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:05:34'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:06:03' prior: 50574561!
test02cardsNumberMustBeANumber

	self should: [CreditCard numbered: 'aaaaaaaaaaaaaaaa'  expiringOn: (Month month: 2 year: 2024 ) ownedBy: 'Falsulio']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidCardNumberErrorMessage].! !

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 12:06:05'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:06:05'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:06:18'!
test03cardsNameCanNotBeEmpty

	self should: [CreditCard numbered: 1111222233334444 expiringOn: (Month month: 2 year: 2024 ) ownedBy: '']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidNameErrorMessage].! !
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:06:28' prior: 50574629!
test03cardsNameCanNotBeEmpty

	self should: [CreditCard numbered: 1111222233334444 expiringOn: (Month month: 2 year: 2024 ) ownedBy: '']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidNameErrorMessage].! !
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:06:51'!
test04cardsNameCanNotBeAllSpaces

	self should: [CreditCard numbered: 1111222233334444 expiring: (Month month: 2 year: 2024 ) ownedBy: '    ']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidNameErrorMessage].! !
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:06:55' prior: 50574651!
test04cardsNameCanNotBeAllSpaces

	self should: [CreditCard numbered: 1111222233334444 expiringOn: (Month month: 2 year: 2024 ) ownedBy: '    ']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidNameErrorMessage].! !

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 12:06:57'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:06:57'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 12:06:57'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 12:06:57'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:07:03'!
test05cardsNameCanNotContainInvalidCharacters

	self should: [CreditCard numbered: 1111222233334444 expiring: (Month month: 2 year: 2024 ) ownedBy: '/*/-_-~']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidNameErrorMessage].! !
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:07:07' prior: 50574687!
test05cardsNameCanNotContainInvalidCharacters

	self should: [CreditCard numbered: 1111222233334444 expiringOn: (Month month: 2 year: 2024 ) ownedBy: '/*/-_-~']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidNameErrorMessage].! !

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 12:07:08'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 12:07:08'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:07:08'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 12:07:08'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 12:07:08'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 12:07:08'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:07:16'!
test06cardsExpirationMustBeAMonth

	self should: [CreditCard numbered: 1111222233334444 expiringOn: 'Pasado mañana' ownedBy: 'Clamudio']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidExpirationErrorMessage].! !
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:07:41' prior: 50574730!
test06cardsExpirationMustBeAMonth

	self should: [CreditCard numbered: 1111222233334444 expiringOn: 'Pasado mañana' ownedBy: 'Clamudio']
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidExpirationErrorMessage].! !

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 12:07:42'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 12:07:44'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:07:44'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 12:07:44'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 12:07:44'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 12:07:44'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 12:07:44'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:09:07'!
assertInvalidNameErrorIsRaisedWhenCreatingCardWithName: aNameString

	self should: [CreditCard numbered: 1111222233334444 expiringOn: (Month month: 2 year: 2024 ) ownedBy: aNameString]
		raise: Error
		withExceptionDo: [:anError| self assert: anError messageText equals: CreditCard invalidNameErrorMessage].! !
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:09:28' prior: 50574640!
test03cardsNameCanNotBeEmpty

	self assertInvalidNameErrorIsRaisedWhenCreatingCardWithName: ''! !

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 12:09:30'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:09:44' prior: 50574663!
test04cardsNameCanNotBeAllSpaces

	self assertInvalidNameErrorIsRaisedWhenCreatingCardWithName: '      '! !

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 12:09:45'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 12:09:45'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:09:45'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 12:09:45'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 12:09:45'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 12:09:45'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 12:09:45'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:10:00' prior: 50574699!
test05cardsNameCanNotContainInvalidCharacters

	self assertInvalidNameErrorIsRaisedWhenCreatingCardWithName: '/*/-_-~'! !

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 12:10:01'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 12:10:01'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:10:01'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 12:10:01'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 12:10:01'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 12:10:01'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 12:10:01'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 12:23:21'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:23:21'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 12:23:21'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 12:23:21'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 12:23:21'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 12:23:21'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:31:26'!
test18addToCartExtendsCartExpiration
	
	|cartId user userPassword| 
		
	user _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: user authenticatedWith: userPassword. 
		
	clockBehaviour _ clockBehaviour + (Duration minutes: 15).
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 25).
	
	self assert: (internalRestInterface listPurchases: user password: userPassword )
	
	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:32:40' prior: 50574876!
test18addToCartExtendsCartExpiration
	
	|cartId userName userPassword| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
		
	clockBehaviour _ clockBehaviour + (Duration minutes: 15).
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 25).
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: userName password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:32:42'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:32:50' prior: 50574895!
test18addToCartExtendsCartExpiration
	
	|cartId userName userPassword| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
		
	clockBehaviour _ clockBehaviour + (Duration minutes: 15).
	
	"internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 ."
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 25).
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: userName password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:32:51'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:33:16' prior: 50574925!
test18addToCartExtendsCartExpiration
	
	|cartId userName userPassword| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
		
	clockBehaviour _ clockBehaviour + (Duration minutes: 15).
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 25).
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: userName password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:33:17'!
PASSED!

!testRun: #RestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:33:17'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:33:28' prior: 50574955!
test18addToCartExtendsCartExpiration
	
	|cartId userName userPassword| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
		
	clockBehaviour _ clockBehaviour + (Duration minutes: 15).
	
	"internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 ."
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 25).
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: userName password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:33:30'!
ERROR!

!testRun: #RestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:33:30'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:33:38' prior: 50575050!
test18addToCartExtendsCartExpiration
	
	|cartId userName userPassword| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
		
	clockBehaviour _ clockBehaviour + (Duration minutes: 15).
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	clockBehaviour _ clockBehaviour + (Duration minutes: 25).
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: userName password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:33:44'!
PASSED!
!RestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 12:35:39'!
moveClockForwardOneExpirationDuration

	^ clockBehaviour _ clockBehaviour + (Duration minutes: 30)! !
!RestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 12:35:39' prior: 50573698!
assertExpiredCartRaisesExpiredErrorWhenDoing: aBlock
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: 'manuel' authenticatedWith: 'asdsadasd'. 
	
	self moveClockForwardOneExpirationDuration.
	
	self should: [aBlock value: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError| self assert: anError messageText equals: InternalRestInterface expiredCartErrorMessage]

	
	! !
!RestInterfaceTest methodsFor: 'clock protocol' stamp: 'MV 11/7/2022 12:35:59'!
moveClockForwardHalfAExpirationDuration

	^ clockBehaviour _ clockBehaviour + (Duration minutes: 15)! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:36:17' prior: 50575083!
test18addToCartExtendsCartExpiration
	
	|cartId userName userPassword| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: userName password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:36:19'!
PASSED!

!testRun: #RestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:36:19'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:36:31' prior: 50575141!
test18addToCartExtendsCartExpiration
	
	|cartId userName userPassword| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	"internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 ."
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: userName password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #RestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:36:32'!
ERROR!

!testRun: #RestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:36:32'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:36:40' prior: 50575232!
test18addToCartExtendsCartExpiration
	
	|cartId userName userPassword| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: userName password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!classRenamed: #RestInterfaceTest as: #InternalRestInterfaceTest stamp: 'MV 11/7/2022 12:37:29'!
Smalltalk renameClassNamed: #RestInterfaceTest as: #InternalRestInterfaceTest!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:37:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:37:30'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:38:15' prior: 50572733!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName userPassword itemAmmount | 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	itemAmmount _ 1.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: itemAmmount.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: userPassword) 
		equals: (factory itemSellByTheStore,'|',itemAmmount asString,'|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:38:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:38:16'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:39:09' prior: 50572510!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName userPassword item item2 itemPrice item2Price| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	internalRestInterface addToCart: cartId book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:40:40' prior: 50575462!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName userPassword item item2 itemPrice item2Price| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	internalRestInterface addToCart: cartId book: item2 ammount: 1.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|1|', item2, '|1|', (item2Price+ itemPrice )asString).
	
	
	! !

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:40:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:40:42'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:39:09' prior: 50575499!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName userPassword item item2 itemPrice item2Price| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	internalRestInterface addToCart: cartId book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:41:38' prior: 50575611!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName userPassword item item2 itemPrice item2Price ammount| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	ammount _ 2.
	
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	internalRestInterface addToCart: cartId book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:42:23' prior: 50575648!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName userPassword item item2 itemPrice item2Price ammount| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	ammount _ 2.
	
	internalRestInterface addToCart: cartId book: item ammount: ammount.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	internalRestInterface addToCart: cartId book: item2 ammount: ammount.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password')
		equals: (item,'|',ammount asString,'|', item2, '|',ammount asString,'|', (item2Price * ammount + (itemPrice * ammount))asString).
	
	
	! !

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:42:25'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:43:29'!
addToCartAndCheckout: item item: ammount ammount: cartId

	internalRestInterface addToCart: cartId book: item ammount: ammount.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:43:29' prior: 50575686!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName userPassword item item2 itemPrice item2Price ammount| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	ammount _ 2.
	
	self addToCartAndCheckout: item item: ammount ammount: cartId.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	internalRestInterface addToCart: cartId book: item2 ammount: ammount.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password')
		equals: (item,'|',ammount asString,'|', item2, '|',ammount asString,'|', (item2Price * ammount + (itemPrice * ammount))asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:44:41' prior: 50575741!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName userPassword item item2 itemPrice item2Price ammount| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	ammount _ 2.
	
	self addToCartAndCheckout: item item: ammount ammount: cartId.
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	self addToCartAndCheckout: item2 item: ammount ammount: cartId.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password')
		equals: (item,'|',ammount asString,'|', item2, '|',ammount asString,'|', (item2Price * ammount + (itemPrice * ammount))asString).
	
	
	! !

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:44:59'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:45:58'!
addToCartAndCheckout: item ammount: ammount toCart: cartId

	internalRestInterface addToCart: cartId book: item ammount: ammount.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 12:45:58' prior: 50575777!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName userPassword item item2 itemPrice item2Price ammount| 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	ammount _ 2.
	
	self addToCartAndCheckout: item ammount: ammount toCart: cartId.
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	self addToCartAndCheckout: item2 ammount: ammount toCart: cartId.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password')
		equals: (item,'|',ammount asString,'|', item2, '|',ammount asString,'|', (item2Price * ammount + (itemPrice * ammount))asString).
	
	
	! !

!methodRemoval: InternalRestInterfaceTest #addToCartAndCheckout:item:ammount: stamp: 'MV 11/7/2022 12:45:58'!
addToCartAndCheckout: item item: ammount ammount: cartId

	internalRestInterface addToCart: cartId book: item ammount: ammount.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:46:50' prior: 50575366!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName userPassword itemAmmount | 
		
	userName _ 'aValidUser'.
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	itemAmmount _ 1.
	
	self addToCartAndCheckout: factory itemSellByTheStore ammount: itemAmmount toCart: cartId.
	
	self assert: (internalRestInterface listPurchases: userName password: userPassword) 
		equals: (factory itemSellByTheStore,'|',itemAmmount asString,'|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:46:51'!
PASSED!

!classDefinition: #InternalRestInterfaceTest category: 'TusLibros' stamp: 'MV 11/7/2022 12:47:25'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'factory autheticator internalRestInterface clockBehaviour defaultUsername'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalRestInterfaceTest category: 'TusLibros' stamp: 'MV 11/7/2022 12:47:26'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'factory autheticator internalRestInterface clockBehaviour defaultUsername defaultPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterfaceTest methodsFor: 'setUp' stamp: 'MV 11/7/2022 12:47:24' prior: 50573191 overrides: 16961394!
setUp

	factory _ StoreTestObjectsFactory new.
	autheticator _ true.
	internalRestInterface _ 	InternalRestInterface withAuthenticator: self withCatalog: factory defaultCatalog withClock: self .
	clockBehaviour _ DateAndTime now.
	defaultUsername _ 'aValidUsername'.
	defaultPassword _ 'aValidUsernamesPassword'.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:47:51' prior: 50574316!
test01createCartReturnsCartIdOfEmptyCartWithValidAuth

	|cartId| 
	
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword.
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.
	
	

	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:47:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:47:51'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:48:01' prior: 50573853!
test02createCartFailsWithInvalidAuth
	|cartId|
	
	autheticator _ false.
	
	cartId _ 0.
	self should:[ cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword] raise: Error - MessageNotUnderstood
	withExceptionDo:[
		:anError | self assert: anError messageText equals: InternalRestInterface failedAuthenticationErrorMessage.
			       self assert: cartId equals: 0]	
	
	
	

	! !

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:48:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:48:03'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:48:21' prior: 50574102!
test04addToCartCorrectlyAddsSingleBookToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', factory itemSellByTheStore , ' 1|'.

	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:48:49' prior: 50574116!
test05addToCartCorrectlyAddsSeveralBooksToCart

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 2.
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore2 ammount: 3.
	
	self assert: (internalRestInterface listCart: cartId) equals: ' ', factory itemSellByTheStore , ' 2|' , ' ', factory itemSellByTheStore2 , ' 3|'.

	
	! !

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:48:49'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:48:49'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:48:58' prior: 50574194!
test06listCartOfEmptyCartIsEmpty

	|cartId| 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	
	self assert: (internalRestInterface listCart: cartId) isEmpty.

	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:49:08' prior: 50574235!
test07listCartFailsWithInvalidCartId

	|expectedListCartOutput|
	 
	expectedListCartOutput _ 'test string'.	
	internalRestInterface createCartFor: defaultPassword authenticatedWith: defaultPassword. 
	
	self should: [expectedListCartOutput _ internalRestInterface listCart: 666] raise: Error
	withExceptionDo:[:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage.
						  self assert: expectedListCartOutput equals: 'test string'].

	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:49:13' prior: 50576224!
test07listCartFailsWithInvalidCartId

	|expectedListCartOutput|
	 
	expectedListCartOutput _ 'test string'.	
	internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	
	self should: [expectedListCartOutput _ internalRestInterface listCart: 666] raise: Error
	withExceptionDo:[:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage.
						  self assert: expectedListCartOutput equals: 'test string'].

	
	! !

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:49:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:49:14'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:51:01' prior: 50576243!
test07listCartFailsWithInvalidCartId

	self should: [internalRestInterface listCart: 666] raise: Error
	withExceptionDo:[:anError| self assert: anError messageText equals: InternalRestInterface nonExistentCartIDErrorMessage].

	
	! !

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:51:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:51:02'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:51:52' prior: 50563022!
test08createCartForUnknownClientCreatesClientWithNoPurchases

	internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword.
	
	self assert: (internalRestInterface listPurchases: 'clientID' password: 'password') equals: '0'.
	
	
	
	! !

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:51:54'!
ERROR!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:51:59'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:52:39' prior: 50576421!
test08createCartForUnknownClientCreatesClientWithNoPurchases

	internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword.
	
	self assert: (internalRestInterface listPurchases: defaultUsername password: defaultPassword) equals: '0'.
	
	
	
	! !

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:52:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:52:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:52:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:52:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:52:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:52:40'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:53:14' prior: 50576441!
test08createCartForUnknownClientCreatesClientWithNoPurchases

	internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword.
	
	self assert: (internalRestInterface listPurchases: defaultUsername password: defaultPassword) equals: '0'.
	
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:53:36' prior: 50575869!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userPassword itemAmmount | 
		
	userPassword _ 'aValidUserPassword'.
	cartId _ internalRestInterface createCartFor: 'aValidUser' authenticatedWith: userPassword. 
	itemAmmount _ 1.
	
	self addToCartAndCheckout: factory itemSellByTheStore ammount: itemAmmount toCart: cartId.
	
	self assert: (internalRestInterface listPurchases: 'aValidUser' password: userPassword) 
		equals: (factory itemSellByTheStore,'|',itemAmmount asString,'|', factory itemSellByTheStorePrice asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:53:41' prior: 50576540!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userName userPassword itemAmmount | 
		
	userName _ defaultUsername.
	userPassword _ defaultPassword.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	itemAmmount _ 1.
	
	self addToCartAndCheckout: factory itemSellByTheStore ammount: itemAmmount toCart: cartId.
	
	self assert: (internalRestInterface listPurchases: userName password: userPassword) 
		equals: (factory itemSellByTheStore,'|',itemAmmount asString,'|', factory itemSellByTheStorePrice asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:53:45' prior: 50576561!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId userPassword itemAmmount | 
		
	userPassword _ defaultPassword.
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: userPassword. 
	itemAmmount _ 1.
	
	self addToCartAndCheckout: factory itemSellByTheStore ammount: itemAmmount toCart: cartId.
	
	self assert: (internalRestInterface listPurchases: defaultUsername password: userPassword) 
		equals: (factory itemSellByTheStore,'|',itemAmmount asString,'|', factory itemSellByTheStorePrice asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:53:52' prior: 50576582!
test09listPurchasesHasCorrectTransactionAfterCheckout

	|cartId itemAmmount | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	itemAmmount _ 1.
	
	self addToCartAndCheckout: factory itemSellByTheStore ammount: itemAmmount toCart: cartId.
	
	self assert: (internalRestInterface listPurchases: defaultUsername password: defaultPassword) 
		equals: (factory itemSellByTheStore,'|',itemAmmount asString,'|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:53:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:53:54'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:54:16' prior: 50575825!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userName userPassword item item2 itemPrice item2Price ammount| 
		
	userName _ defaultUsername.
	userPassword _ defaultPassword.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	ammount _ 2.
	
	self addToCartAndCheckout: item ammount: ammount toCart: cartId.
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	self addToCartAndCheckout: item2 ammount: ammount toCart: cartId.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password')
		equals: (item,'|',ammount asString,'|', item2, '|',ammount asString,'|', (item2Price * ammount + (itemPrice * ammount))asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:54:19' prior: 50576697!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId userPassword item item2 itemPrice item2Price ammount| 
		
	userPassword _ defaultPassword.
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: userPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	ammount _ 2.
	
	self addToCartAndCheckout: item ammount: ammount toCart: cartId.
	
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: userPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	self addToCartAndCheckout: item2 ammount: ammount toCart: cartId.
	
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password')
		equals: (item,'|',ammount asString,'|', item2, '|',ammount asString,'|', (item2Price * ammount + (itemPrice * ammount))asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:54:20' prior: 50576729!
test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts

	|cartId item item2 itemPrice item2Price ammount| 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	ammount _ 2.
	
	self addToCartAndCheckout: item ammount: ammount toCart: cartId.
	
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	self addToCartAndCheckout: item2 ammount: ammount toCart: cartId.
	
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password')
		equals: (item,'|',ammount asString,'|', item2, '|',ammount asString,'|', (item2Price * ammount + (itemPrice * ammount))asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:55:12' prior: 50572475!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	|cartId cart2Id userName userPassword item item2 itemPrice item2Price| 
		
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	userName _ defaultUsername.
	userPassword _ defaultPassword.
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	cart2Id _ internalRestInterface createCartFor: userName authenticatedWith: 'a'. 
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface addToCart: cart2Id book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	internalRestInterface checkOutCart: cart2Id withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: 'password') equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:55:33' prior: 50576792!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	|cartId cart2Id userName userPassword item item2 itemPrice item2Price| 
		
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	userName _ defaultUsername.
	userPassword _ defaultPassword.
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword . 
	cart2Id _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface addToCart: cart2Id book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	internalRestInterface checkOutCart: cart2Id withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: userName password: userPassword) equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:55:35' prior: 50576828!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	|cartId cart2Id userPassword item item2 itemPrice item2Price| 
		
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	userPassword _ defaultPassword.
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: userPassword . 
	cart2Id _ internalRestInterface createCartFor: defaultUsername authenticatedWith: userPassword. 
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface addToCart: cart2Id book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	internalRestInterface checkOutCart: cart2Id withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: defaultUsername password: userPassword) equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:55:36' prior: 50576865!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	|cartId cart2Id item item2 itemPrice item2Price| 
		
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword . 
	cart2Id _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface addToCart: cart2Id book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	internalRestInterface checkOutCart: cart2Id withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: defaultUsername password: defaultPassword) equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:55:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:55:38'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:55:58' prior: 50575264!
test18addToCartExtendsCartExpiration
	
	|cartId userName userPassword| 
		
	userName _ defaultUsername.
	userPassword _ defaultPassword.
	cartId _ internalRestInterface createCartFor: userName authenticatedWith: userPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: userName password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:56:00' prior: 50577010!
test18addToCartExtendsCartExpiration
	
	|cartId userPassword| 
		
	userPassword _ defaultPassword.
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: userPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:56:02' prior: 50577036!
test18addToCartExtendsCartExpiration
	
	|cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:56:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:56:06'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 12:56:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:56:09'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:56:14' prior: 50577061!
test18addToCartExtendsCartExpiration
	
	|cartId| 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:56:18' prior: 50577367!
test18addToCartExtendsCartExpiration
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1 .
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:56:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 12:56:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 12:56:23'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 12:57:25' prior: 50576901!
test14sameClientCanUseTwoCartsAtTheSameTime
	
	|cartId cart2Id item item2 itemPrice item2Price| 
		
	item _ factory itemSellByTheStore.
	itemPrice _ factory itemSellByTheStorePrice.
	item2 _ factory itemSellByTheStore2.
	item2Price _ factory itemSellByTheStore2Price.
	
	
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword . 
	cart2Id _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: item ammount: 2.
	internalRestInterface addToCart: cart2Id book: item2 ammount: 2.
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	internalRestInterface checkOutCart: cart2Id withCard: factory notExpiredCreditCard through: self on: Date today.
	
	self assert: (internalRestInterface listPurchases: defaultUsername password: defaultPassword) 
		equals: (item,'|2|', item2, '|2|', (item2Price * 2 + (itemPrice * 2))asString).
	
	
	! !

Object subclass: #CartID
	instanceVariableNames: 'cart client lastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartID category: 'TusLibros' stamp: 'MV 11/7/2022 12:59:54'!
Object subclass: #CartID
	instanceVariableNames: 'cart client lastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(7 November 2022 13:02:52) CuisUniversity-5510.image priorSource: 7766095!

!classRemoval: #CartID stamp: 'MV 11/7/2022 13:05:05'!
Object subclass: #CartID
	instanceVariableNames: 'cart client lastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:05:06'!
PASSED!

Object subclass: #CartID
	instanceVariableNames: 'cart client lastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartID category: 'TusLibros' stamp: 'MV 11/7/2022 13:08:05'!
Object subclass: #CartID
	instanceVariableNames: 'cart client lastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/7/2022 13:09:21' prior: 50572182!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart cartId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	cartId _ CartID forCart: cart ofClient: client.
	cartIds add: cartId->cart.
	cartOwners add: cartId->client.
	self updateCartLastUpdate: cartId.
		
	^cartId.! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/7/2022 13:10:26' prior: 50577691!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart cartId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	cartId _ CartID forCart: cart ofClient: client.
	cartIds add: cartId.
		
	^cartId.! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:10:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:10:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:10:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:10:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:10:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:10:34'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:10:36'!
ERROR!
!CartID class methodsFor: 'instance creation' stamp: 'MV 11/7/2022 13:10:39'!
forCart: aCart ofClient: aClient 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeForCart: aCart ofClient: aClient ! !
!CartID class methodsFor: 'instance creation' stamp: 'MV 11/7/2022 13:10:46' prior: 50577798!
forCart: aCart ofClient: aClient 
	
	^self new initializeForCart: aCart ofClient: aClient ! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:10:47'!
ERROR!
!CartID methodsFor: 'initialization' stamp: 'MV 11/7/2022 13:10:54'!
initializeForCart: aCart ofClient: aClient 
	self shouldBeImplemented.
	cart := aCart.
	client := aClient.! !
!CartID methodsFor: 'initialization' stamp: 'MV 11/7/2022 13:11:22' prior: 50577817!
initializeForCart: aCart ofClient: aClient 
	
	cart _ aCart.
	client _ aClient.
	lastUpdate _ DateAndTime now! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:11:23'!
ERROR!

!methodRemoval: InternalRestInterface #newCartId stamp: 'MV 11/7/2022 13:11:47'!
newCartId
	
	|newId|
	
	newId _ lastCartId + 1.
	lastCartId _ newId.
	^newId.!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/7/2022 13:12:28' prior: 50571709!
listCart: aCartId 
	
	self validateCartId: aCartId.
	self updateCartLastUpdate: aCartId.
	
	^(aCartId cart) sendPrintListCartToInterface: self. 
	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:13:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:13:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:13:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:13:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:13:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:13:00'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:13:01'!
ERROR!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/7/2022 13:13:35' prior: 50577709!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart cartId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	cartId _ CartID forCart: cart ofClient: client.
		
	^cartId.! !

Object subclass: #InternalRestInterface
	instanceVariableNames: 'catalog authenticator lastCartId salesBook clients cartOwners clock cartsLastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/7/2022 13:13:39'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'catalog authenticator lastCartId salesBook clients cartOwners clock cartsLastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:13:43'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:13:43'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:13:43'!
ERROR!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:13:43'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:13:43'!
ERROR!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:13:43'!
ERROR!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:13:43'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:13:43'!
ERROR!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:13:43'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:13:43'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:13:43'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:13:43'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:13:45'!
ERROR!

Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds catalog authenticator lastCartId salesBook clients cartOwners clock cartsLastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalRestInterface category: 'TusLibros' stamp: 'MV 11/7/2022 13:15:34'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds catalog authenticator lastCartId salesBook clients cartOwners clock cartsLastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:15:56'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:15:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:15:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:15:56'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:15:56'!
ERROR!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:15:56'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:15:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:15:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:15:56'!
ERROR!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:15:56'!
ERROR!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:15:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:15:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:15:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:15:56'!
ERROR!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:15:56'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:15:56'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:15:56'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:15:56'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:15:58'!
ERROR!
!InternalRestInterface methodsFor: 'cart validation' stamp: 'MV 11/7/2022 13:16:14' prior: 50571570!
validateCartId: aCartId

	(cartIds includes: aCartId) ifFalse: [self error: self class nonExistentCartIDErrorMessage].
	self assertCartIsNotExpired: aCartId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:16:19'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:16:19'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:16:19'!
ERROR!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:16:19'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:16:19'!
ERROR!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:16:19'!
ERROR!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:16:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:16:19'!
ERROR!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:16:19'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:16:19'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:16:19'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:16:19'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:16:20'!
ERROR!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/7/2022 13:16:46' prior: 50577922!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart cartId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	cartId _ CartID forCart: cart ofClient: client.
	cartIds add: cartId.
		
	^cartId.! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/7/2022 13:18:02' prior: 50572168!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog withClock: aClock  
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastCartId _ 0.
	salesBook _ OrderedCollection new.
	cartIds _ Set new.
	clients _ Dictionary new.
	clock _ aClock.! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:18:04'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:18:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:18:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:18:04'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:18:04'!
ERROR!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:18:04'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:18:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:18:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:18:04'!
ERROR!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:18:04'!
ERROR!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:18:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:18:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:18:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:18:04'!
ERROR!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:18:04'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:18:04'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:18:04'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:18:04'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:18:05'!
ERROR!
!InternalRestInterface methodsFor: 'cart validation' stamp: 'MV 11/7/2022 13:18:48' prior: 50569463!
assertCartIsNotExpired: aCartID

	(clock now - (Duration minutes: 30)) < (aCartID lastUpdate) ifFalse: [self error: self class expiredCartErrorMessage]! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:18:50'!
ERROR!
!CartID methodsFor: 'accessing' stamp: 'MV 11/7/2022 13:18:55'!
lastUpdate
	self shouldBeImplemented.
	^lastUpdate! !
!CartID methodsFor: 'accessing' stamp: 'MV 11/7/2022 13:19:00' prior: 50578444!
lastUpdate
	
	^lastUpdate! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:19:01'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:19:05'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:19:05'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:19:05'!
ERROR!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:19:05'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:19:05'!
ERROR!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:19:05'!
ERROR!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:19:05'!
ERROR!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:19:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:19:05'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:19:08'!
ERROR!
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/7/2022 13:19:51' prior: 50577840!
listCart: aCartId 
	
	self validateCartId: aCartId.
	aCartId updateLastUpdate.
	
	^(aCartId cart) sendPrintListCartToInterface: self. 
	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:20:01'!
ERROR!
!CartID methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 13:20:05'!
updateLastUpdate
	self shouldBeImplemented.! !
!CartID methodsFor: 'as yet unclassified' stamp: 'MV 11/7/2022 13:20:58' prior: 50578607!
updateLastUpdate
	
	lastUpdate _ DateAndTime now! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'MV 11/7/2022 13:21:17' prior: 50578347!
initializeWithAuthenticator: anAuthenticator withCatalog: aCatalog withClock: aClock  
	
	authenticator := anAuthenticator.
	catalog := aCatalog.
	lastCartId _ 0.
	salesBook _ OrderedCollection new.
	cartIds _ Dictionary new.
	clients _ Dictionary new.
	clock _ aClock.! !
!InternalRestInterface methodsFor: 'cart' stamp: 'MV 11/7/2022 13:21:58' prior: 50578331!
createCartFor: aClientID authenticatedWith: aPassword 
	
	|cart cartId client|
	
	self authenticate: aClientID withPassword: aPassword.
	
	client _ clients at: aClientID ifAbsent: [clients add: aClientID->(Client with: aClientID). clients at: aClientID].
	cart _ Cart acceptingItemsOf: catalog .
	cartId _ CartID forCart: cart ofClient: client.
	cartIds at: self newCartIdNumber put: cartId.
		
	^cartId.! !

!classRemoval: #StoreTestObjectsFactory stamp: 'MV 11/7/2022 13:29:22'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'MV 11/7/2022 13:29:22'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalRestInterface stamp: 'MV 11/7/2022 13:29:22'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'cartIds catalog authenticator lastCartId salesBook clients cartOwners clock cartsLastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'MV 11/7/2022 13:29:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration cardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Client stamp: 'MV 11/7/2022 13:29:23'!
Object subclass: #Client
	instanceVariableNames: 'id purchases total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'MV 11/7/2022 13:29:23'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartID stamp: 'MV 11/7/2022 13:29:23'!
Object subclass: #CartID
	instanceVariableNames: 'cart client lastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'MV 11/7/2022 13:29:23'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalRestInterfaceTest stamp: 'MV 11/7/2022 13:29:24'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'factory autheticator internalRestInterface clockBehaviour defaultUsername defaultPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'MV 11/7/2022 13:29:24'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'card'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'MV 11/7/2022 13:29:24'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'MV 11/7/2022 13:29:24'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----STARTUP---- (7 November 2022 13:29:54) as C:\Lautaro Disco C\Programas Varios\CuisUniversity\CuisUniversity-5510.image!


!classRemoval: #CartID stamp: 'MV 11/7/2022 13:29:58'!
Object subclass: #CartID
	instanceVariableNames: 'cart client lastUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:30:09'!
PASSED!

----SNAPSHOT----(7 November 2022 13:30:13) CuisUniversity-5510.image priorSource: 7868301!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 13:31:51'!
test18ListCartExtendsCartExpiration
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface listCart: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 13:31:55'!
test19ListCartExtendsCartExpiration
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface listCart: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!methodRemoval: InternalRestInterfaceTest #test18ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:31:55'!
test18ListCartExtendsCartExpiration
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface listCart: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 13:33:28'!
assertThatExpirationIsExtendedAfterDoing: aBlock
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
		
	self moveClockForwardHalfAExpirationDuration.
	
	aBlock value: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 13:33:51' prior: 50577391!
test18addToCartExtendsCartExpiration
	
	self assertThatExpirationIsExtendedAfterDoing: [:cartId | 	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1]! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'MV 11/7/2022 13:34:07' prior: 50577708!
test19ListCartExtendsCartExpiration
	
	self assertThatExpirationIsExtendedAfterDoing: [:cartId | 	internalRestInterface listCart: cartId]! !

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:34:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:34:10'!
ERROR!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:34:10'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 13:36:59' prior: 50577752!
assertThatExpirationIsExtendedAfterDoing: aBlock
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
		
	self moveClockForwardHalfAExpirationDuration.
	
	aBlock value: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self assert: (internalRestInterface listPurchases: defaultUsername password: 'password') 
		equals: (factory itemSellByTheStore, '|1|', factory itemSellByTheStorePrice asString).
	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:37:00'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:37:00'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:37:00'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 13:39:17' prior: 50577802!
assertThatExpirationIsExtendedAfterDoing: aBlock
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
		
	self moveClockForwardHalfAExpirationDuration.
	
	aBlock value: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self should: (internalRestInterface listPurchases: defaultUsername password: 'password')
		raise: Error
		withExceptionDo: [:anError| self deny: (anError messageText = InternalRestInterface expiredCartErrorMessage)]	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:39:20'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:39:20'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:39:20'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:39:23'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 13:40:08' prior: 50577905!
assertThatExpirationIsExtendedAfterDoing: aBlock
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
		
	self moveClockForwardHalfAExpirationDuration.
	
	aBlock value: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self should: [internalRestInterface listPurchases: defaultUsername password: 'password']
		raise: Error
		withExceptionDo: [:anError| self deny: (anError messageText = InternalRestInterface expiredCartErrorMessage)]	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:40:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:40:08'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:40:08'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:40:10'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 13:40:16' prior: 50578009!
assertThatExpirationIsExtendedAfterDoing: aBlock
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
		
	self moveClockForwardHalfAExpirationDuration.
	
	aBlock value: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self should: [internalRestInterface listPurchases: defaultUsername password: 'password'. self fail]
		raise: Error
		withExceptionDo: [:anError| self deny: (anError messageText = InternalRestInterface expiredCartErrorMessage)]	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:40:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:40:16'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:40:17'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:40:18'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 13:41:03' prior: 50578113!
assertThatExpirationIsExtendedAfterDoing: aBlock
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
		
	self moveClockForwardHalfAExpirationDuration.
	
	aBlock value: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	self should: [internalRestInterface listPurchases: defaultUsername password: 'password'. Object amongus]
		raise: Error
		withExceptionDo: [:anError| self deny: (anError messageText = InternalRestInterface expiredCartErrorMessage)]	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:41:07'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:41:07'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 13:42:37' prior: 50578217!
assertThatExpirationIsExtendedAfterDoing: aBlock
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
		
	self moveClockForwardHalfAExpirationDuration.
	
	aBlock value: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	[internalRestInterface listPurchases: defaultUsername password: 'password'. self fail] 
		on: Error
		do: [:anError| self deny: (anError messageText = InternalRestInterface expiredCartErrorMessage)]	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:42:39'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:42:39'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:42:39'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:42:41'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 13:43:18' prior: 50578317!
assertThatExpirationIsExtendedAfterDoing: aBlock
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
		
	self moveClockForwardHalfAExpirationDuration.
	
	aBlock value: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	[internalRestInterface listPurchases: defaultUsername password: 'password'. self error: 'amongus'] 
		on: Error
		do: [:anError| self deny: (anError messageText = InternalRestInterface expiredCartErrorMessage)]	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:43:19'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:43:19'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 13:43:39' prior: 50578420!
assertThatExpirationIsExtendedAfterDoing: aBlock
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
		
	self moveClockForwardHalfAExpirationDuration.
	
	aBlock value: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	[internalRestInterface listPurchases: defaultUsername password: 'password'. self error: 'amongus'] 
		on: Error
		do: [:anError| self deny: (anError messageText = InternalRestInterface expiredCartErrorMessage)]	
	
	! !
!InternalRestInterfaceTest methodsFor: 'assertions' stamp: 'MV 11/7/2022 13:44:23' prior: 50578520!
assertThatExpirationIsExtendedAfterDoing: aBlock
	
	| cartId | 
		
	cartId _ internalRestInterface createCartFor: defaultUsername authenticatedWith: defaultPassword. 
	internalRestInterface addToCart: cartId book: factory itemSellByTheStore ammount: 1.
		
	self moveClockForwardHalfAExpirationDuration.
	
	aBlock value: cartId.
	
	self moveClockForwardHalfAExpirationDuration.
	
	internalRestInterface checkOutCart: cartId withCard: factory notExpiredCreditCard through: self on: Date today.
	
	[internalRestInterface listPurchases: defaultUsername password: 'password'. self error: 'not expiredCartErrorMessage, this is not a real error'] 
		on: Error
		do: [:anError| self deny: (anError messageText = InternalRestInterface expiredCartErrorMessage)]	
	
	! !

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:44:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:44:31'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CreditCardTest #test01cardsNumberMustBe16CharactersLong stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CreditCardTest #test02cardsNumberMustBeANumber stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CreditCardTest #test03cardsNameCanNotBeEmpty stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CreditCardTest #test04cardsNameCanNotBeAllSpaces stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CreditCardTest #test05cardsNameCanNotContainInvalidCharacters stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #CreditCardTest #test06cardsExpirationMustBeAMonth stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01createCartReturnsCartIdOfEmptyCartWithValidAuth stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02createCartFailsWithInvalidAuth stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03createReturnsDifferentCartIdFromLastTime stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04addToCartCorrectlyAddsSingleBookToCart stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05addToCartCorrectlyAddsSeveralBooksToCart stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06listCartOfEmptyCartIsEmpty stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07listCartFailsWithInvalidCartId stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08createCartForUnknownClientCreatesClientWithNoPurchases stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09listPurchasesHasCorrectTransactionAfterCheckout stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10listPurchasesHasCorrectTransactionsAfterSeveralCheckouts stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test11canNotCheckOutWithNonexistentCartID stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test12canNotListPurchasesOfNonexistentClientID stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test13canNotListPurchasesWithInvalidAuth stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test14sameClientCanUseTwoCartsAtTheSameTime stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test15canNotAddToCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test16canNotListCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test17canNotCheckOutCart30MinutesAfterLastAction stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test18addToCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test19ListCartExtendsCartExpiration stamp: 'MV 11/7/2022 13:44:33'!
PASSED!

----SNAPSHOT----(7 November 2022 13:44:36) CuisUniversity-5510.image priorSource: 7873034!

----SNAPSHOT----(7 November 2022 13:45:03) CuisUniversity-5510.image priorSource: 7910657!

----QUIT----(7 November 2022 13:45:09) CuisUniversity-5510.image priorSource: 7910749!